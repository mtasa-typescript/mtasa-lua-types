// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

import {
    ProgressBar,
    Gui,
    EngineTXD,
    EngineDFF,
    EngineCOL,
    EngineIFP,
    PrimitiveType,
    DxTexture,
    ObjectGroup,
    Browser,
    Light,
    Effect,
    Searchlight,
    Weapon,
    GuiBrowser,
    GuiMemo,
    GuiElement,
    GuiEdit,
    GuiScrollBar,
    GuiWindow,
    Projectile,
    Material,
    Svg,
    SvgCallback,
    Userdata,
    TextItem,
    Pickup,
    Request,
    Player,
    Blip,
    ColShape,
    Element,
    Ped,
    Resource,
    Team,
    Vehicle,
    XmlNode,
    File,
    Marker,
    MTASAObject,
    RadarArea,
    Water,
    Timer,
    HandleFunction,
    TimerCallbackFunction,
    FetchRemoteCallback,
    GenericEventHandler,
    CommandHandler,
    BindKeyCallback,
    BindKeyCallbackVarArgs,
    ControlName,
    KeyName,
    KeyState,
    Vector2,
    Vector3,
    Vector4,
    Matrix,
} from '../structure';

/** @customConstructor DxShader */
export class DxShader {
    /**
     * This function creates a shader element that can be used in the dxDraw functions.
     * Successful shader creation is not guaranteed unless the shader|Effect File contains a
     * fallback technique which will work on every existing PC.
     * <syntaxhighlight lang=lua>
     * element, string dxCreateShader ( string filepath / string raw_data , float priority = 0,
     * float maxDistance = 0, bool layered = false, string elementTypes =
     * world,vehicle,object,other  )
     * </syntaxhighlight>
     * *filepath / raw_data: The filepath of the shader|shader  Effect File (.fx) file or whole
     * data buffer of the shader file
     * All the following optional arguments are only relevant when the shader is used with
     * engineApplyShaderToWorldTexture
     * *priority: If more than one shader is matched to a world texture, the shader with the
     * highest priority will be used. If there is more than one shader with the same highest
     * priority, the most recently created shader is used.
     * *maxDistance: If non-zero, the shader will be applied to textures nearer than maxDistance
     * only. This can speed up rendering, but (to look good) may require the shader to fade out
     * its own effect as the texture reaches maxDistance.
     * *layered: When set to true, the shader will be drawn in a separate render pass. Several
     * layered shaders can be drawn on the same world texture. (To avoid
     * http://en.wikipedia.org/wiki/Z-fighting Z fighting artifacts, you may have to add
     * DepthBias<nowiki>=</nowiki>-0.0002; to the technique pass, but this might cause visual
     * artifacts when applied on vehicles)
     * *elementTypes: A comma seperated list of element types to restrict this shader to. Valid
     * element types are:
     * ** world - Textures in the GTA world
     * ** ped - Player and ped textures
     * ** vehicle - Vehicles textures
     * ** object - Objects textures
     * ** other - Element textures which are not peds, vehicles or objects
     * ** all - Everything
     * *element: A shader element if successful, false if invalid arguments were passed to the
     * function. You should always check to see if this function has returned false.
     * *string: The name of the technique that will be used.
     * |20688}}
     * <syntaxhighlight lang=lua>
     * element, string dxCreateShader ( string filepath / string raw_data  , table macros = {} ,
     * float priority = 0, float maxDistance = 0, bool layered = false, string elementTypes =
     * world,vehicle,object,other  )
     * </syntaxhighlight>
     * *filepath / raw_data: The filepath of the shader|shader  Effect File (.fx) file or whole
     * data buffer of the shader file
     * All the following optional arguments are only relevant when the shader is used with
     * engineApplyShaderToWorldTexture
     * *macros: A table contains macros in an ordered and/or unordered way. See example below.
     * *priority: If more than one shader is matched to a world texture, the shader with the
     * highest priority will be used. If there is more than one shader with the same highest
     * priority, the most recently created shader is used.
     * *maxDistance: If non-zero, the shader will be applied to textures nearer than maxDistance
     * only. This can speed up rendering, but (to look good) may require the shader to fade out
     * its own effect as the texture reaches maxDistance.
     * *layered: When set to true, the shader will be drawn in a separate render pass. Several
     * layered shaders can be drawn on the same world texture. (To avoid
     * http://en.wikipedia.org/wiki/Z-fighting Z fighting artifacts, you may have to add
     * DepthBias<nowiki>=</nowiki>-0.0002; to the technique pass, but this might cause visual
     * artifacts when applied on vehicles)
     * *elementTypes: A comma seperated list of element types to restrict this shader to. Valid
     * element types are:
     * ** world - Textures in the GTA world
     * ** ped - Player and ped textures
     * ** vehicle - Vehicles textures
     * ** object - Objects textures
     * ** other - Element textures which are not peds, vehicles or objects
     * ** all - Everything
     * *element: A shader element if successful, false if invalid arguments were passed to the
     * function. You should always check to see if this function has returned false.
     * *string: The name of the technique that will be used.
     * @see https://wiki.multitheftauto.com/wiki/DxCreateShader
     */
    constructor(
        filepath: string | string,
        priority?: number,
        maxDistance?: number,
        layered?: boolean,
        elementTypes?: string,
    );
}
