// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

import {
    ProgressBar,
    Gui,
    EngineTXD,
    EngineDFF,
    EngineCOL,
    EngineIFP,
    PrimitiveType,
    DxTexture,
    ObjectGroup,
    Browser,
    Light,
    Effect,
    Searchlight,
    Weapon,
    GuiBrowser,
    GuiMemo,
    GuiElement,
    GuiEdit,
    GuiScrollBar,
    GuiWindow,
    Projectile,
    Material,
    Svg,
    SvgCallback,
    Userdata,
    TextItem,
    Pickup,
    Request,
    Player,
    Blip,
    ColShape,
    Element,
    Ped,
    Resource,
    Team,
    Vehicle,
    File,
    Marker,
    MTASAObject,
    RadarArea,
    Water,
    Timer,
    HandleFunction,
    TimerCallbackFunction,
    FetchRemoteCallback,
    GenericEventHandler,
    CommandHandler,
    BindKeyCallback,
    BindKeyCallbackVarArgs,
    ControlName,
    KeyName,
    KeyState,
    Vector2,
    Vector3,
    Vector4,
    Matrix,
} from '../structure';

/** @customConstructor XmlNode */
export class XmlNode {
    /**
     * Returns all the attributes of a specific XML node.
     */
    attributes: LuaTable;

    /**
     * This function returns all children of a particular XML node, or a particular child node.
     */
    children: LuaTable | XmlNode;

    /**
     * Gets the tag name of the specified XML node.
     */
    name: string;

    /**
     * Returns the parent node of an xml node.
     */
    parent: XmlNode;

    /**
     * This function is made to be able to read tag values in XML files (eg.
     * <something>anything</something>).
     */
    value: string;

    /**
     * This function copies all contents of a certain node in a XML document to a new document
     * file, so the copied node becomes the new files root node.
     * The new file will not be saved to file system until xmlSaveFile() is called
     * @see https://wiki.multitheftauto.com/wiki/XmlCopyFile
     * @param newFilePath the path of the file that is to be created, in the following format: :resourceName/path.
     * resourceName is the name of the resource the file is in, and path is the path from the
     * root directory of the resource to the file.
     * :For example, to create a file named 'newfile.xml' with myNode as the root node in the
     * resource 'ctf', it can be done from another resource this way: ''xmlCopyFile(myNode,
     * ":ctf/newfile.xml")''.
     * :If the file is to be in the current resource, only the file path is necessary, e.g.
     * ''xmlCopyFile(myNode, "newfile.xml")''.
     * @return returns the xmlnode of the copy if the node was successfully copied, false if invalid
     * arguments were passed.
     */
    copy(newFilePath: string): XmlNode;

    /**
     * This function creates a new child node under an XML node.
     * @see https://wiki.multitheftauto.com/wiki/XmlCreateChild
     * @param tagName the type of the child node that will be created.
     * @return returns the created xmlnode if successful, false otherwise.
     */
    createChild(tagName: string): XmlNode;

    /**
     * This function destroys a XML node from the XML node tree.
     * @see https://wiki.multitheftauto.com/wiki/XmlDestroyNode
     * @return returns true if the xml node was successfully destroyed, false otherwise.
     */
    destroy(): boolean;

    /**
     * This function returns a named child node of an XML node.
     * @see https://wiki.multitheftauto.com/wiki/XmlFindChild
     * @param tagName : This is the name of the child node you wish to find (case-sensitive).
     * @param index : This is the 0-based index of the node you wish to find. For example, to find the 5th
     * subnode with a particular name, you would use 4 as the index value. To find the first
     * occurence, use 0.
     * @return returns an xmlnode if the node was found, false otherwise.
     */
    findChild(tagName: string, index: number): XmlNode;

    /**
     * This function is used to return an attribute of a node in a configuration file.
     * @see https://wiki.multitheftauto.com/wiki/XmlNodeGetAttribute
     * @param name The name of the attribute.
     * @return returns the attribute in string form or false, if the attribute is not defined.
     */
    getAttribute(name: string): string;

    /**
     * Returns all the attributes of a specific XML node.
     * @see https://wiki.multitheftauto.com/wiki/XmlNodeGetAttributes
     * @return if successful, returns a table with as keys the names of the attributes and as values the
     * corresponding attribute values. if the node has no attributes, returns an empty table. in
     * case of failure, returns false.
     */
    getAttributes(): LuaTable;

    /**
     * This function returns all children of a particular XML node, or a particular child node.
     * @see https://wiki.multitheftauto.com/wiki/XmlNodeGetChildren
     * @param index If you only want to retrieve one particular child node, specify its (0-based) index here.
     * For example if you only want the first node, specify 0; the fifth node has index 4, etc.
     * @return if index isnt specified, returns a table containing all child nodes. if index is
     * specified, returns the corresponding child node if it exists. if no nodes are found, it
     * returns an empty table. returns false in case of failure.
     */
    getChildren(index?: number): LuaTable | XmlNode;

    /**
     * Gets the tag name of the specified XML node.
     * @see https://wiki.multitheftauto.com/wiki/XmlNodeGetName
     * @return returns the tag name of the node if successful, false otherwise.
     */
    getName(): string;

    /**
     * Returns the parent node of an xml node.
     * @see https://wiki.multitheftauto.com/wiki/XmlNodeGetParent
     * @return returns the parent node of the specified node if successful. returns false if the
     * specified node is the root node or an invalid node was passed.
     */
    getParent(): XmlNode;

    /**
     * This function is made to be able to read tag values in XML files (eg.
     * <something>anything</something>).
     * @see https://wiki.multitheftauto.com/wiki/XmlNodeGetValue
     * @return returns the value of the node as a string if it was received successfully, false
     * otherwise.
     */
    getValue(): string;

    /**
     * This function is used to edit an attribute of a node in a configuration file.
     * @see https://wiki.multitheftauto.com/wiki/XmlNodeSetAttribute
     * @param name The name of the attribute.
     * @param value The value which you wish to change the attribute to. (Note: nil will delete the attribute)
     * @return returns true if the attribute was set successfully, false if the node and/or attribute do
     * not exist, or if theyre faulty.
     */
    setAttribute(name: string, value: string | number): boolean;

    /**
     * Sets the tag name of the specified XML node.
     * @see https://wiki.multitheftauto.com/wiki/XmlNodeSetName
     * @param name the new tag name to set.
     * @return returns true if successful, false otherwise.
     */
    setName(name: string): boolean;

    /**
     * This function is made to be able to assign values to tags in XML files (eg.
     * <something>anything</something>).
     * @see https://wiki.multitheftauto.com/wiki/XmlNodeSetValue
     * @param value The string value you want the node to have.
     * @param setCDATA A boolean indicating if you want the value to be enclosed inside CDATA tags.
     * @return returns true if value was successfully set, false otherwise.
     */
    setValue(value: string, setCDATA?: boolean): boolean;

    /**
     * This function saves a loaded XML file.
     * @see https://wiki.multitheftauto.com/wiki/XmlSaveFile
     * @return returns true if save was successful, false if the xml file does not exist.
     */
    saveFile(): boolean;

    /**
     * Unloads an XML document from memory.
     * @see https://wiki.multitheftauto.com/wiki/XmlUnloadFile
     * @return returns true if the document was unloaded successfully, false otherwise.
     */
    unload(): boolean;
}
