// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

import {
    ProgressBar,
    Gui,
    EngineTXD,
    EngineDFF,
    EngineCOL,
    EngineIFP,
    PrimitiveType,
    DxTexture,
    ObjectGroup,
    Browser,
    Light,
    Effect,
    Searchlight,
    Weapon,
    GuiBrowser,
    GuiMemo,
    GuiElement,
    GuiEdit,
    GuiScrollBar,
    GuiWindow,
    Projectile,
    Material,
    Svg,
    SvgCallback,
    Userdata,
    TextItem,
    Pickup,
    Request,
    Player,
    Blip,
    ColShape,
    Element,
    Ped,
    Resource,
    Team,
    Vehicle,
    XmlNode,
    File,
    Marker,
    MTASAObject,
    RadarArea,
    Water,
    Timer,
    HandleFunction,
    TimerCallbackFunction,
    FetchRemoteCallback,
    GenericEventHandler,
    CommandHandler,
    BindKeyCallback,
    BindKeyCallbackVarArgs,
    ControlName,
    KeyName,
    KeyState,
    Vector2,
    Vector3,
    Vector4,
    Matrix,
} from '../../structure';

/** @customConstructor GuiCheckbox */
export class GuiCheckbox extends GuiElement {
    /**
     * This function gets a checkboxs selection state.
     */
    selected: boolean;

    /**
     * This function gets a checkboxs selection state.
     * @see https://wiki.multitheftauto.com/wiki/GuiCheckBoxGetSelected
     * @return returns true if the checkbox is selected, false if it is not.
     */
    getSelected(): boolean;

    /**
     * This function selects (ticks) or unselects a checkbox.
     * @see https://wiki.multitheftauto.com/wiki/GuiCheckBoxSetSelected
     * @param state The state of the checkbox, where true indicates selected, and false indicates unselected.
     * @return returns true if the checkboxs selection state was successfully set, false otherwise.
     */
    setSelected(state: boolean): boolean;

    /**
     * This function creates a Element/GUI/Checkbox|checkbox.
     * @see https://wiki.multitheftauto.com/wiki/GuiCreateCheckBox
     * @param x A float of the 2D x position of the checkbox on a players screen. This is affected by the
     * relative argument.
     * @param y A float of the 2D y position of the checkbox on a players screen. This is affected by the
     * relative argument.
     * @param width A float of the width of the text field next to the checkbox. This is affected by the
     * relative argument.
     * @param height A float of the height of the text field next to the checkbox. This is affected by the
     * relative argument.
     * @param text The text to be displayed next to the checkbox.
     * @param selected A boolean representing whether the checkbox created should be selected by default.
     * @param relative This is whether sizes and positioning are relative. If this is true, then all
     * x,y,width,height floats must be between 0 and 1, representing measures relative to the
     * parent.
     * @param parent This is the parent that the checkbox is attached to. If the relative argument is true,
     * sizes and positioning will be made relative to this parent. If the relative argument is
     * false, positioning will be the number of offset pixels from the parents origin. If no
     * parent is passed, the parent will become the screen - causing positioning and sizing
     * according to screen positioning.
     * @return returns element of the checkbox if it was created succesfully, false otherwise.
     */
    constructor(
        x: number,
        y: number,
        width: number,
        height: number,
        text: string,
        selected: boolean,
        relative: boolean,
        parent?: Element,
    );
}
