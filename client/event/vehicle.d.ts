// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

import { EventNames } from './all_event_names';
import {
    ProgressBar,
    Gui,
    EngineTXD,
    EngineDFF,
    EngineCOL,
    EngineIFP,
    PrimitiveType,
    DxTexture,
    ObjectGroup,
    Browser,
    Light,
    Effect,
    Searchlight,
    Weapon,
    GuiBrowser,
    GuiMemo,
    GuiElement,
    GuiEdit,
    GuiScrollBar,
    GuiWindow,
    Projectile,
    Material,
    Svg,
    SvgCallback,
    Userdata,
    TextItem,
    Pickup,
    Request,
    Player,
    Blip,
    ColShape,
    Element,
    Ped,
    Resource,
    Team,
    Vehicle,
    XmlNode,
    File,
    Marker,
    MTASAObject,
    RadarArea,
    Water,
    Timer,
    HandleFunction,
    TimerCallbackFunction,
    FetchRemoteCallback,
    GenericEventHandler,
    CommandHandler,
    BindKeyCallback,
    BindKeyCallbackVarArgs,
    ControlName,
    KeyName,
    KeyState,
    Vector2,
    Vector3,
    Vector4,
    Matrix,
} from '../structure';

export interface OnClientTrailerAttach extends GenericEventHandler {
    name: EventNames.OnClientTrailerAttach;
    function: (this: void, towedBy: Vehicle) => void;
}

export interface OnClientTrailerDetach extends GenericEventHandler {
    name: EventNames.OnClientTrailerDetach;
    function: (this: void, towedBy: Vehicle) => void;
}

export interface OnClientVehicleCollision extends GenericEventHandler {
    name: EventNames.OnClientVehicleCollision;
    function: (
        this: void,
        theHitElement: Element,
        damageImpulseMag: number,
        bodypart: number,
        collisionX: number,
        collisionY: number,
        collisionZ: number,
        normalX: number,
        normalY: number,
        normalZ: number,
        hitElementForce: number,
        model: number,
    ) => void;
}

export interface OnClientVehicleDamage extends GenericEventHandler {
    name: EventNames.OnClientVehicleDamage;
    function: (
        this: void,
        theAttacker: Element,
        theWeapon: number,
        loss: number,
        damagePosX: number,
        damagePosY: number,
        damagePosZ: number,
        tireID: number,
    ) => void;
}

export interface OnClientVehicleEnter extends GenericEventHandler {
    name: EventNames.OnClientVehicleEnter;
    function: (this: void, thePed: Ped, seat: number) => void;
}

export interface OnClientVehicleExit extends GenericEventHandler {
    name: EventNames.OnClientVehicleExit;
    function: (this: void, thePed: Ped, seat: number) => void;
}

export interface OnClientVehicleExplode extends GenericEventHandler {
    name: EventNames.OnClientVehicleExplode;
    function: (this: void) => void;
}

export interface OnClientVehicleNitroStateChange extends GenericEventHandler {
    name: EventNames.OnClientVehicleNitroStateChange;
    function: (this: void, state: boolean) => void;
}

export interface OnClientVehicleRespawn extends GenericEventHandler {
    name: EventNames.OnClientVehicleRespawn;
    function: (this: void) => void;
}

export interface OnClientVehicleStartEnter extends GenericEventHandler {
    name: EventNames.OnClientVehicleStartEnter;
    function: (this: void, thePed: Ped, seat: number, door: number) => void;
}

export interface OnClientVehicleStartExit extends GenericEventHandler {
    name: EventNames.OnClientVehicleStartExit;
    function: (this: void, thePed: Ped, seat: number, door: number) => void;
}

export interface OnClientVehicleWeaponHit extends GenericEventHandler {
    name: EventNames.OnClientVehicleWeaponHit;
    function: (
        this: void,
        weaponType: number,
        hitElement: Element,
        hitX: number,
        hitY: number,
        hitZ: number,
        model: number,
        materialID: number,
    ) => void;
}
