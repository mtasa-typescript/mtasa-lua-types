// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

import { EventNames } from './all_event_names';
import {
    ProgressBar,
    Gui,
    EngineTXD,
    EngineDFF,
    EngineCOL,
    EngineIFP,
    PrimitiveType,
    DxTexture,
    ObjectGroup,
    Browser,
    Light,
    Effect,
    Searchlight,
    Weapon,
    GuiBrowser,
    GuiMemo,
    GuiElement,
    GuiEdit,
    GuiScrollBar,
    GuiWindow,
    Projectile,
    Material,
    Svg,
    SvgCallback,
    Userdata,
    TextItem,
    Pickup,
    Request,
    Player,
    Blip,
    ColShape,
    Element,
    Ped,
    Resource,
    Team,
    Vehicle,
    XmlNode,
    File,
    Marker,
    MTASAObject,
    RadarArea,
    Water,
    Timer,
    HandleFunction,
    TimerCallbackFunction,
    FetchRemoteCallback,
    GenericEventHandler,
    CommandHandler,
    BindKeyCallback,
    BindKeyCallbackVarArgs,
    ControlName,
    KeyName,
    KeyState,
    Vector2,
    Vector3,
    Vector4,
    Matrix,
} from '../structure';

export interface OnClientChatMessage extends GenericEventHandler {
    name: EventNames.OnClientChatMessage;
    function: (
        this: void,
        text: string,
        r: number,
        g: number,
        b: number,
        messageType: number,
    ) => void;
}

export interface OnClientConsole extends GenericEventHandler {
    name: EventNames.OnClientConsole;
    function: (this: void, text: string) => void;
}

export interface OnClientDebugMessage extends GenericEventHandler {
    name: EventNames.OnClientDebugMessage;
    function: (
        this: void,
        message: string,
        level: number,
        file: string,
        line: number,
        r: number,
        g: number,
        b: number,
    ) => void;
}

export interface OnClientExplosion extends GenericEventHandler {
    name: EventNames.OnClientExplosion;
    function: (
        this: void,
        x: number,
        y: number,
        z: number,
        theType: number,
    ) => void;
}

export interface OnClientFileDownloadComplete extends GenericEventHandler {
    name: EventNames.OnClientFileDownloadComplete;
    function: (
        this: void,
        fileName: string,
        success: boolean,
        requestResource: Resource,
    ) => void;
}

export interface OnClientHUDRender extends GenericEventHandler {
    name: EventNames.OnClientHUDRender;
    function: (this: void) => void;
}

export interface OnClientMTAFocusChange extends GenericEventHandler {
    name: EventNames.OnClientMTAFocusChange;
    function: (this: void, windowFocused: boolean) => void;
}

export interface OnClientMinimize extends GenericEventHandler {
    name: EventNames.OnClientMinimize;
    function: (this: void) => void;
}

export interface OnClientPedsProcessed extends GenericEventHandler {
    name: EventNames.OnClientPedsProcessed;
    function: (this: void) => void;
}

export interface OnClientPlayerNetworkStatus extends GenericEventHandler {
    name: EventNames.OnClientPlayerNetworkStatus;
    function: (this: void, status: number, ticks: number) => void;
}

export interface OnClientPreRender extends GenericEventHandler {
    name: EventNames.OnClientPreRender;
    function: (this: void, timeSlice: number) => void;
}

export interface OnClientRender extends GenericEventHandler {
    name: EventNames.OnClientRender;
    function: (this: void) => void;
}

export interface OnClientRestore extends GenericEventHandler {
    name: EventNames.OnClientRestore;
    function: (this: void, didClearRenderTargets: boolean) => void;
}

export interface OnClientTransferBoxProgressChange extends GenericEventHandler {
    name: EventNames.OnClientTransferBoxProgressChange;
    function: (
        this: void,
        downloadedSizeTotal: number,
        downloadTotalBytes: number,
    ) => void;
}

export interface OnClientTransferBoxVisibilityChange
    extends GenericEventHandler {
    name: EventNames.OnClientTransferBoxVisibilityChange;
    function: (this: void, isVisible: boolean) => void;
}

export interface OnClientWorldSound extends GenericEventHandler {
    name: EventNames.OnClientWorldSound;
    function: (
        this: void,
        group: number,
        index: number,
        x: number,
        y: number,
        z: number,
    ) => void;
}
