// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

import { EventNames } from './all_event_names';
import {
    ProgressBar,
    Gui,
    EngineTXD,
    EngineDFF,
    EngineCOL,
    EngineIFP,
    PrimitiveType,
    DxTexture,
    ObjectGroup,
    Browser,
    Light,
    Effect,
    Searchlight,
    Weapon,
    GuiBrowser,
    GuiMemo,
    GuiElement,
    GuiEdit,
    GuiScrollBar,
    GuiWindow,
    Projectile,
    Material,
    Svg,
    SvgCallback,
    Userdata,
    TextItem,
    Pickup,
    Request,
    Player,
    Blip,
    ColShape,
    Element,
    Ped,
    Resource,
    Team,
    Vehicle,
    XmlNode,
    File,
    Marker,
    MTASAObject,
    RadarArea,
    Water,
    Timer,
    HandleFunction,
    TimerCallbackFunction,
    FetchRemoteCallback,
    GenericEventHandler,
    CommandHandler,
    BindKeyCallback,
    BindKeyCallbackVarArgs,
    ControlName,
    KeyName,
    KeyState,
    Vector2,
    Vector3,
    Vector4,
    Matrix,
} from '../structure';

export interface OnClientPlayerChangeNick extends GenericEventHandler {
    name: EventNames.OnClientPlayerChangeNick;
    function: (this: void, oldNick: string, newNick: string) => void;
}

export interface OnClientPlayerChoke extends GenericEventHandler {
    name: EventNames.OnClientPlayerChoke;
    function: (this: void, weaponID: number) => void;
}

export interface OnClientPlayerDamage extends GenericEventHandler {
    name: EventNames.OnClientPlayerDamage;
    function: (
        this: void,
        attacker: Element,
        damage_causing: number,
        bodypart: number,
        loss?: number,
    ) => void;
}

export interface OnClientPlayerHeliKilled extends GenericEventHandler {
    name: EventNames.OnClientPlayerHeliKilled;
    function: (this: void, killer: Vehicle) => void;
}

export interface OnClientPlayerHitByWaterCannon extends GenericEventHandler {
    name: EventNames.OnClientPlayerHitByWaterCannon;
    function: (this: void, playerHit: Player) => void;
}

export interface OnClientPlayerJoin extends GenericEventHandler {
    name: EventNames.OnClientPlayerJoin;
    function: (this: void) => void;
}

export interface OnClientPlayerPickupHit extends GenericEventHandler {
    name: EventNames.OnClientPlayerPickupHit;
    function: (
        this: void,
        thePickup: Pickup,
        matchingDimension: boolean,
    ) => void;
}

export interface OnClientPlayerPickupLeave extends GenericEventHandler {
    name: EventNames.OnClientPlayerPickupLeave;
    function: (
        this: void,
        thePickup: Pickup,
        matchingDimension: boolean,
    ) => void;
}

export interface OnClientPlayerQuit extends GenericEventHandler {
    name: EventNames.OnClientPlayerQuit;
    function: (this: void, reason: string) => void;
}

export interface OnClientPlayerRadioSwitch extends GenericEventHandler {
    name: EventNames.OnClientPlayerRadioSwitch;
    function: (this: void, stationID: number) => void;
}

export interface OnClientPlayerSpawn extends GenericEventHandler {
    name: EventNames.OnClientPlayerSpawn;
    function: (this: void, hisTeam: Team) => void;
}

export interface OnClientPlayerStealthKill extends GenericEventHandler {
    name: EventNames.OnClientPlayerStealthKill;
    function: (this: void, targetPlayer: Element) => void;
}

export interface OnClientPlayerStuntFinish extends GenericEventHandler {
    name: EventNames.OnClientPlayerStuntFinish;
    function: (
        this: void,
        stuntType: string,
        stuntTime: number,
        stuntDistance: number,
    ) => void;
}

export interface OnClientPlayerStuntStart extends GenericEventHandler {
    name: EventNames.OnClientPlayerStuntStart;
    function: (this: void, stuntType: string) => void;
}

export interface OnClientPlayerTarget extends GenericEventHandler {
    name: EventNames.OnClientPlayerTarget;
    function: (this: void, target: Element) => void;
}

export interface OnClientPlayerVehicleEnter extends GenericEventHandler {
    name: EventNames.OnClientPlayerVehicleEnter;
    function: (this: void, theVehicle: Vehicle, seat: number) => void;
}

export interface OnClientPlayerVehicleExit extends GenericEventHandler {
    name: EventNames.OnClientPlayerVehicleExit;
    function: (this: void, theVehicle: Vehicle, seat: number) => void;
}

export interface OnClientPlayerVoicePause extends GenericEventHandler {
    name: EventNames.OnClientPlayerVoicePause;
    function: (this: void, reason: string) => void;
}

export interface OnClientPlayerVoiceResumed extends GenericEventHandler {
    name: EventNames.OnClientPlayerVoiceResumed;
    function: (this: void, reason: string) => void;
}

export interface OnClientPlayerVoiceStart extends GenericEventHandler {
    name: EventNames.OnClientPlayerVoiceStart;
    function: (this: void) => void;
}

export interface OnClientPlayerVoiceStop extends GenericEventHandler {
    name: EventNames.OnClientPlayerVoiceStop;
    function: (this: void) => void;
}

export interface OnClientPlayerWasted extends GenericEventHandler {
    name: EventNames.OnClientPlayerWasted;
    function: (
        this: void,
        killer: Element,
        weapon: number,
        bodypart: number,
        stealth: boolean,
    ) => void;
}

export interface OnClientPlayerWeaponFire extends GenericEventHandler {
    name: EventNames.OnClientPlayerWeaponFire;
    function: (
        this: void,
        weapon: number,
        ammo: number,
        ammoInClip: number,
        hitX: number,
        hitY: number,
        hitZ: number,
        hitElement: Element,
        startX: number,
        startY: number,
        startZ: number,
    ) => void;
}

export interface OnClientPlayerWeaponSwitch extends GenericEventHandler {
    name: EventNames.OnClientPlayerWeaponSwitch;
    function: (
        this: void,
        previousWeaponSlot: number,
        currentWeaponSlot: number,
    ) => void;
}
