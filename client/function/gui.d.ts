// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

import {
    ProgressBar,
    Gui,
    EngineTXD,
    EngineDFF,
    EngineCOL,
    EngineIFP,
    PrimitiveType,
    DxTexture,
    ObjectGroup,
    Browser,
    Light,
    Effect,
    Searchlight,
    Weapon,
    GuiBrowser,
    GuiMemo,
    GuiElement,
    GuiEdit,
    GuiScrollBar,
    GuiWindow,
    Projectile,
    Material,
    Svg,
    SvgCallback,
    Userdata,
    TextItem,
    Pickup,
    Request,
    Player,
    Blip,
    ColShape,
    Element,
    Ped,
    Resource,
    Team,
    Vehicle,
    XmlNode,
    File,
    Marker,
    MTASAObject,
    RadarArea,
    Water,
    Timer,
    HandleFunction,
    TimerCallbackFunction,
    FetchRemoteCallback,
    GenericEventHandler,
    CommandHandler,
    BindKeyCallback,
    BindKeyCallbackVarArgs,
    ControlName,
    KeyName,
    KeyState,
    Vector2,
    Vector3,
    Vector4,
    Matrix,
} from '../structure';

/**
 * Gets the current maximum amount of characters that can be input via chatbox
 * @see https://wiki.multitheftauto.com/wiki/GetChatboxCharacterLimit
 * @return returns a number between 0-255, representing the chatbox input character limit
 * @noSelf
 */
export declare function getChatboxCharacterLimit(): number;

/**
 * Returns information about how the chatbox looks.
 * These values come from the file called: Chatboxpresets.xml but it depends on what type of
 * preset you currently have, which is chosen from your settings in the Interface tab.
 * @see https://wiki.multitheftauto.com/wiki/GetChatboxLayout
 * @param CVar the name of the property you want returned. Can be the following values:
 * @param chat_font - Returns the chatbox font
 * @param chat_lines - Returns how many lines the chatbox has
 * @param chat_color - Returns the background color of the chatbox
 * @param chat_text_color - Returns the chatbox text color
 * @param chat_input_color - Returns the background color of the chatbox input
 * @param chat_input_prefix_color - Returns the color of the input prefix text
 * @param chat_input_text_color - Returns the color of the text in the chatbox input
 * @param chat_scale - Returns the scale of the text in the chatbox
 * @param chat_position_offset_x - Returns the x position offset setting
 * @param chat_position_offset_y - Returns the y position offset setting
 * @param chat_position_horizontal - Returns the horizontal alignment setting
 * @param chat_position_vertical - Returns the vertical alignment setting
 * @param chat_text_alignment - Returns the text alignment setting
 * @param chat_width - Returns the scale of the background width
 * @param chat_css_style_text - Returns whether text fades out over time
 * @param chat_css_style_background - Returns whether the background fades out over time
 * @param chat_line_life - Returns how long it takes for text to start fading out
 * @param chat_line_fade_out - Returns how long takes for text to fade out
 * @param chat_use_cegui - Returns whether CEGUI is used to render the chatbox
 * @param text_scale - Returns text scale
 * **{{Added feature/item|1.6.0|1.5.9|21160|'''chat_text_outline''' - Returns whether text
 * black/white outline is used}}
 * @return *4 numbers if the cvar contains color
 * *2 numbers if chat_scale was entered
 * *1 number if any other cvar was specified
 * *a table of all cvar values, if cvar was not specified
 * *false if an invalid cvar was specified
 * @noSelf
 */
export declare function getChatboxLayout(
    CVar?: string,
): boolean | number | LuaTable;

/**
 * @see https://wiki.multitheftauto.com/wiki/GuiBlur
 * @param guiElement the GUI element that you want to defocus
 * @return returns true if the function was successful, false otherwise.
 * @noSelf
 */
export declare function guiBlur(guiElement: Element): boolean;

/**
 * This function brings a GUI element on top of others.
 * @see https://wiki.multitheftauto.com/wiki/GuiBringToFront
 * @param guiElement the GUI element that you want to move to the front.
 * @return returns true if the function was successful, false otherwise.
 * @noSelf
 */
export declare function guiBringToFront(guiElement: Element): boolean;

/**
 * This function gets a checkboxs selection state.
 * @see https://wiki.multitheftauto.com/wiki/GuiCheckBoxGetSelected
 * @param theCheckbox The checkbox you wish to retrieve the selection state of.
 * @return returns true if the checkbox is selected, false if it is not.
 * @noSelf
 */
export declare function guiCheckBoxGetSelected(theCheckbox: Element): boolean;

/**
 * This function selects (ticks) or unselects a checkbox.
 * @see https://wiki.multitheftauto.com/wiki/GuiCheckBoxSetSelected
 * @param theCheckbox The GUI element in which you wish to change the selection state of
 * @param state The state of the checkbox, where true indicates selected, and false indicates unselected.
 * @return returns true if the checkboxs selection state was successfully set, false otherwise.
 * @noSelf
 */
export declare function guiCheckBoxSetSelected(
    theCheckbox: Element,
    state: boolean,
): boolean;

/**
 * Adds an item to a combobox.
 * @see https://wiki.multitheftauto.com/wiki/GuiComboBoxAddItem
 * @param comboBox The combobox you want to add a row to
 * @param value The text that the item will contain.
 * @return returns the item id if it has been created, false otherwise.
 * @noSelf
 */
export declare function guiComboBoxAddItem(
    comboBox: Element,
    value: string,
): number;

/**
 * This function removes all the items from a combobox.
 * @see https://wiki.multitheftauto.com/wiki/GuiComboBoxClear
 * @param comboBox The combobox element to be cleared
 * @return returns true if the combobox element is valid and has been cleared successfully, false
 * otherwise.
 * @noSelf
 */
export declare function guiComboBoxClear(comboBox: Element): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/GuiComboBoxGetItemCount
 * @param comboBox The combo box to get the number of items from.
 * @return returns the number of items if the function is successful, false otherwise.
 * @noSelf
 */
export declare function guiComboBoxGetItemCount(comboBox: Element): number;

/**
 * This function retrieves the text from a specific combobox item.
 * @see https://wiki.multitheftauto.com/wiki/GuiComboBoxGetItemText
 * @param comboBox The combobox containing the item youre interested in
 * @param itemId The index of the item
 * @return returns the text of the item if the arguments are right, false otherwise.
 * @noSelf
 */
export declare function guiComboBoxGetItemText(
    comboBox: Element,
    itemId: number,
): string;

/**
 * This function returns the index of the selected combobox item.
 * @see https://wiki.multitheftauto.com/wiki/GuiComboBoxGetSelected
 * @param comboBox the combobox you want to know the selected item index of
 * @return returns the index of the selected item if the specified combobox is valid and has a
 * selected item, -1 if no item is selected, nil otherwise.
 * @noSelf
 */
export declare function guiComboBoxGetSelected(comboBox: Element): number;

/**
 * @see https://wiki.multitheftauto.com/wiki/GuiComboBoxIsOpen
 * @param comboBox The combo box to get the state.
 * @return returns true if combobox is opened, false if combobox is closed, nil otherwise.
 * @noSelf
 */
export declare function guiComboBoxIsOpen(comboBox: Element): boolean;

/**
 * This function removes an item from a combobox.
 * @see https://wiki.multitheftauto.com/wiki/GuiComboBoxRemoveItem
 * @param comboBox The combobox containing the item youre interested in
 * @param itemId The index of the item to remove
 * @return returns true if the item was removes successfully, false otherwise.
 * @noSelf
 */
export declare function guiComboBoxRemoveItem(
    comboBox: Element,
    itemId: number,
): boolean;

/**
 * This function changes the text of a combobox item.
 * @see https://wiki.multitheftauto.com/wiki/GuiComboBoxSetItemText
 * @param comboBox The combobox containing the item youre interested in
 * @param itemId The index of the item
 * @param text The text you want to put in (does NOT accept numbers, use tostring() for that)
 * @return returns true if the text was set successfully, false otherwise.
 * @noSelf
 */
export declare function guiComboBoxSetItemText(
    comboBox: Element,
    itemId: number,
    text: string,
): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/GuiComboBoxSetOpen
 * @param comboBox The combobox to be opened or closed.
 * @param state The state of combobox. true, if the combobox is to be opened. false if the combobox is to
 * be closed.
 * @return returns true if is successful, false otherwise.
 * @noSelf
 */
export declare function guiComboBoxSetOpen(
    comboBox: Element,
    state: boolean,
): boolean;

/**
 * This function sets the selected item from a combobox.
 * @see https://wiki.multitheftauto.com/wiki/GuiComboBoxSetSelected
 * @param comboBox the combobox you want to select an item from
 * @param itemIndex the item you want to select (item 0 is the first item). If -1 is specified, then the
 * combo box text is set to its caption.
 * @return returns true if the selected item has been changed successfully, false otherwise.
 * @noSelf
 */
export declare function guiComboBoxSetSelected(
    comboBox: Element,
    itemIndex: number,
): boolean;

/**
 * This function creates a new CEGUI web Element/Browser|browser element.
 * <br>The difference between this and createBrowser is that this function handles inputs
 * internally, and it can be attached to GUI windows. So the createBrowser function is more
 * suitable for custom dx based interfaces, while this one is favorable for CEGUI all-in-all
 * integration.
 * You can learn more about the differences
 * https://forum.mtasa.com/topic/80422-dx-browser-vs-gui-browser/?do=findComment&comment=7373
 * 34 here.
 * @see https://wiki.multitheftauto.com/wiki/GuiCreateBrowser
 * @param x A float of the 2D x position of the browser on a players screen.  This is affected by the
 * relative argument.
 * @param y A float of the 2D y position of the browser on a players screen. This is affected by the
 * relative argument.
 * @param width The browsers native width. This should be greater than or equal to 1.
 * @param height The browsers native height. This should be greater than or equal to 1.
 * @param isLocal Sets whether the browser can only show local content or content from the internet (see
 * examples over CreateBrowser|here for more information)
 * @param isTransparent true if you want the browser to support transparency, false otherwise
 * @param isRelative This is whether sizes and positioning are relative.  If this is true, then all
 * x,y,width,height floats must be between 0 and 1, representing sizes/positions as a
 * fraction of the screen size. If false, then the size and co-ordinates are based on
 * clients resolution, accessible using guiGetScreenSize.
 * @param parent This is the parent that the radio button is attached to. If the relative argument is
 * true, sizes and positioning will be made relative to this parent. If the relative
 * argument is false, positioning will be the number of offset pixels from the parents
 * origin. If no parent is passed, the parent will become the screen - causing positioning
 * and sizing according to screen positioning.
 * @return returns a gui-browser element if it was created successfully, false otherwise. returns
 * also false, if the user disabled remote pages and islocal was set to false.
 * @noSelf
 */
export declare function guiCreateBrowser(
    x: number,
    y: number,
    width: number,
    height: number,
    isLocal: boolean,
    isTransparent: boolean,
    isRelative: boolean,
    parent?: Element,
): GuiBrowser;

/**
 * This function allows creation of a GUI Button, which is a clickable item as part of GUI.
 * @see https://wiki.multitheftauto.com/wiki/GuiCreateButton
 * @param x A float of the 2D x position of the GUI button on a players screen.  This is affected by
 * the relative argument.
 * @param y A float of the 2D y position of the GUI button on a players screen. This is affected by
 * the relative argument.
 * @param width A float of the width of the GUI button. This is affected by the relative argument.
 * @param height A float of the height of the GUI button. This is affected by the relative argument.
 * @param text A string of the text that will be displayed as a label on the button.
 * @param relative This is whether sizes and positioning are relative.  If this is true, then all x, y,
 * width and height floats must be between 0 and 1, representing sizes relative to the
 * parent.
 * @param parent This is the parent that the gui button is attached to.  If the relative argument is true,
 * sizes and positioning will be made relative to this parent. If the relative argument is
 * false, positioning will be the number of offset pixels from the parents origin. If no
 * parent is passed, the parent will become the screen - causing positioning and sizing
 * according to screen positioning.
 * @return returns an element of the created element/gui/button|button if it was successfully
 * created, false otherwise.
 * @noSelf
 */
export declare function guiCreateButton(
    x: number,
    y: number,
    width: number,
    height: number,
    text: string,
    relative: boolean,
    parent?: Element,
): Element;

/**
 * This function creates a Element/GUI/Checkbox|checkbox.
 * @see https://wiki.multitheftauto.com/wiki/GuiCreateCheckBox
 * @param x A float of the 2D x position of the checkbox on a players screen. This is affected by the
 * relative argument.
 * @param y A float of the 2D y position of the checkbox on a players screen. This is affected by the
 * relative argument.
 * @param width A float of the width of the text field next to the checkbox. This is affected by the
 * relative argument.
 * @param height A float of the height of the text field next to the checkbox. This is affected by the
 * relative argument.
 * @param text The text to be displayed next to the checkbox.
 * @param selected A boolean representing whether the checkbox created should be selected by default.
 * @param relative This is whether sizes and positioning are relative. If this is true, then all
 * x,y,width,height floats must be between 0 and 1, representing measures relative to the
 * parent.
 * @param parent This is the parent that the checkbox is attached to. If the relative argument is true,
 * sizes and positioning will be made relative to this parent. If the relative argument is
 * false, positioning will be the number of offset pixels from the parents origin. If no
 * parent is passed, the parent will become the screen - causing positioning and sizing
 * according to screen positioning.
 * @return returns element of the checkbox if it was created succesfully, false otherwise.
 * @noSelf
 */
export declare function guiCreateCheckBox(
    x: number,
    y: number,
    width: number,
    height: number,
    text: string,
    selected: boolean,
    relative: boolean,
    parent?: Element,
): Element;

/**
 * This function creates a combobox GUI element, which you can compare to a gridlist with a
 * dropdown feature.
 * @see https://wiki.multitheftauto.com/wiki/GuiCreateComboBox
 * @param x A float of the 2D x position of the GUI combobox on a players screen.  This is affected
 * by the relative argument.
 * @param y A float of the 2D y position of the GUI combobox on a players screen. This is affected by
 * the relative argument.
 * @param width A float of the width of the GUI combobox. This is affected by the relative argument.
 * @param height A float of the height of the GUI combobox. This is affected by the relative argument.
 * Note: height must be enough to fit the drop down menu, else the drop down wont appear.
 * @param caption A string for what the title of your combobox will be. This will be shown if no item is
 * selected.
 * @param relative This is whether sizes and positioning are relative.  If this is true, then all
 * x,y,width,height floats must be between 0 and 1, representing sizes relative to the
 * parent.
 * @param parent This is the parent that the GUI combobox is attached to.  If the relative argument is
 * true, sizes and positioning will be made relative to this parent. If the relative
 * argument is false, positioning will be the number of offset pixels from the parents
 * origin. If no parent is passed, the parent will become the screen - causing positioning
 * and sizing according to screen positioning.
 * @return returns an element of the created combobox if it was successfully created, false
 * otherwise.
 * @noSelf
 */
export declare function guiCreateComboBox(
    x: number,
    y: number,
    width: number,
    height: number,
    caption: string,
    relative: boolean,
    parent?: Element,
): Element;

/**
 * This function is for creating a new GUI edit box. This is a text box in which the user
 * can input text. Edit boxes only allow a single line of text. If you want to allow
 * multiple lines of text create a memo box using guiCreateMemo.
 * @see https://wiki.multitheftauto.com/wiki/GuiCreateEdit
 * @param x A float of the 2D x position of the GUI edit box on a players screen.  This is affected
 * by the relative argument.
 * @param y A float of the 2D y position of the GUI edit box on a players screen. This is affected by
 * the relative argument.
 * @param width A float of the width of the GUI edit box. This is affected by the relative argument.
 * @param height A float of the height of the GUI edit box. This is affected by the relative argument.
 * @param text A string of the text that will be displayed by default in the edit box.
 * @param relative This is whether sizes and positioning are relative.  If this is true, then all
 * x,y,width,height floats must be between 0 and 1, representing measures relative to the
 * parent.
 * @param parent This is the parent that the GUI edit box is attached to.  If the relative argument is
 * true, sizes and positioning will be made relative to this parent. If the relative
 * argument is false, positioning will be the number of offset pixels from the parents
 * origin. If no parent is passed, the parent will become the screen - causing positioning
 * and sizing according to screen positioning.
 * @return returns a gui-edit element of the created edit box if it was successfully created, false
 * otherwise.
 * @noSelf
 */
export declare function guiCreateEdit(
    x: number,
    y: number,
    width: number,
    height: number,
    text: string,
    relative: boolean,
    parent?: Element,
): Element;

/**
 * This function creates a GUI font element that can be used in guiSetFont. Successful font
 * creation is not guaranteed, and may fail due to hardware or memory limitations.
 * To see if creation is likely to fail, use dxGetStatus. (When VideoMemoryFreeForMTA is
 * zero, failure is guaranteed.)
 * @see https://wiki.multitheftauto.com/wiki/GuiCreateFont
 * @param filepath the name of the file containing the font
 * @param size size of the font
 * @return returns a gui font element if successful, false if invalid arguments were passed to the
 * function, or there is insufficient resources available.
 * you should always check to see if this function has returned false.
 * @noSelf
 */
export declare function guiCreateFont(filepath: string, size?: number): Element;

/**
 * This function creates a grid list GUI element.  These are menus which are designed in
 * lists and can have multiple columns.  A good example of a gridlist element can be found
 * in MTAs settings box, under Controls.
 * @see https://wiki.multitheftauto.com/wiki/GuiCreateGridList
 * @param x A float of the 2D x position of the GUI gridlist on a players screen.  This is affected
 * by the relative argument.
 * @param y A float of the 2D y position of the GUI gridlist on a players screen. This is affected by
 * the relative argument.
 * @param width A float of the width of the GUI gridlist. This is affected by the relative argument.
 * @param height A float of the height of the GUI gridlist. This is affected by the relative argument.
 * @param relative This is whether sizes and positioning are relative.  If this is true, then all
 * x,y,width,height floats must be between 0 and 1, representing sizes relative to the
 * parent.
 * @param parent This is the parent that the gui gridlist is attached to.  If the relative argument is
 * true, sizes and positioning will be made relative to this parent. If the relative
 * argument is false, positioning will be the number of offset pixels from the parents
 * origin. If no parent is passed, the parent will become the screen - causing positioning
 * and sizing according to screen positioning.
 * @return returns an element of the created gridlist if it was successfully created, false
 * otherwise.
 * @noSelf
 */
export declare function guiCreateGridList(
    x: number,
    y: number,
    width: number,
    height: number,
    relative: boolean,
    parent?: Element,
): Element;

/**
 * <table><tr><td valign=top height=100>
 * This function is for creating a new GUI label.  A label is simply a piece of text that
 * cannot be edited by the user. If you would like to have a bigger text youd have to change
 * its font because font size is not supported.
 * </td></tr></table>
 * @see https://wiki.multitheftauto.com/wiki/GuiCreateLabel
 * @param x A float of the 2D x position of the GUI label on a players screen.  This is affected by
 * the relative argument.
 * @param y A float of the 2D y position of the GUI label on a players screen. This is affected by
 * the relative argument.
 * @param width A float of the width of the GUI label. This is affected by the relative argument.
 * @param height A float of the height of the GUI label. This is affected by the relative argument.
 * @param text A string of the text that will be displayed by the label.
 * @param relative This is whether sizes and positioning are relative.  If this is true, then all
 * x,y,width,height floats must be between 0 and 1, representing sizes relative to the
 * parent.
 * @param parent This is the parent that the gui label is attached to.  If the relative argument is true,
 * sizes and positioning will be made relative to this parent. If the relative argument is
 * false, positioning will be the number of offset pixels from the parents origin. If no
 * parent is passed, the parent will become the screen - causing positioning and sizing
 * according to screen positioning.
 * @return returns an gui_widgets|element of the created label if it was successfully created, false
 * otherwise.
 * @noSelf
 */
export declare function guiCreateLabel(
    x: number,
    y: number,
    width: number,
    height: number,
    text: string,
    relative: boolean,
    parent?: Element,
): Element;

/**
 * This function creates a new GUI memo.  This is a multiline edit box in which the user can
 * input text.
 * @see https://wiki.multitheftauto.com/wiki/GuiCreateMemo
 * @param x A float of the 2D x position of the GUI memo on a players screen.  This is affected by
 * the relative argument.
 * @param y A float of the 2D y position of the GUI memo on a players screen. This is affected by the
 * relative argument.
 * @param width A float of the width of the GUI memo. This is affected by the relative argument.
 * @param height A float of the height of the GUI memo. This is affected by the relative argument.
 * @param text A string of the text that will be displayed by default in the memo.
 * @param relative This is whether sizes and positioning are relative.  If this is true, then all
 * x,y,width,height floats must be between 0 and 1, representing measures relative to the
 * parent.
 * @param parent This is the parent that the GUI memo is attached to.  If the relative argument is true,
 * sizes and positioning will be made relative to this parent. If the relative argument is
 * false, positioning will be the number of offset pixels from the parents origin. If no
 * parent is passed, the parent will become the screen - causing positioning and sizing
 * according to screen positioning.
 * @return returns a gui-memo element of the created memo if it was successfully created, false
 * otherwise.
 * @noSelf
 */
export declare function guiCreateMemo(
    x: number,
    y: number,
    width: number,
    height: number,
    text: string,
    relative: boolean,
    parent?: Element,
): GuiMemo;

/**
 * This function creates a Element/GUI/Progress bar|progress bar.
 * @see https://wiki.multitheftauto.com/wiki/GuiCreateProgressBar
 * @param x A float of the 2D x position of the progress bar on a players screen. This is affected by
 * the relative argument.
 * @param y A float of the 2D y position of the progress bar on a players screen. This is affected by
 * the relative argument.
 * @param width A float of the width of the progress bar. This is affected by the relative argument.
 * @param height A float of the height of the progress bar. This is affected by the relative argument.
 * @param relative This is whether sizes and positioning are relative. If this is true, then all
 * x,y,width,height floats must be between 0 and 1, representing measures relative to the
 * parent.
 * @param parent This is the parent that the progress bar is attached to. If the relative argument is
 * true, sizes and positioning will be made relative to this parent. If the relative
 * argument is false, positioning will be the number of offset pixels from the parents
 * origin. If no parent is passed, the parent will become the screen - causing positioning
 * and sizing according to screen positioning.
 * @return returns element of the progress bar if it was created succesfully, false otherwise.
 * @noSelf
 */
export declare function guiCreateProgressBar(
    x: number,
    y: number,
    width: number,
    height: number,
    relative: boolean,
    parent?: Element,
): Element;

/**
 * This function creates a Element/GUI/Radio button|radio button.
 * @see https://wiki.multitheftauto.com/wiki/GuiCreateRadioButton
 * @param x A float of the 2D x position of the radio button on a players screen. This is affected by
 * the relative argument.
 * @param y A float of the 2D y position of the radio button on a players screen. This is affected by
 * the relative argument.
 * @param width A float of the width of the text field next to the radio button. This is affected by the
 * relative argument.
 * @param height A float of the height of the text field next to the radio button. This is affected by the
 * relative argument.
 * @param text The text to be displayed next to the radio button.
 * @param relative This is whether sizes and positioning are relative. If this is true, then all
 * x,y,width,height floats must be between 0 and 1, representing measures relative to the
 * parent.
 * @param parent This is the parent that the radio button is attached to. If the relative argument is
 * true, sizes and positioning will be made relative to this parent. If the relative
 * argument is false, positioning will be the number of offset pixels from the parents
 * origin. If no parent is passed, the parent will become the screen - causing positioning
 * and sizing according to screen positioning.
 * ''NOTE:'' All radio buttons become grouped together with their parent item.  Only ONE
 * radio button per group/parent will be able to be selected at the same time.
 * @return returns element of the radio button if it was created succesfully, false otherwise.
 * @noSelf
 */
export declare function guiCreateRadioButton(
    x: number,
    y: number,
    width: number,
    height: number,
    text: string,
    relative: boolean,
    parent?: Element,
): Element;

/**
 * This function creates a GUI scrollbar. You can use the functions
 * guiScrollPaneSetHorizontalScrollPosition, guiScrollPaneSetVerticalScrollPosition,
 * guiScrollPaneGetHorizontalScrollPosition and guiScrollPaneGetVerticalScrollPosition to
 * read and modify the scrollbars scroll.
 * @see https://wiki.multitheftauto.com/wiki/GuiCreateScrollBar
 * @param x the 2D x offset of the GUI scrollbar from its parent.  This is affected by the relative
 * argument.
 * @param y the 2D y offset of the GUI scrollbar from its parent. This is affected by the relative
 * argument.
 * @param width the width of the GUI scrollbar. This is affected by the relative argument.
 * @param height the height of the GUI scrollbar. This is affected by the relative argument.
 * @param horizontal whether this scrollbar is horizontal (true) or vertical (false).
 * @param relative whether sizes and positions are relative to their parents.  If this is true, then all
 * measures must be between 0 and 1, representing sizes/positions as a fraction of the
 * parent widgets size.
 * @param parent the gui-element this scrollbar is attached to. By default, it is nil, meaning the widget
 * is attached to the background.
 * @return returns a gui-scrollbar if it was created successfully, false otherwise.
 * @noSelf
 */
export declare function guiCreateScrollBar(
    x: number,
    y: number,
    width: number,
    height: number,
    horizontal: boolean,
    relative: boolean,
    parent?: GuiElement,
): GuiScrollBar;

/**
 * This creates a GUI scroll pane.
 * @see https://wiki.multitheftauto.com/wiki/GuiCreateScrollPane
 * @param x the 2D x offset of the GUI scrollpane from its parent. This is affected by the relative
 * argument.
 * @param y the 2D y offset of the GUI scrollpane from its parent. This is affected by the relative
 * argument.
 * @param width the width of the GUI scrollpane. This is affected by the relative argument.
 * @param height the height of the GUI scrollpane. This is affected by the relative argument.
 * @param relative whether sizes and positions are relative to their parents. If this is true, then all
 * measures must be between 0 and 1, representing sizes/positions as a fraction of the
 * parent widgets size.
 * @param parent the gui-element this scrollpane is attached to. By default, it is nil, meaning the widget
 * is attached to the background.
 * @return the gui-element if created, otherwise false.
 * @noSelf
 */
export declare function guiCreateScrollPane(
    x: number,
    y: number,
    width: number,
    height: number,
    relative: boolean,
    parent?: GuiElement,
): Element;

/**
 * This function creates a static image using a .png image in the resource.
 * @see https://wiki.multitheftauto.com/wiki/GuiCreateStaticImage
 * @param x A float of the 2D x position of the image on a players screen. This is affected by the
 * relative argument.
 * @param y A float of the 2D y position of the image on a players screen. This is affected by the
 * relative argument.
 * @param width A float of the width of the image. This is affected by the relative argument.
 * @param height A float of the height of the image. This is affected by the relative argument.
 * @param path The filepath of the image file that is being loaded.
 * @param relative This is whether sizes and positioning are relative. If this is true, then all
 * x,y,width,height floats must be between 0 and 1, representing measures relative to the
 * parent.
 * @param parent This is the parent that the image is attached to. If the relative argument is true, sizes
 * and positioning will be made relative to this parent. If the relative argument is false,
 * positioning will be the number of offset pixels from the parents origin. If no parent is
 * passed, the parent will become the screen - causing positioning and sizing according to
 * screen positioning.
 * @return returns element if image was created successfully, false otherwise.
 * @noSelf
 */
export declare function guiCreateStaticImage(
    x: number,
    y: number,
    width: number,
    height: number,
    path: string,
    relative: boolean,
    parent?: Element,
): Element;

/**
 * This function creates a tab on a pre-existing tab panel. A tab is a button as well as a
 * dimension that can be used to switch between information by clicking on the tabs.  Tabs
 * are sorted on a tab panel in the order that they are created.
 * @see https://wiki.multitheftauto.com/wiki/GuiCreateTab
 * @param text The caption for the tab
 * @param parent The parent tab panel, as a tab panel element type
 * @return returns a tab element if successful, false otherwise.
 * @noSelf
 */
export declare function guiCreateTab(text: string, parent: Element): Element;

/**
 * This function creates a Tab Panel, which acts as a template to create Tabs upon.
 * @see https://wiki.multitheftauto.com/wiki/GuiCreateTabPanel
 * @param x A float of the 2D x position of the GUI tab panel on a players screen.  This is affected
 * by the relative argument.
 * @param y A float of the 2D y position of the GUI tab panel on a players screen. This is affected
 * by the relative argument.
 * @param width A float of the width of the GUI tab panel. This is affected by the relative argument.
 * @param height A float of the height of the GUI tab panel. This is affected by the relative argument.
 * @param relative This is whether sizes and positioning are relative.  If this is true, then all
 * x,y,width,height floats must be between 0 and 1, representing sizes relative to the
 * parent.
 * @param parent This is the parent that the tab panel is attached to.  If the relative argument is true,
 * sizes and positioning will be made relative to this parent. If the relative argument is
 * false, positioning will be the number of offset pixels from the parents origin. If no
 * parent is passed, the parent will become the screen - causing positioning and sizing
 * according to screen positioning.
 * @return returns a gui tab panel element if successful, false otherwise.
 * @noSelf
 */
export declare function guiCreateTabPanel(
    x: number,
    y: number,
    width: number,
    height: number,
    relative: boolean,
    parent?: Element,
): Element;

/**
 * This function is for creating a new GUI window.  This provides a base for other gui
 * elements to be created within.  However, windows do not have a parent and cannot be
 * created in any GUI elements.
 * @see https://wiki.multitheftauto.com/wiki/GuiCreateWindow
 * @param x A float of the 2D x position of the GUI window on a players screen.  This is affected by
 * the relative argument.
 * @param y A float of the 2D y position of the GUI window on a players screen. This is affected by
 * the relative argument.
 * @param width A float of the width of the GUI window. This is affected by the relative argument.
 * @param height A float of the height of the GUI window. This is affected by the relative argument.
 * @param titleBarText A string of the text that will be displayed in the title bar of the window.
 * @param relative This is whether sizes and positioning are relative.  If this is true, then all
 * x,y,width,height floats must be between 0 and 1, representing sizes/positions as a
 * fraction of the screen size. If false, then the size and co-ordinates are based on
 * clients resolution, accessible using guiGetScreenSize.
 * @return returns a gui window element if it was created successfully, false otherwise.
 * @noSelf
 */
export declare function guiCreateWindow(
    x: number,
    y: number,
    width: number,
    height: number,
    titleBarText: string,
    relative: boolean,
): Element;

/**
 * This function deletes a tab from a tab panel.
 * @see https://wiki.multitheftauto.com/wiki/GuiDeleteTab
 * @param tabToDelete This is an element representing the tab that you want to delete.
 * @param tabPanel This is the guiCreateTabPanel|tab panel parent that the tab is attached to.
 * @return returns true the tab was successfully deleted, false otherwise.
 * @noSelf
 */
export declare function guiDeleteTab(
    tabToDelete: Element,
    tabPanel: Element,
): boolean;

/**
 * This function returns the caret (the text cursor) position within the editbox.
 * @see https://wiki.multitheftauto.com/wiki/GuiEditGetCaretIndex
 * @param theElement The edit box you want to get the caret position from
 * @return returns the caret index on success, false otherwise.
 * @noSelf
 */
export declare function guiEditGetCaretIndex(theElement: Element): number;

/**
 * @see https://wiki.multitheftauto.com/wiki/GuiEditGetMaxLength
 * @param guiEdit The edit box you want to get the maximum text length of.
 * @return returns the maximum text length on success, false otherwise.
 * @noSelf
 */
export declare function guiEditGetMaxLength(guiEdit: GuiEdit): number;

/**
 * @see https://wiki.multitheftauto.com/wiki/GuiEditIsMasked
 * @param guiEdit the edit box to check masked flag of.
 * @return returns true if the edit box is masked, false if not, nil if an invalid edit box was
 * provided.
 * @noSelf
 */
export declare function guiEditIsMasked(guiEdit: GuiEdit): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/GuiEditIsReadOnly
 * @param guiEdit The edit box to check read-only status of.
 * @return returns true if the edit box is read-only, false if not, nil if an invalid edit box was
 * provided.
 * @noSelf
 */
export declare function guiEditIsReadOnly(guiEdit: GuiEdit): boolean;

/**
 * This function sets the current position of the caret (the text cursor) within the edit
 * box.
 * @see https://wiki.multitheftauto.com/wiki/GuiEditSetCaretIndex
 * @param theElement The edit box to be changed.
 * @param index An integer referring to the desired position within the box.
 * @return returns true if the index was successfully set, false otherwise.
 * @noSelf
 */
export declare function guiEditSetCaretIndex(
    theElement: Element,
    index: number,
): boolean;

/**
 * This function sets or removes masking (covering up the text being typed) for password
 * text fields.
 * @see https://wiki.multitheftauto.com/wiki/GuiEditSetMasked
 * @param theElement The edit box to be changed.
 * @param status A boolean value indicating whether masking is to be enabled or disabled.
 * @return returns true if the function is successful, false otherwise.
 * @noSelf
 */
export declare function guiEditSetMasked(
    theElement: Element,
    status: boolean,
): boolean;

/**
 * This function sets the maximum text length that can be typed into an edit box.
 * @see https://wiki.multitheftauto.com/wiki/GuiEditSetMaxLength
 * @param theElement The edit box to be changed.
 * @param length An integer indicating the maximum number of characters that can be typed into the box.
 * @return returns true if the max length was set successfully, false otherwise.
 * @noSelf
 */
export declare function guiEditSetMaxLength(
    guiEdit: Element,
    length: number,
): boolean;

/**
 * This function allows you to set or remove read-only status for an edit box. If read-only
 * is set to true, the box is not editable.
 * @see https://wiki.multitheftauto.com/wiki/GuiEditSetReadOnly
 * @param editField The element of the Element/GUI/Edit field|edit field to be modified.
 * @param status A boolean value indicating whether read-only is to be enabled or disabled.
 * @return returns true if edit fields read-only status was changed successfully, false otherwise.
 * @noSelf
 */
export declare function guiEditSetReadOnly(
    editField: Element,
    status: boolean,
): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/GuiFocus
 * @param guiElement the GUI element that you want to focus
 * @return returns true if the function was successful, false otherwise.
 * @noSelf
 */
export declare function guiFocus(guiElement: Element): boolean;

/**
 * Alpha represents the transparency of a gui element.  This function allows retrieval of a
 * gui elements current alpha.
 * @see https://wiki.multitheftauto.com/wiki/GuiGetAlpha
 * @param guiElement The gui element in which you want to retrieve the alpha of.
 * @return this function returns a positive integer in between 0 and 1 of the gui elements current
 * alpha, or false if it could not be retrieved.
 * @noSelf
 */
export declare function guiGetAlpha(guiElement: Element): number;

/**
 * This function gets the browser element behind a gui-browser (a browser that has been
 * created via guiCreateBrowser).
 * @see https://wiki.multitheftauto.com/wiki/GuiGetBrowser
 * @param theBrowser The gui-browser
 * @return returns the element/browser|browser element if a correct element/gui-browser|gui-browser
 * has been passed, false otherwise.
 * @noSelf
 */
export declare function guiGetBrowser(theBrowser: GuiBrowser): Browser;

/**
 * This function is used to get the type of the current cursor image.
 * @see https://wiki.multitheftauto.com/wiki/GuiGetCursorType
 * @return returns a string containing the cursor type:
 * * none            // cursor has no image
 * * arrow           // default cursor
 * * sizing_ns       // n-s (up-down) sizing cursor
 * * sizing_ew       // e-w (left-right) sizing cursor
 * * sizing_nwse     // nw-se diagonal sizing cursor
 * * sizing_nesw     // ne-sw diagonal sizing cursor
 * * sizing_eswe     // es-we horizontal sizing cursor
 * * move            // move cursor
 * * container_drag  // drag container cursor (note: not in use)
 * * segment_moving  // segment moving cursor (note: not in use)
 * * segment_sizing  // segment sizing cursor (note: not in use)
 * @noSelf
 */
export declare function guiGetCursorType(): string;

/**
 * This function determines if a GUI element is enabled.
 * @see https://wiki.multitheftauto.com/wiki/GuiGetEnabled
 * @param guiElement the GUI element to be checked.
 * @return returns true if the element is enabled, false otherwise.
 * @noSelf
 */
export declare function guiGetEnabled(guiElement: Element): boolean;

/**
 * This function is used to get the current font that is used to draw text in GUI elements.
 * @see https://wiki.multitheftauto.com/wiki/GuiGetFont
 * @param guiElement element you wish to get the font of.
 * @return *string a string containing the name of the elements current font, or false if the gui
 * element passed to the function is invalid.
 * *element  the custom gui font that is used, or nil otherwise
 * @noSelf
 */
export declare function guiGetFont(
    guiElement: Element,
): LuaMultiReturn<[string, Element]>;

/**
 * This function checks whether user input is focused on the GUI or the game.
 * @see https://wiki.multitheftauto.com/wiki/GuiGetInputEnabled
 * @return returns true if input is focused on gui, false if its focused on the game.
 * @noSelf
 */
export declare function guiGetInputEnabled(): boolean;

/**
 * This function returns the current input mode as set by guiSetInputMode.
 * Default mode is allow_binds.
 * @see https://wiki.multitheftauto.com/wiki/GuiGetInputMode
 * @return returns a string defining the current input mode, potential values are:
 * * allow_binds: binds are enabled, hence using a key such as t in an editbox will still
 * activate the chatbox
 * * no_binds: binds are disabled, hence using a key such as t in an editbox will not
 * activate the chatbox
 * * no_binds_when_editing: binds are always enabled except when an editable editbox or memo
 * has input focus
 * @noSelf
 */
export declare function guiGetInputMode(): string;

/**
 * This function allows retrieval of a GUI elements current position, relative to its parent.
 * @see https://wiki.multitheftauto.com/wiki/GuiGetPosition
 * @param guiElement The gui element of which you wish to retrieve the position.
 * @param relative A boolean representing whether the position should be relative to the elements parent
 * width, or the number of offset pixels from the parents origin.
 * @return returns floats representing the x and y position of the element, or false if the position
 * could not be retrieved.
 * @noSelf
 */
export declare function guiGetPosition(
    guiElement: Element,
    relative: boolean,
): LuaMultiReturn<[number, number]>;

/**
 * This function gets a list of the CEGUI property names and values of a GUI element. To
 * find out what the different properties mean, check out the
 * http://static.cegui.org.uk/static/WindowsLookProperties.html CEGUI properties page.
 * @see https://wiki.multitheftauto.com/wiki/GuiGetProperties
 * @param guiElement the GUI element you wish to get the properties of.
 * @return if the function succeeds, the return value is a table. its keys are property names, the
 * corresponding values are the values of the properties (both names and values are always
 * strings). if the function fails, it returns false.
 * @noSelf
 */
export declare function guiGetProperties(guiElement: Element): LuaTable;

/**
 * This function gets the value of a specific CEGUI property of a GUI element. For a list of
 * properties and their meaning, see the
 * http://static.cegui.org.uk/static/WindowsLookProperties.html CEGUI properties page.
 * @see https://wiki.multitheftauto.com/wiki/GuiGetProperty
 * @param guiElement the GUI element you wish to get a property of.
 * @param property the name of of property you want the value of.
 * @return if the function succeeds, it returns a string with the value of the property. if it
 * fails, it returns false.
 * @noSelf
 */
export declare function guiGetProperty(
    guiElement: Element,
    property: string,
): string;

/**
 * This function retrieves the local screen size according to the resolution they are using.
 * @see https://wiki.multitheftauto.com/wiki/GuiGetScreenSize
 * @return this returns two floats representing the players screen resolution, width and height.
 * @noSelf
 */
export declare function guiGetScreenSize(): LuaMultiReturn<[number, number]>;

/**
 * This function returns the currently selected tab in the specified Element/GUI/Tab
 * panel|tab panel.
 * @see https://wiki.multitheftauto.com/wiki/GuiGetSelectedTab
 * @param tabPanel The Element/GUI/Tab panel|tab panel which current tab you want to retrieve.
 * @return returns an element of the element/gui/tab|tab if a tab was selected or nil if no tab was
 * selected. if passed arguments were invalid or something went wrong, the function will
 * return false.
 * @noSelf
 */
export declare function guiGetSelectedTab(tabPanel: Element): Element;

/**
 * This function gets the size of a GUI element.
 * @see https://wiki.multitheftauto.com/wiki/GuiGetSize
 * @param theElement The GUI element to get size of.
 * @param relative A boolean representing whether the size should be relative to the elements parent width,
 * or an absolute size in pixels.
 * @return returns the gui element size x and y if the function has been successful, false otherwise.
 * @noSelf
 */
export declare function guiGetSize(
    theElement: Element,
    relative: boolean,
): LuaMultiReturn<[number, number]>;

/**
 * This function is used to get the text of GUI elements like edit boxes, labels, buttons
 * etc.
 * @see https://wiki.multitheftauto.com/wiki/GuiGetText
 * @param guiElement element you wish to get text of.
 * @return returns a string containing the requested elements text, or false if the gui element
 * passed to the function is invalid.
 * @noSelf
 */
export declare function guiGetText(guiElement: Element): string;

/**
 * This function determines if a GUI element is visible.
 * @see https://wiki.multitheftauto.com/wiki/GuiGetVisible
 * @param guiElement the GUI element to be checked
 * @return returns true if the element is visible, false otherwise.
 * @noSelf
 */
export declare function guiGetVisible(guiElement: Element): boolean;

/**
 * This function is used to create columns in grid lists.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListAddColumn
 * @param gridList The grid list you want to add a column to
 * @param title Title of the column
 * @param width Column width, relative to the grid list width
 * @return returns the column id if it was created, false otherwise.
 * @noSelf
 */
export declare function guiGridListAddColumn(
    gridList: Element,
    title: string,
    width: number,
): number;

/**
 * Adds a row to a grid list, and optionally add simple text items with your rows.  Use
 * guiGridListSetItemText to add row headers.
 * ATTENTION: Without guiGridListSetItemText there is no row added to the grid.
 * Look at the example, first you give the row a name with row = guiGridListAddRow (
 * playerList ), and then you use guiGridListSetItemText. }}
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListAddRow
 * @param gridList The grid list you want to add a row to
 * @param itemText1 The text for the first column item in the row.  Either a string or a number can be passed
 * (use numbers for sorting purposes).
 * @param itemText2 The text for the second column item in the row.  Either a string or a number can be
 * passed (use numbers for sorting purposes).
 * @param ... Item text for any other columns
 * @return returns the row id if it has been created, false otherwise.
 * @noSelf
 */
export declare function guiGridListAddRow(
    gridList: Element,
    itemText1?: number | string,
    itemText2?: number | string,
    ...varargs: any[]
): number;

/**
 * This allows you to automatically size a column to display everything in it correctly,
 * with the most minimal width.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListAutoSizeColumn
 * @param gridList The Element/GUI/Gridlist|grid list element where the column is located.
 * @param columnIndex The ID of the column you want to be auto-sized.
 * @return returns true if the column was auto-sized, false otherwise.
 * @noSelf
 */
export declare function guiGridListAutoSizeColumn(
    gridList: Element,
    columnIndex: number,
): boolean;

/**
 * This function clears all the data from a grid list.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListClear
 * @param gridList The grid list element to be cleared
 * @return returns true if the grid list element is valid and has been cleared successfully, false
 * otherwise.
 * @noSelf
 */
export declare function guiGridListClear(gridList: Element): boolean;

/**
 * This allows you to get the count of existing columns in a gridlist.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListGetColumnCount
 * @param gridList The grid list you want to add a column to
 * @return returns an integer with the amount of columns in the gridlist, false otherwise.
 * <syntaxhighlight lang=lua>
 * -- create the grid list
 * local list = guicreategridlist(0.80, 0.40, 0.15, 0.35, true)
 * -- add three columns to the grid list
 * guigridlistaddcolumn(list, column 1, 0.33)
 * guigridlistaddcolumn(list, column 2, 0.33)
 * guigridlistaddcolumn(list, column 3, 0.33)
 * -- display the number of columns in the grid list in the debug or server console
 * (/debugscript 3)
 * print(number of columns:  .. guigridlistgetcolumncount(list))
 * </syntaxhighlight>
 * @noSelf
 */
export declare function guiGridListGetColumnCount(gridList: Element): number;

/**
 * This function is used to get the column title of a gridlist column.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListGetColumnTitle
 * @param guiGridlist : The grid list you want to get the column title from
 * @param columnIndex : Column ID
 * @return returns a string containing the column title, or false otherwise.
 * @noSelf
 */
export declare function guiGridListGetColumnTitle(
    guiGridlist: Element,
    columnIndex: number,
): string;

/**
 * This allows you to get the width of an existing column in a gridlist.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListGetColumnWidth
 * @param gridList The grid list you want to add a column to
 * @param columnIndex Column ID of the Get size
 * @param relative A boolean defining whether width measurements will be relative to the Gridlist size, or
 * absolute pixels.
 * @return returns the width of the gridlist column, false if bad arguments were given.
 * @noSelf
 */
export declare function guiGridListGetColumnWidth(
    gridList: Element,
    columnIndex: number,
    relative: boolean,
): number;

/**
 * This function is used to get the horizontal scroll position from a grid list
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListGetHorizontalScrollPosition
 * @param guiGridlist : The grid list you want to get the horizontal scroll position from
 * @return returns a integer between 0 and 100 indicating the horizontal scroll position, or false
 * otherwise.
 * @noSelf
 */
export declare function guiGridListGetHorizontalScrollPosition(
    guiGridlist: Element,
): number;

/**
 * This function gets the color of a gridlist item.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListGetItemColor
 * @param gridList The grid list element
 * @param rowIndex Row ID
 * @param columnIndex Column ID
 * @return returns four int values, representing the amount of red, green, blue and alpha if
 * successful. false otherwise.
 * @noSelf
 */
export declare function guiGridListGetItemColor(
    gridList: Element,
    rowIndex: number,
    columnIndex: number,
): LuaMultiReturn<[number, number, number, number]>;

/**
 * With this function you can retrieve the string data associated with an item in a
 * Element/GUI/Gridlist|grid list. This is not the text that is displayed on the item, but
 * an internal string that you can use to hold extra information about the item.<br/>
 * Note: This function will only work after you set the items text using
 * guiGridListSetItemText!
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListGetItemData
 * @param gridList the grid list containing the item youre interested in
 * @param rowIndex the row index of the item
 * @param columnIndex the column index of the item
 * @return returns the item data of the specified item if succesful, false if one of the arguments
 * was invalid.
 * @noSelf
 */
export declare function guiGridListGetItemData(
    gridList: Element,
    rowIndex: number,
    columnIndex: number,
): unknown;

/**
 * This function retrieves the text from a specific grid list item.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListGetItemText
 * @param gridList the gridlist containing the item youre interested in
 * @param rowIndex row id of the item (first is 0)
 * @param columnIndex column id of the item (first is 0)
 * @return returns the text of the item if the arguments are right, false otherwise.
 * @noSelf
 */
export declare function guiGridListGetItemText(
    gridList: Element,
    rowIndex: number,
    columnIndex: number,
): string;

/**
 * This function returns the number of rows in a grid list.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListGetRowCount
 * @param gridList The grid list to get the number of rows from.
 * @return returns the number of rows if the function is successful, false otherwise.
 * @noSelf
 */
export declare function guiGridListGetRowCount(gridList: Element): number;

/**
 * This function returns the amount of options selected in the specified
 * Element/GUI/Gridlist|grid list.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListGetSelectedCount
 * @param gridList The Element/GUI/Gridlist|grid list which amount of selected items you want to retrieve.
 * @return returns an integer representing the amount of selected options if everything was
 * successful or false if invalid arguments were passed.
 * @noSelf
 */
export declare function guiGridListGetSelectedCount(gridList: Element): number;

/**
 * This function returns the row and column indexes of the selected item in a grid list.
 * First selected row and column is (0, 0).
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListGetSelectedItem
 * @param gridList the grid list you want to know the selected row index of
 * @return returns the row and column indexes of the selected item if the specified grid list is
 * valid and has a selected item, (-1, -1) if no item is selected, false otherwise.
 * @noSelf
 */
export declare function guiGridListGetSelectedItem(
    gridList: Element,
): LuaMultiReturn<[number, number]>;

/**
 * This function returns the items selected in the specified Element/GUI/Gridlist|grid list.
 * Note that for some reason the column ID is 1 lower than it should be, for example 0 is
 * returned but if you try and get the text for column 0 there is nothing, but column 1 has
 * what you clicked on.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListGetSelectedItems
 * @param gridList The Element/GUI/Gridlist|grid list which selected items you want to retrieve.
 * @return returns a table over the selected items in the element/gui/gridlist|grid list in this
 * format:
 * <syntaxhighlight lang=lua>
 * table = {
 * 1 = {
 * column, -- has the first selected items column id
 * row -- has the first selected items row id
 * },
 * 2 = {
 * column,-- has the second selected items column id
 * row -- has the second selected items row id
 * },
 * ...
 * }
 * </syntaxhighlight>
 * if everything was successful or false if invalid arguments were passed.
 * @noSelf
 */
export declare function guiGridListGetSelectedItems(
    gridList: Element,
): LuaTable;

/**
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListGetSelectionMode
 * @param gridlist The gridlist you want to get the selection mode of.
 * @return returns the id of the current gridlists selection mode.
 * @noSelf
 */
export declare function guiGridListGetSelectionMode(
    gridlist: GuiElement,
): number;

/**
 * This function is used to get the vertical scroll position from a grid list
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListGetVerticalScrollPosition
 * @param guiGridlist : The grid list you want to get the vertical scroll position from
 * @return returns a integer between 0 and 100 indicating the vertical scroll position, or false
 * otherwise.
 * @noSelf
 */
export declare function guiGridListGetVerticalScrollPosition(
    guiGridlist: Element,
): number;

/**
 * This allows you to insert a new row after a specified row, and simultaneously set text.
 * Good for inserting new rows in the middle of existing rows. To insert at the top use -1
 * as row index.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListInsertRowAfter
 * @param gridList The grid list you want to add a row to
 * @param rowIndex Row ID of the row you want to insert the new row after.
 * @param itemText1 The text for the first column item in the row.  Either a string or a number can be passed
 * (use numbers for sorting purposes).
 * @param itemText2 The text for the second column item in the row.  Either a string or a number can be
 * passed (use numbers for sorting purposes).
 * @param ... Item text for any other columns
 * @return returns row id if the row was successfully added, false otherwise.
 * @noSelf
 */
export declare function guiGridListInsertRowAfter(
    gridList: Element,
    rowIndex: number,
): number;

/**
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListIsSortingEnabled
 * @param guiGridlist The GUI gridlist you wish to check if sorting is enabled or not.
 * @return returns true if sorting is enabled, false otherwise.
 * @noSelf
 */
export declare function guiGridListIsSortingEnabled(
    guiGridlist: Element,
): boolean;

/**
 * This allows you to delete columns that exist in grid lists.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListRemoveColumn
 * @param gridList The grid list you want to remove a column from
 * @param columnIndex Column ID
 * @return returns true if the grid list column was successfully removed, false otherwise.
 * @noSelf
 */
export declare function guiGridListRemoveColumn(
    gridList: Element,
    columnIndex: number,
): boolean;

/**
 * This allows you to delete rows that exist in grid lists.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListRemoveRow
 * @param gridList The grid list you want to remove a row from
 * @param rowIndex The row ID which you want to remove
 * @return returns true if the grid list row was successfully removed, false otherwise.
 * @noSelf
 */
export declare function guiGridListRemoveRow(
    gridList: Element,
    rowIndex: number,
): boolean;

/**
 * This function is used to change the column title of a gridlist column.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListSetColumnTitle
 * @param guiGridlist : The grid list you want to change the column title from
 * @param columnIndex : Column ID
 * @param title : The title of the column
 * @return returns true if the new title was set, or false otherwise.
 * @noSelf
 */
export declare function guiGridListSetColumnTitle(
    guiGridlist: Element,
    columnIndex: number,
    title: string,
): boolean;

/**
 * This allows you to set the width of an existing column in a gridlist.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListSetColumnWidth
 * @param gridList The grid list you want to add a column to
 * @param columnIndex Column ID of the size you want to change
 * @param width A float or integer of the width of the column depending on the relative argument.
 * @param relative A boolean defining whether width measurements will be relative to the Gridlist size, or
 * absolute pixels.
 * @return returns true if the gridlist column width was successfully set, false if bad arguments
 * were given.
 * @noSelf
 */
export declare function guiGridListSetColumnWidth(
    gridList: Element,
    columnIndex: number,
    width: number,
    relative: boolean,
): boolean;

/**
 * This function is used to set the horizontal scroll position from a grid list
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListSetHorizontalScrollPosition
 * @param guiGridlist : The grid list you want to set the horizontal scroll position from
 * @param fPosition : A float representing the horizontal scroll position (0-100)
 * @return returns true if the horizontal scroll position was set, or false otherwise.
 * @noSelf
 */
export declare function guiGridListSetHorizontalScrollPosition(
    guiGridlist: Element,
    fPosition: number,
): boolean;

/**
 * This function changes the color of a gridlist item.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListSetItemColor
 * @param gridList The grid list element
 * @param rowIndex Row ID
 * @param columnIndex Column ID
 * @param red The amount of red in the color (0-255)
 * @param green The amount of green in the color (0-255)
 * @param blue The amount of blue in the color (0-255)
 * @param alpha The amount of alpha in the color (0-255).
 * @return returns true if the item color was set successfully, false otherwise.
 * @noSelf
 */
export declare function guiGridListSetItemColor(
    gridList: Element,
    rowIndex: number,
    columnIndex: number,
    red: number,
    green: number,
    blue: number,
    alpha?: number,
): boolean;

/**
 * This function sets a Item Data associated to a grid list item.<br/>
 * Note: This function will only work after you set the items text using
 * guiGridListSetItemText!
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListSetItemData
 * @param gridList A gridlist element of the data you wish to set to
 * @param rowIndex The row of the item you wish to set to
 * @param columnIndex The column of the item you wish to set to
 * @param data The data you wish to set to the item.
 * @return returns true if the data was set successfully, false otherwise
 * @noSelf
 */
export declare function guiGridListSetItemData(
    gridList: Element,
    rowIndex: number,
    columnIndex: number,
    data: unknown,
): boolean;

/**
 * This function changes the text of a gridlist item.
 * Notice: This function doesnt work well with Sorting. If you are using sorting, please use
 * the optional arguments of guiGridListAddRow as much as possible.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListSetItemText
 * @param gridList The grid list element
 * @param rowIndex Row ID
 * @param columnIndex Column ID
 * @param text The text you want to put in (does NOT accept numbers, use tostring() for that)
 * @param section Determines if the item is a section
 * @param number Tells whether the text item is a number value or not (used for sorting)
 * @return returns true if the item text was set successfully, false otherwise.
 * @noSelf
 */
export declare function guiGridListSetItemText(
    gridList: Element,
    rowIndex: number,
    columnIndex: number,
    text: string,
    section: boolean,
    number: boolean,
): boolean;

/**
 * This function allows a gridlists scrollbar to be forced on, or returned to default.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListSetScrollBars
 * @param guiGridlist The GUI gridlist you wish to change the state of scrollbars
 * @param horizontalBar A bool where true forces the horizontal scrollbar on, and false returns them to default.
 * @param verticalBar A bool where true forces the verical scrollbar on, and false returns them to default.
 * @return returns true if the scrollbars were successfully set, false otherwise.
 * @noSelf
 */
export declare function guiGridListSetScrollBars(
    guiGridlist: Element,
    horizontalBar: boolean,
    verticalBar: boolean,
): boolean;

/**
 * This function selects an item from a gridlist. If you wish to deselect whatever item is
 * selected, pass 0 as both the rowIndex and  columnIndex arguments.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListSetSelectedItem
 * @param gridList the grid list you want to select an item from
 * @param rowIndex the row you want to select (index 0 is the first row)
 * @param columnIndex the column you want to select (index 1 is the first column)
 * @param bReset set to false for multiple selections
 * @return returns true if the passed arguments are correct and the item has been selected, false
 * otherwise.
 * @noSelf
 */
export declare function guiGridListSetSelectedItem(
    gridList: Element,
    rowIndex: number,
    columnIndex: number,
    bReset?: boolean,
): boolean;

/**
 * This function sets the selection mode of a gui gridlist.  For example, the MTA server
 * browser selects a whole row, while the Controls dialog selects a single cell. To select
 * multiple items you must be holding down ctrl.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListSetSelectionMode
 * @param gridlist The gridlist in which you wish to set the selection mode.
 * @param mode The mode of the selection.  Can be the following values:
 * @param 0 Single row selection
 * @param 1 Multiple row selection
 * @param 2 Single cell selection
 * @param 3 Multiple cell selection
 * @param 4 Nominated(First) single column selection
 * @param 5 Nominated(First) multiple column selection
 * @param 6 Single column selection
 * @param 7 Multiple column selection
 * @param 8 Nominated(First) single row selection
 * @param 9 Nominated(First) multiple row selection
 * @return returns true if the selection mode was successfully set, false otherwise.
 * @noSelf
 */
export declare function guiGridListSetSelectionMode(
    gridlist: GuiElement,
    mode: number,
): boolean;

/**
 * This function allows the disabling or enabling of sorting within a gridlist.  Sorting is
 * achieved by clicking a column header.  Gridlist items will be sorted according to the
 * clicked column.  By default, gridlists have sorting enabled.  This function will allow
 * you to toggle this.
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListSetSortingEnabled
 * @param guiGridlist The GUI gridlist you wish to toggle the sorting of.
 * @param enabled A boolean representing whether the sorting is enabled, or disabled.
 * @return returns true if sorting was successfully toggled., false otherwise.
 * @noSelf
 */
export declare function guiGridListSetSortingEnabled(
    guiGridlist: Element,
    enabled: boolean,
): boolean;

/**
 * This function is used to set the vertical scroll position from a grid list
 * @see https://wiki.multitheftauto.com/wiki/GuiGridListSetVerticalScrollPosition
 * @param guiGridlist : The grid list you want to set the vertical scroll position from
 * @param fPosition : A float representing the vertical scroll position (0-100)
 * @return returns true if the vertical scroll position was set, or false otherwise.
 * @noSelf
 */
export declare function guiGridListSetVerticalScrollPosition(
    guiGridlist: Element,
    fPosition: number,
): boolean;

/**
 * This function gets the color of a label.
 * @see https://wiki.multitheftauto.com/wiki/GuiLabelGetColor
 * @param theLabel The label to get color.
 * @return returns three int values, representing the amount of red, green, blue if successful.
 * false otherwise.
 * @noSelf
 */
export declare function guiLabelGetColor(
    theLabel: GuiElement,
): LuaMultiReturn<[number, number, number]>;

/**
 * This function returns the height of the font currently used in a GUI text label.
 * @see https://wiki.multitheftauto.com/wiki/GuiLabelGetFontHeight
 * @param theLabel The text label to get the font height from.
 * @return returns the absolute height of the font currently used in the text label if the function
 * is successful, false otherwise.
 * @noSelf
 */
export declare function guiLabelGetFontHeight(theLabel: Element): number;

/**
 * This function returns the extent, or width, of the current text inside a GUI text label.
 * @see https://wiki.multitheftauto.com/wiki/GuiLabelGetTextExtent
 * @param theLabel The text label to get the text extent from.
 * @return returns the absolute width of the current text inside the text label if the function is
 * successful, false otherwise.
 * @noSelf
 */
export declare function guiLabelGetTextExtent(theLabel: Element): number;

/**
 * This function allows you to set the color of a GUI label.
 * @see https://wiki.multitheftauto.com/wiki/GuiLabelSetColor
 * @param theElement The label to be changed.
 * @param red An integer specifying the amount of red (0 to 255).
 * @param green An integer specifying the amount of green (0 to 255).
 * @param blue An integer specifying the amount of blue (0 to 255).
 * @return returns true if the the color of the gui label was successfully changed, false otherwise.
 * @noSelf
 */
export declare function guiLabelSetColor(
    theElement: Element,
    red: number,
    green: number,
    blue: number,
): boolean;

/**
 * This function sets the horizontal alignment of a text label.
 * @see https://wiki.multitheftauto.com/wiki/GuiLabelSetHorizontalAlign
 * @param theLabel The text label to set the horizontal alignment on.
 * @param align The alignment type. Valid type strings are:
 * **"left"
 * **"center"
 * **"right"
 * @param wordwrap Whether or not to enable wordwrap for the gui-label.
 * @return returns true on success, false otherwise.
 * @noSelf
 */
export declare function guiLabelSetHorizontalAlign(
    theLabel: Element,
    align: string,
    wordwrap?: boolean,
): boolean;

/**
 * This function sets the vertical alignment of a text label.
 * @see https://wiki.multitheftauto.com/wiki/GuiLabelSetVerticalAlign
 * @param theLabel The text label to set the vertical alignment on.
 * @param align The alignment type. Valid type strings are:
 * **"top"
 * **"center"
 * **"bottom"
 * @return returns true on success, false otherwise.
 * @noSelf
 */
export declare function guiLabelSetVerticalAlign(
    theLabel: Element,
    align: string,
): boolean;

/**
 * This function returns the caret (the text cursor) position within the memo box.
 * @see https://wiki.multitheftauto.com/wiki/GuiMemoGetCaretIndex
 * @param theElement The memo box you want to get the caret position from
 * @return returns the caret index on success, false otherwise.
 * @noSelf
 */
export declare function guiMemoGetCaretIndex(theElement: Element): number;

/**
 * @see https://wiki.multitheftauto.com/wiki/GuiMemoGetVerticalScrollPosition
 * @param theMemo : the guiCreateMemo|memo you want to know the vertical scroll position of.
 * @return returns a float ranging between 0 and 100, or false otherwise.
 * @noSelf
 */
export declare function guiMemoGetVerticalScrollPosition(
    theMemo: GuiMemo,
): number;

/**
 * @see https://wiki.multitheftauto.com/wiki/GuiMemoIsReadOnly
 * @param theMemo The memo to check read-only status of.
 * @return returns true if the memo is read only, false if the memo isnt read only, nil otherwise.
 * @noSelf
 */
export declare function guiMemoIsReadOnly(theMemo: GuiMemo): boolean;

/**
 * This function sets the current position of the caret (the text cursor) within the memo.
 * @see https://wiki.multitheftauto.com/wiki/GuiMemoSetCaretIndex
 * @param theMemo The memo edit box where the caret position is to be changed.
 * @param index An integer referring to the desired character position within the box. 0 would be before
 * the first character in the box, 1 before the second, etc.
 * @return returns true if the caret was successfully moved, false otherwise.
 * @noSelf
 */
export declare function guiMemoSetCaretIndex(
    theMemo: GuiMemo,
    index: number,
): boolean;

/**
 * This function allows you to set or remove read-only status for a GUI memo. If read-only
 * is set to true, the contents are not editable.
 * @see https://wiki.multitheftauto.com/wiki/GuiMemoSetReadOnly
 * @param theMemo The memo to change read-only status of.
 * @param status A boolean value indicating whether read-only is to be enabled or disabled.
 * @return returns true if the status was successfully changed, false otherwise.
 * @noSelf
 */
export declare function guiMemoSetReadOnly(
    theMemo: GuiMemo,
    status: boolean,
): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/GuiMemoSetVerticalScrollPosition
 * @param theMemo : the guiCreateMemo|memo you want to change the vertical scroll position of.
 * @param position : a float ranging between 0 and 100.
 * @return returns true if the position was set, false otherwise.
 * @noSelf
 */
export declare function guiMemoSetVerticalScrollPosition(
    theMemo: GuiMemo,
    position: number,
): boolean;

/**
 * This function moves a GUI element to the very back of all other GUI elements.
 * @see https://wiki.multitheftauto.com/wiki/GuiMoveToBack
 * @param guiElement the GUI element that you want to move to the back
 * @return returns true if the function was successful, false otherwise.
 * @noSelf
 */
export declare function guiMoveToBack(guiElement: Element): boolean;

/**
 * This function gets the progress of a progress bar as a percentage.
 * @see https://wiki.multitheftauto.com/wiki/GuiProgressBarGetProgress
 * @param theProgressbar : The progressbar you want to check.
 * @return returns a float ranging between 0 and 100.
 * @noSelf
 */
export declare function guiProgressBarGetProgress(
    theProgressbar: ProgressBar,
): number;

/**
 * This function is used to set the progress of a progressbar as a percentage.
 * @see https://wiki.multitheftauto.com/wiki/GuiProgressBarSetProgress
 * @param theProgressbar : The progressbar you want to change the progress of
 * @param progress : a float ranging from 0 - 100
 * @return returns true if the progress was set, false otherwise.
 * @noSelf
 */
export declare function guiProgressBarSetProgress(
    theProgressbar: ProgressBar,
    progress: number,
): boolean;

/**
 * This function gets a radio buttons selection state.
 * @see https://wiki.multitheftauto.com/wiki/GuiRadioButtonGetSelected
 * @param guiRadioButton The radio button you wish to retrieve the selection state of.
 * @return returns true if the radio button is selected, false if it is not.
 * @noSelf
 */
export declare function guiRadioButtonGetSelected(
    guiRadioButton: Element,
): boolean;

/**
 * This function selects or unselects a radio button.
 * @see https://wiki.multitheftauto.com/wiki/GuiRadioButtonSetSelected
 * @param guiRadioButton The GUI radio button in which you wish to change the selection state of
 * @param state The state of the radio button, where true indicates selected, and false indicates
 * unselected.
 * @return returns true if the radio buttons selection state was successfully set, false otherwise.
 * @noSelf
 */
export declare function guiRadioButtonSetSelected(
    guiRadioButton: Element,
    state: boolean,
): boolean;

/**
 * This function gets the scroll amount of a scrollbar as a percentage.
 * @see https://wiki.multitheftauto.com/wiki/GuiScrollBarGetScrollPosition
 * @param theScrollBar : The scrollbar you want to check.
 * @return returns a float ranging between 0 and 100, representing the amount the scrollbar has been
 * scrolled.
 * @noSelf
 */
export declare function guiScrollBarGetScrollPosition(
    theScrollBar: GuiScrollBar,
): number;

/**
 * This function is used to set the scroll amount of a scrollbar as a percentage.
 * @see https://wiki.multitheftauto.com/wiki/GuiScrollBarSetScrollPosition
 * @param theScrollBar : The scrollbar you want to change the progress of
 * @param amount : a float ranging from 0 - 100 representing the amount you wish to set the scroll bar.
 * @return returns true if the scroll position was successfully set, false otherwise.
 * @noSelf
 */
export declare function guiScrollBarSetScrollPosition(
    theScrollBar: GuiScrollBar,
    amount: number,
): boolean;

/**
 * This function is used to get the position of a horizontal scroll pane as a percentage.
 * @see https://wiki.multitheftauto.com/wiki/GuiScrollPaneGetHorizontalScrollPosition
 * @param horizontalScrollPane : The scroll pane you want to know the position of
 * @return returns a float ranging between 0 and 100, or false otherwise.
 * @noSelf
 */
export declare function guiScrollPaneGetHorizontalScrollPosition(
    horizontalScrollPane: Element,
): number;

/**
 * This function is used to get the position of a vertical scroll pane as a percentage.
 * @see https://wiki.multitheftauto.com/wiki/GuiScrollPaneGetVerticalScrollPosition
 * @param verticalScrollPane : The scroll pane you want to know the position of
 * @return returns a float ranging between 0 and 100, or false otherwise.
 * @noSelf
 */
export declare function guiScrollPaneGetVerticalScrollPosition(
    verticalScrollPane: Element,
): number;

/**
 * This function is used to set the position of a horizontal scroll pane as a percentage.
 * @see https://wiki.multitheftauto.com/wiki/GuiScrollPaneSetHorizontalScrollPosition
 * @param horizontalScrollPane : The scroll pane you want to change the position of
 * @param position : a float ranging from 0 - 100
 * @return returns true if the position was set, false otherwise.
 * @noSelf
 */
export declare function guiScrollPaneSetHorizontalScrollPosition(
    horizontalScrollPane: Element,
    position: number,
): boolean;

/**
 * This function allows a scrollpanes scrollbars to be forced on, or returned to default.
 * @see https://wiki.multitheftauto.com/wiki/GuiScrollPaneSetScrollBars
 * @param scrollPane the GUI scrollpane element you want to set the scrollbars of.
 * @param horizontal A bool where true forces the horizontal scrollbar on, and false returns them to default.
 * @param vertical A bool where true forces the vertical scrollbar on, and false returns them to default.
 * @return returns true if the call was successfully, false otherwise.
 * @noSelf
 */
export declare function guiScrollPaneSetScrollBars(
    scrollPane: Element,
    horizontal: boolean,
    vertical: boolean,
): boolean;

/**
 * This function is used to set the position of a vertical scroll pane as a percentage.
 * @see https://wiki.multitheftauto.com/wiki/GuiScrollPaneSetVerticalScrollPosition
 * @param verticalScrollPane : The scroll pane you want to change the position of
 * @param position : a float ranging from 0 - 100
 * @return returns true if the position was set, false otherwise.
 * @noSelf
 */
export declare function guiScrollPaneSetVerticalScrollPosition(
    verticalScrollPane: Element,
    position: number,
): boolean;

/**
 * This changes the alpha level (the visibleness/transparency) of a GUI element
 * @see https://wiki.multitheftauto.com/wiki/GuiSetAlpha
 * @param guiElement the GUI element whose visibility is to be changed
 * @param alpha The visibility/transparency of the GUI element. Ranges from 0 (fully transparent) to 1
 * (fully opaque). Default value is 0.80.
 * @return returns true if the gui elements alpha was successfully changed, false otherwise.
 * @noSelf
 */
export declare function guiSetAlpha(
    guielement: Element,
    alpha: number,
): boolean;

/**
 * This function enables/disables a GUI element. A disabled GUI element cant be used, gets a
 * gray aspect and doesnt receive any events.
 * @see https://wiki.multitheftauto.com/wiki/GuiSetEnabled
 * @param guiElement the GUI element you wish to enable or disable
 * @param enabled the new state
 * @return if the function succeeds it returns true, if it fails it returns false.
 * @noSelf
 */
export declare function guiSetEnabled(
    guiElement: Element,
    enabled: boolean,
): boolean;

/**
 * This function sets the font of a GUI_widgets|GUI element to be used when drawing text.
 * @see https://wiki.multitheftauto.com/wiki/GuiSetFont
 * @param guiElement The GUI element you wish to change the font of
 * @param font Either a custom GUI font element or the name of a built-in GUI font. See Standard GUI
 * Font Names
 * @return returns true if the font has been successfully set on the gui element, false otherwise.
 * @noSelf
 */
export declare function guiSetFont(guiElement: Element, font: any): boolean;

/**
 * This function enables or disables input focus for the GUI.  This means that any keybinds
 * or MTA binds are overidden so that text can be input into an editbox, for example.  In
 * other words, keys such as t and y which activate the chatbox are disabled.
 * guiSetInputMode can be used as an extended version of guiSetInputEnabled since it
 * provides the same functionality with one added feature.
 * @see https://wiki.multitheftauto.com/wiki/GuiSetInputEnabled
 * @param enabled true if input should go to GUI, false if it should go to the game.
 * @return returns true if input mode could be changed, false if invalid parameters are passed.
 * @noSelf
 */
export declare function guiSetInputEnabled(enabled: boolean): boolean;

/**
 * This function controls the input mode to define whether or not (and when) keybinds or MTA
 * binds are overridden (disabled) so that text can be input into an editbox, for example.
 * The binds can be either:
 * * never disabled (hence using a key such as t in an editbox will still activate the
 * chatbox)
 * * always disabled (hence using a key such as t in an editbox will not activate the
 * chatbox)
 * * only disabled when actually editing an editbox or a memo (binds are always enabled
 * except when an editbox or memo has input focus)
 * @see https://wiki.multitheftauto.com/wiki/GuiSetInputMode
 * @param mode a string representing the desired input mode. Accepted values are:
 * @param allow_binds binds are enabled, hence using a key such as t in an editbox will still activate the
 * chatbox (default)
 * @param no_binds binds are disabled, hence using a key such as t in an editbox will not activate the
 * chatbox
 * @param no_binds_when_editing binds are always enabled except when an editable editbox or memo has input focus
 * @return returns true if input mode could be changed, false if invalid parameters are passed.
 * @noSelf
 */
export declare function guiSetInputMode(mode: string): boolean;

/**
 * This function sets the position of a GUI element.
 * @see https://wiki.multitheftauto.com/wiki/GuiSetPosition
 * @param theElement The GUI element to change position for
 * @param x Position over the X axis
 * @param y Position over the Y axis
 * @param relative Bool that indicates if the x/y positions are relative to the elements parent element.
 * @return returns true if the position has been successfully set, false otherwise.
 * @noSelf
 */
export declare function guiSetPosition(
    theElement: Element,
    x: number,
    y: number,
    relative: boolean,
): boolean;

/**
 * This function sets the value of a specific CEGUI property of a GUI element. For a list of
 * properties and their meaning, see the
 * http://static.cegui.org.uk/static/WindowsLookProperties.html CEGUI properties page.
 * @see https://wiki.multitheftauto.com/wiki/GuiSetProperty
 * @param guiElement the GUI element you wish to get a property of.
 * @param property the name of of property you want the value of.
 * @param value the new value for the property.
 * @return if the function succeeds it returns true, if it fails it returns false.
 * @noSelf
 */
export declare function guiSetProperty(
    guiElement: Element,
    property: string,
    value: string,
): boolean;

/**
 * This function is used to change the currently selected Element/GUI/Tab|tab in a
 * Element/GUI/Tab panel|tab panel.
 * @see https://wiki.multitheftauto.com/wiki/GuiSetSelectedTab
 * @param tabPanel The Element/GUI/Tab panel|tab panel which current tab you want to change.
 * @param theTab The Element/GUI/Tab|tab which will be the new active tab.
 * @return returns true if the selected tab was changed to a new one successfully, false otherwise.
 * @noSelf
 */
export declare function guiSetSelectedTab(
    tabPanel: Element,
    theTab: Element,
): boolean;

/**
 * This function sets the dimensions (size) of a GUI element. It refers to the bounding box
 * size for GUI elements. It does not make GUI elements smaller or larger in appearance.
 * @see https://wiki.multitheftauto.com/wiki/GuiSetSize
 * @param guiElement the GUI element whose visibility is to be changed
 * @param width The desired width setting for the gui element
 * @param height The desired height setting for the gui element
 * @param relative This is whether sizes and positioning are relative.  If this is true, then all
 * x,y,width,height floats must be between 0 and 1, representing sizes relative to the
 * parent.
 * @return returns true if the gui elements size was set successfully, false otherwise.
 * @noSelf
 */
export declare function guiSetSize(
    guiElement: Element,
    width: number,
    height: number,
    relative: boolean,
): boolean;

/**
 * This function sets the text of a GUI element.
 * @see https://wiki.multitheftauto.com/wiki/GuiSetText
 * @param guiElement The GUI element you wish to change the text of
 * @param text The new text
 * @return returns true if text has been successfully set on the gui element, false otherwise.
 * @noSelf
 */
export declare function guiSetText(guiElement: Element, text: string): boolean;

/**
 * This function changes the visibility state of a GUI element.
 * @see https://wiki.multitheftauto.com/wiki/GuiSetVisible
 * @param guiElement the GUI element whose visibility is to be changed
 * @param state the new visibility state
 * @return returns true if the elements visibility could be changed, false otherwise.
 * @noSelf
 */
export declare function guiSetVisible(
    guiElement: Element,
    state: boolean,
): boolean;

/**
 * This function gets the native size of image. That means the original size in pixels of
 * the image file.
 * @see https://wiki.multitheftauto.com/wiki/GuiStaticImageGetNativeSize
 * @param theImage The static image element to get the original size of.
 * @return returns two integers where first is the width and second the height of the image in
 * pixels, false if the image element was invalid.
 * @noSelf
 */
export declare function guiStaticImageGetNativeSize(
    theImage: Element,
): LuaMultiReturn<[number, number]>;

/**
 * This function allows you to change the image in GUI static image element to another one.
 * Tip: If you set other images as children you will have to use
 * setElementCallPropagationEnabled to only affect the parent image.
 * @see https://wiki.multitheftauto.com/wiki/GuiStaticImageLoadImage
 * @param theElement The static image element to be changed.
 * @param filename A string specifying the filepath of the image file being loaded in current resource.
 * @return returns true if the the image in the static image element was successfully changed, false
 * otherwise.
 * @noSelf
 */
export declare function guiStaticImageLoadImage(
    theElement: Element,
    filename: string,
): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/GuiWindowIsMovable
 * @param guiWindow the window to check the movable flag of
 * @return returns true if the window is movable, false if not, nil if an invalid window was
 * provided.
 * @noSelf
 */
export declare function guiWindowIsMovable(guiWindow: GuiWindow): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/GuiWindowIsSizable
 * @param guiWindow the window to check the sizable flag of
 * @return returns true if the window is sizable, false if not, nil if an invalid window was
 * provided.
 * @noSelf
 */
export declare function guiWindowIsSizable(guiWindow: GuiWindow): boolean;

/**
 * This function allows you to specify whether or not a user can move a GUI window.
 * @see https://wiki.multitheftauto.com/wiki/GuiWindowSetMovable
 * @param theElement The window to be changed.
 * @param status A boolean value indicating whether the window is movable or not.
 * @return returns true if the function is successful, false otherwise.
 * @noSelf
 */
export declare function guiWindowSetMovable(
    theElement: Element,
    status: boolean,
): boolean;

/**
 * This function enables or disables user resizing of a GUI window.
 * @see https://wiki.multitheftauto.com/wiki/GuiWindowSetSizable
 * @param theElement The window to be changed.
 * @param status A boolean value indicating whether user resizing is to be enabled or disabled.
 * @return returns true if the function is successful, false otherwise.
 * @noSelf
 */
export declare function guiWindowSetSizable(
    theElement: Element,
    status: boolean,
): boolean;

/**
 * This function returns whether the ingame chatbox is being used (accepting chatbox input)
 * or not.
 * @see https://wiki.multitheftauto.com/wiki/IsChatBoxInputActive
 * @return returns true if the chatbox is receiving input, false if not active.
 * @noSelf
 */
export declare function isChatBoxInputActive(): boolean;

/**
 * This function returns whether the ingame console window is visible or not.
 * @see https://wiki.multitheftauto.com/wiki/IsConsoleActive
 * @return returns true if the console is visible, false if not.
 * @noSelf
 */
export declare function isConsoleActive(): boolean;

/**
 * This function returns whether the ingame debug window is visible or not. This is the
 * debugwindow visible using the debugscript <level> command.
 * @see https://wiki.multitheftauto.com/wiki/IsDebugViewActive
 * @return returns true if the debug view is visible, false if not.
 * @noSelf
 */
export declare function isDebugViewActive(): boolean;

/**
 * This function returns whether the user is in the mainmenu or not.
 * @see https://wiki.multitheftauto.com/wiki/IsMainMenuActive
 * @return returns true if the mainmenu is visible, false if not.
 * @noSelf
 */
export declare function isMainMenuActive(): boolean;

/**
 * This function returns whether any system windows that take focus are active. This
 * includes:
 * * Chatbox input
 * * Console window
 * * Main menu
 * * Transferbox
 * To get the status of the debug view, see isDebugViewActive.
 * @see https://wiki.multitheftauto.com/wiki/IsMTAWindowActive
 * @return returns true if the focus is on the mta window, false if it isnt.
 * @noSelf
 */
export declare function isMTAWindowActive(): boolean;

/**
 * This function returns whether the file downloading dialog box is active or not. This
 * appears when a resource is started and the client doesnt have all the files that resource
 * requires the client to have.
 * Its important to note that resources arent started on the client until theyre completely
 * downloaded, so a resource cannot use this function to detect if its own files are
 * downloaded. A client-side resource triggers the onClientResourceStart event when the
 * files it requires are downloaded.
 * @see https://wiki.multitheftauto.com/wiki/IsTransferBoxActive
 * @return returns true if the file transfer box is visible, false if not.
 * @noSelf
 */
export declare function isTransferBoxActive(): boolean;

/**
 * Sets the maximum amount of characters that can be input via chatbox
 * @see https://wiki.multitheftauto.com/wiki/SetChatboxCharacterLimit
 * @param charLimit an integer between 0-255. Passing -1 will reset the character limit (96)
 * @return returns true if the character limit was set, false otherwise
 * @noSelf
 */
export declare function setChatboxCharacterLimit(charLimit: number): boolean;

/**
 * This function enables or disables the debug window.
 * @see https://wiki.multitheftauto.com/wiki/SetDebugViewActive
 * @param enabled true if debug window should be visible, false otherwise.
 * @return returns true, false if invalid parameters are passed.
 * @noSelf
 */
export declare function setDebugViewActive(enabled: boolean): boolean;
