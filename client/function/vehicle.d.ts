// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

import {
    ProgressBar,
    Gui,
    EngineTXD,
    EngineDFF,
    EngineCOL,
    EngineIFP,
    PrimitiveType,
    DxTexture,
    ObjectGroup,
    Browser,
    Light,
    Effect,
    Searchlight,
    Weapon,
    GuiBrowser,
    GuiMemo,
    GuiElement,
    GuiEdit,
    GuiScrollBar,
    GuiWindow,
    Projectile,
    Material,
    Svg,
    SvgCallback,
    Userdata,
    TextItem,
    Pickup,
    Request,
    Player,
    Blip,
    ColShape,
    Element,
    Ped,
    Resource,
    Team,
    Vehicle,
    XmlNode,
    File,
    Marker,
    MTASAObject,
    RadarArea,
    Water,
    Timer,
    HandleFunction,
    TimerCallbackFunction,
    FetchRemoteCallback,
    GenericEventHandler,
    CommandHandler,
    BindKeyCallback,
    BindKeyCallbackVarArgs,
    ControlName,
    KeyName,
    KeyState,
    Vector2,
    Vector3,
    Vector4,
    Matrix,
} from '../structure';

/**
 * This function adds an upgrade to a vehicle, e.g. nitrous, hydraulics.
 * @see https://wiki.multitheftauto.com/wiki/AddVehicleUpgrade
 * @param theVehicle : The element representing the vehicle you wish to add the upgrade to.
 * @param upgrade : The id of the upgrade you wish to add: 1000 to 1193 (see Vehicle Upgrades) or all to
 * add all upgrades.
 * '''Note:''' setCameraTarget will behave strangely if you use hydraulics (upgrade id:
 * 1087) server sided and when your camera target is the player inside the vehicle with
 * hydraulics and if the player is not you.
 * @return returns true if the upgrade was successfully added to the vehicle, otherwise false.
 * @noSelf
 */
export declare function addVehicleUpgrade(
    theVehicle: Vehicle,
    upgrade: string | number,
): boolean;

/**
 * *This is different to getVehicleOverrideLights because this function will return true if
 * the lights were turned on by natural causes.
 * * Unless setVehicleOverrideLights is used, vehicles always automatically disable their
 * lights at 06:25 and enable them at 20:26.}}
 * @see https://wiki.multitheftauto.com/wiki/AreVehicleLightsOn
 * @param theVehicle : the vehicle you wish to retrieve the lights state of.
 * @return returns true if the lights are on, false otherwise.
 * @noSelf
 */
export declare function areVehicleLightsOn(theVehicle: Vehicle): boolean;

/**
 * This function attaches a trailer type vehicle to a trailer-towing-type vehicle.
 * @see https://wiki.multitheftauto.com/wiki/AttachTrailerToVehicle
 * @param theVehicle : the vehicle you wish to attach a trailer to.
 * @param theTrailer : the trailer you wish to be attached.
 * @return returns true if the vehicles were successfully attached, false otherwise.
 * @noSelf
 */
export declare function attachTrailerToVehicle(
    theVehicle: Vehicle,
    theTrailer: Vehicle,
): boolean;

/**
 * This function will blow up a vehicle. This will cause an explosion and will kill the
 * driver and any passengers inside it.
 * @see https://wiki.multitheftauto.com/wiki/BlowVehicle
 * @param vehicleToBlow the vehicle that you wish to blow up.
 * @noSelf
 */
export declare function blowVehicle(vehicleToBlow: Vehicle): boolean;

/**
 * This function creates a vehicle at the specified location.
 * Its worth nothing that the position of the vehicle is the center point of the vehicle,
 * not its base. As such, you need to ensure that the z value (vertical axis) is some height
 * above the ground. You can find the exact height using the client side function
 * getElementDistanceFromCentreOfMassToBaseOfModel, or you can estimate it yourself and just
 * spawn the vehicle so it drops to the ground.
 * @see https://wiki.multitheftauto.com/wiki/CreateVehicle
 * @param model : The Vehicle IDs|vehicle ID of the vehicle being created.
 * @param x : A floating point number representing the X coordinate on the map.
 * @param y : A floating point number representing the Y coordinate on the map.
 * @param z : A floating point number representing the Z coordinate on the map.
 * @param rx : A floating point number representing the rotation about the X axis in degrees.
 * @param ry : A floating point number representing the rotation about the Y axis in degrees.
 * @param rz : A floating point number representing the rotation about the Z axis in degrees.
 * @param numberplate : A string that will go on the number plate of the vehicle (max 8 characters).
 * @param bDirection (serverside only): Placeholder boolean which provides backward compatibility with some
 * scripts. It never had any effect, but it is read by the code. It is recommended to ignore
 * this argument, passing false or the variant1 argument in its place.
 * @param variant1 : An integer for the first vehicle variant. See vehicle variants.
 * @param variant2 : An integer for the second vehicle variant. See vehicle variants.
 * @return returns the vehicle element that was created. returns false if the arguments are
 * incorrect, or if the vehicle limit of 65535 is exceeded.
 * @noSelf
 */
export declare function createVehicle(
    model: number,
    x: number,
    y: number,
    z: number,
    rx?: number,
    ry?: number,
    rz?: number,
    numberplate?: string,
    bDirection?: boolean,
    variant1?: number,
    variant2?: number,
): Vehicle;

/**
 * This function detaches an already attached trailer from a vehicle.
 * @see https://wiki.multitheftauto.com/wiki/DetachTrailerFromVehicle
 * @param theVehicle : The vehicle you wish to detach a trailer from.
 * @param theTrailer : The trailer you wish to be detached.
 * @return returns true if the vehicles were successfully detached, false otherwise.
 * @noSelf
 */
export declare function detachTrailerFromVehicle(
    theVehicle: Vehicle,
    theTrailer?: Vehicle,
): boolean;

/**
 * This function will set a vehicles health to full and fix its damage model. If you wish to
 * only change the vehicles health, without affecting its damage model, use setElementHealth.
 * @see https://wiki.multitheftauto.com/wiki/FixVehicle
 * @param theVehicle the vehicle you wish to fix
 * @return returns true if the vehicle was fixed, false if thevehicle is invalid.
 * @noSelf
 */
export declare function fixVehicle(theVehicle: Vehicle): boolean;

/**
 * This function gets the state of the helicopter blades collisions on the specified vehicle.
 * @see https://wiki.multitheftauto.com/wiki/GetHeliBladeCollisionsEnabled
 * @param theVehicle The vehicle that will be checked.
 * @return returns true if the collisions are enabled for specified vehicle, false if the collisions
 * arent enabled for the specified vehicle, if the vehicle is not a helicopter or if invalid
 * arguments are specified.
 * @noSelf
 */
export declare function getHeliBladeCollisionsEnabled(
    theVehicle: Vehicle,
): boolean;

/**
 * Retrieves the speed at which the rotor of a helicopter rotates.
 * @see https://wiki.multitheftauto.com/wiki/GetHelicopterRotorSpeed
 * @param heli the helicopter element to get the rotor speed of.
 * @return returns the rotor speed if successful. this is 0 when the helicopter is parked, and about
 * 0.2 when it is fully spun up. it can be negative if the rotor rotates counter-clockwise.
 * returns false in case of failure (an invalid element or a vehicle element that is not a
 * helicopter was passed).
 * @noSelf
 */
export declare function getHelicopterRotorSpeed(heli: Vehicle): number;

/**
 * This function returns a table of the original vehicle handling. Use getVehicleHandling if
 * you wish to get the current handling of a vehicle, or getModelHandling for a specific
 * vehicle model.
 * @see https://wiki.multitheftauto.com/wiki/GetOriginalHandling
 * @param modelID The vehicle ID you wish to get the original handling from.
 * @return returns a table containing all the handling data, false otherwise. here a list of valid
 * table properties and what they return:
 * @noSelf
 */
export declare function getOriginalHandling(modelID: number): LuaTable;

/**
 * Gets the direction in which a train is driving (clockwise or counterclockwise).
 * @see https://wiki.multitheftauto.com/wiki/GetTrainDirection
 * @param train the train of which to get the driving direction.
 * @return returns true if the train is driving clockwise on the train track, false if it is going
 * counterclockwise or a failure occured.
 * @noSelf
 */
export declare function getTrainDirection(train: Vehicle): boolean;

/**
 * Gets the position the train is currently on the track
 * @see https://wiki.multitheftauto.com/wiki/GetTrainPosition
 * @param train the train to get the position of
 * @return returns a float that represents how along the track it is, false if there is problem with
 * train element.
 * @noSelf
 */
export declare function getTrainPosition(train: Vehicle): number;

/**
 * Gets the speed at which a train is traveling on the rails.
 * @see https://wiki.multitheftauto.com/wiki/GetTrainSpeed
 * @param train the train of which to retrieve the speed.
 * @return returns the trains speed if successful, false otherwise.
 * @noSelf
 */
export declare function getTrainSpeed(train: Vehicle): number;

/**
 * Use this to get the value of a vehicles adjustable property. This property relates to
 * movable parts of a model, for example hydra jets or dump truck tray.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleAdjustableProperty
 * @param theVehicle The vehicle you want to get the adjustable property of.
 * @return returns a value from 0 upwards representing adjustment. 0 is default position. maximum
 * varies per vehicle, for example hydra horizontal flight is 5000, while dump truck tray
 * max tilt is 2500. or returns false if the vehicle passed to the function is invalid.
 * @noSelf
 */
export declare function getVehicleAdjustableProperty(
    theVehicle: Vehicle,
): number;

/**
 * This function returns the color of the specified vehicle. A vehicle can have up to four
 * colors.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleColor
 * @param theVehicle The vehicle that you wish to get the color of.
 * @param bRGB A boolean specifying whether to return RGB values. A setting of false will result in the
 * function returning color ids instead.
 * @return *returns 12 int|ints (if brgb is true) indicating the red, green and blue components of
 * each of the 4 vehicle colors.
 * *returns 4 int|ints (if brgb is false) indicating the color ids of each of the 4 vehicle
 * colors.
 * *returns false if the vehicle doesnt exist.
 * valid color ids if brgb is set to false:
 * <br>
 * @noSelf
 */
export declare function getVehicleColor(
    theVehicle: Vehicle,
    bRGB: boolean,
): LuaMultiReturn<
    [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
    ]
>;

/**
 * This function returns a table of all the compatible upgrades (or all for a specified
 * slot, optionally) for a specified vehicle.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleCompatibleUpgrades
 * @param theVehicle the vehicle you wish to retrieve the list of compatible upgrades of.
 * @param slot the upgrade slot number for which youre getting the list (from 0 to 16). Compatible
 * upgrades for all slots are listed if this is not specified.
 * @return returns a table with all the compatible upgrades, or false if invalid arguments are
 * passed.
 * @noSelf
 */
export declare function getVehicleCompatibleUpgrades(
    theVehicle: Vehicle,
    slot?: number,
): LuaTable;

/**
 * This function gets the component position of a vehicle. The vehicle must be streamed in.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleComponentPosition
 * @param theVehicle The vehicle you wish to get component position of.
 * @param theComponent A Vehicle_Components|vehicle component (this is the frame name from the model file of the
 * component you wish to modify)
 * @param base A string representing what the returned position is relative to. It can be one of the
 * following values:
 * @param parent The position is relative to the parent component.
 * @param root The position is relative to the root component.
 * @param world The position is a world position.
 * @return returns three floats indicating the position of the component, x, y and z respectively.
 * @noSelf
 */
export declare function getVehicleComponentPosition(
    theVehicle: Vehicle,
    theComponent: string,
    base?: string,
): LuaMultiReturn<[number, number, number]>;

/**
 * This function gets the component rotation of a vehicle.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleComponentRotation
 * @param theVehicle The vehicle you wish to get component rotation of.
 * @param theComponent A Vehicle_Components|vehicle component (this is the frame name from the model file of the
 * component you wish to modify)
 * @param base A string representing what the returned rotation is relative to. It can be one of the
 * following values:
 * @param parent (default if not specified): The rotation is relative to the parent component.
 * @param root : The rotation is relative to the root component.
 * @param world : The rotation is a world rotation, relative to the worlds coordinates axes.
 * @return returns three floats indicating the rotation of the component, x, y and z respectively.
 * @noSelf
 */
export declare function getVehicleComponentRotation(
    theVehicle: Vehicle,
    theComponent: string,
    base?: string,
): LuaMultiReturn<[number, number, number]>;

/**
 * This function gets a table of the components currently on a vehicle.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleComponents
 * @param theVehicle The vehicle you wish to get the Vehicle_Components|components of.
 * @return returns a table containing the name of the component as the key and visibility flag of
 * that component as the value
 * @noSelf
 */
export declare function getVehicleComponents(theVehicle: Vehicle): LuaTable;

/**
 * This function gets the component scale of a vehicle.}}
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleComponentScale
 * @param theVehicle The vehicle you wish to get component scale of.
 * @param theComponent A Vehicle_Components|vehicle component (this is the frame name from the model file of the
 * component you wish to modify)
 * @param base A string representing what the returned scale is relative to. It can be one of the
 * following values:
 * @param parent The scale is relative to the parent component.
 * @param root The scale  is relative to the root component.
 * @param world The scale is a world scale.
 * @return returns three floats indicating the scale of the component, x, y and z respectively.
 * @noSelf
 */
export declare function getVehicleComponentScale(
    theVehicle: Vehicle,
    theComponent: string,
    base?: string,
): LuaMultiReturn<[number, number, number]>;

/**
 * This function get component visibility for vehicle.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleComponentVisible
 * @param theVehicle The vehicle you wish to get component visibility of.
 * @param theComponent A Vehicle_Components|vehicle component (this is the frame name from the model file of the
 * component you wish to modify)
 * @return returns a bool indicating the visible state of the component.
 * @noSelf
 */
export declare function getVehicleComponentVisible(
    theVehicle: Vehicle,
    theComponent: string,
): boolean;

/**
 * This function is used to get the player in control of the specified vehicle which
 * includes somebody who is trying to enter the drivers seat.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleController
 * @param theVehicle the vehicle you want to get the controller of.
 * @return returns a player object, if there isnt a driver, it will search the trailer chain for the
 * front driver, false otherwise.
 * @noSelf
 */
export declare function getVehicleController(theVehicle: Vehicle): Player;

/**
 * Gets the specified vehicles current gear.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleCurrentGear
 * @param theVehicle the vehicle to get the gear of
 * @return returns the gear if successful, false otherwise.
 * @noSelf
 */
export declare function getVehicleCurrentGear(theVehicle: Vehicle): number;

/**
 * This function tells you how open a door is (the open ratio). Doors include boots/trunks
 * and bonnets on vehicles that have them.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleDoorOpenRatio
 * @param theVehicle The vehicle that you wish to get the door open ratio of.
 * @param door A whole number, 0 (hood), 1 (trunk), 2 (front left), 3 (front right), 4 (rear left), 5
 * (rear right)
 * @return returns a number between 0 and 1 that indicates how open the door is. 0 is closed, and 1
 * is fully open. returns false if invalid arguments are passed.
 * @noSelf
 */
export declare function getVehicleDoorOpenRatio(
    theVehicle: Vehicle,
    door: number,
): number;

/**
 * This function returns the current state of the specifed door on the vehicle.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleDoorState
 * @param theVehicle the vehicle you want to get the door status of.
 * @param door a whole number representing which door to get the status of. Valid values are:
 * @param 0 Hood
 * @param 1 Trunk
 * @param 2 Front left
 * @param 3 Front right
 * @param 4 Rear left
 * @param 5 Rear right
 * @return if successful, one of the following integers will be returned:
 * * 0: shut, intact (also returned if the door does not exist)
 * * 1: ajar, intact
 * * 2: shut, damaged
 * * 3: ajar, damaged
 * * 4: missing
 * @noSelf
 */
export declare function getVehicleDoorState(
    theVehicle: Vehicle,
    door: number,
): number;

/**
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleDummyPosition
 * @param theVehicle The vehicle you want to get the dummy positions from.
 * @param dummy The dummy whose position you want to get.
 * @return returns 3 float|floats indicating the position x, y and z of the vehicles dummy. it
 * returns false otherwise.
 * @noSelf
 */
export declare function getVehicleDummyPosition(
    theVehicle: Vehicle,
    dummy: string,
): LuaMultiReturn<[number, number, number]>;

/**
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleEngineState
 * @param theVehicle : the vehicle you wish to get the engine state of.
 * @return returns true if the vehicles engine is started, false otherwise.
 * @noSelf
 */
export declare function getVehicleEngineState(theVehicle: Vehicle): boolean;

/**
 * Retrieves the current gravity vector of a vehicle. This is the direction in which the
 * vehicle falls, also the cameras of any passengers will be rotated to match it.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleGravity
 * @param theVehicle the vehicle to retrieve the gravity vector of.
 * @return returns the x, y and z components of the gravity vector if successful, false otherwise.
 * @noSelf
 */
export declare function getVehicleGravity(
    theVehicle: Vehicle,
): LuaMultiReturn<[number, number, number]>;

/**
 * This function returns a table of the current vehicle handling data.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleHandling
 * @param theVehicle the vehicle you wish to get the handling data of.
 * @return returns a table containing all the handling data, false otherwise. heres a list of valid
 * table properties and what they return:
 * @noSelf
 */
export declare function getVehicleHandling(theVehicle: Element): LuaTable;

/**
 * This function will get the headlight color of a vehicle.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleHeadLightColor
 * @param theVehicle The vehicle that you wish to set the headlight color of.
 * @return returns three integers for the red, green and blue of the headlight color for the
 * specified vehicle, false if an invalid vehicle was specified.
 * @noSelf
 */
export declare function getVehicleHeadLightColor(
    theVehicle: Vehicle,
): LuaMultiReturn<[number, number, number]>;

/**
 * This function is used to check whether a vehicles landing gear is down or not. Only
 * planes can be used with this function.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleLandingGearDown
 * @param theVehicle the vehicle of which you wish to check the landing gear state.
 * @return returns true if landing gear is down, false if the landing gear is up.<br />
 * returns nil if the vehicle has no landing gear, or is invalid.
 * @noSelf
 */
export declare function getVehicleLandingGearDown(theVehicle: Vehicle): boolean;

/**
 * This function returns the current state of the specified light on the vehicle.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleLightState
 * @param theVehicle the vehicle that you wish to know the light state of.
 * @param light A whole number determining the individual light:
 * @param 0 Front left
 * @param 1 Front right
 * @param 2 Rear right
 * @param 3 Rear left
 * @return returns 0 (working) or 1 (broken)
 * @noSelf
 */
export declare function getVehicleLightState(
    theVehicle: Vehicle,
    light: number,
): number;

/**
 * This function returns the maximum number of passengers that a specified vehicle can hold.
 * Only passenger seats are counted, the driver seat is excluded.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleMaxPassengers
 * @param theVehicle the vehicle that you wish to know the maximum capacity of.
 * OR
 * @param modelID the model id that you wish to know the maximum capacity of.
 * @return returns an int indicating the maximum number of passengers that can enter a vehicle.
 * @noSelf
 */
export declare function getVehicleMaxPassengers(
    theVehicle: Vehicle | number,
): number;

/**
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleModelDummyDefaultPosition
 * @param modelId : The model ID which you want to apply the change to.
 * @param dummy : The dummy whose position you want to get.
 * @return returns 3 float|floats indicating the default position x, y and z of the given dummy. it
 * returns false otherwise.
 * @noSelf
 */
export declare function getVehicleModelDummyDefaultPosition(
    modelId: number,
    dummy: string,
): LuaMultiReturn<[number, number, number]>;

/**
 * This function gets position of the dummies contained in a vehicle model.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleModelDummyPosition
 * @param modelID : The model ID which you want to apply the change to
 * @param dummy : The dummy whose position you want to get
 * @return returns three floats indicating the position x, y and z of given dummy. it returns false
 * otherwise.
 * @noSelf
 */
export declare function getVehicleModelDummyPosition(
    modelID: number,
    dummy: string,
): LuaMultiReturn<[number, number, number]>;

/**
 * This function returns the position of the exhaust fumes the vehicle model emits.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleModelExhaustFumesPosition
 * @param modelID : The vehicle model ID.
 * @return returns the position of the exhaust fumes if everything went fine or false otherwise.
 * @noSelf
 */
export declare function getVehicleModelExhaustFumesPosition(
    modelID: number,
): LuaMultiReturn<[number, number, number]>;

/**
 * This function retrieves the model ID of a vehicle as an integer value from its name.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleModelFromName
 * @param name A string containing the name of the vehicle.
 * @return returns an integer if the name exists, false otherwise.
 * if you use this function on vehicles with shared names, such as police, it will return
 * the earliest occurrence of that vehicles id.
 * @noSelf
 */
export declare function getVehicleModelFromName(name: string): number;

/**
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleModelWheelSize
 * @param vehicleModel : The Vehicle IDs|vehicle model ID.
 * @param wheelGroup : The group of wheels of the vehicle model to retrieve their size value. If not
 * specified, it defaults to all_wheels. The following values are supported:
 * @param front_axle : Represents the wheels in the front axle.
 * @param rear_axle : Represents the wheels in the rear axle.
 * @param all_wheels : Convenience group that returns all the wheel sizes in a table of the following format:
 * <syntaxhighlight lang="lua">{ front_axle = 0.8, rear_axle = 0.7 }</syntaxhighlight>
 * @return returns a decimal number or a table, depending on the specified wheel group. if the
 * specified vehicle model id or wheel group are not valid, an error is raised instead. the
 * meaning of the wheel size values is documented in setvehiclemodelwheelsize.
 * @noSelf
 */
export declare function getVehicleModelWheelSize(
    vehicleModel: number,
    wheelGroup?: string,
): number | LuaTable;

/**
 * This function returns a string containing the name of the vehicle
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleName
 * @param theVehicle the vehicle you want to get the name of.
 * @return returns a string containing the requested vehicles name, or false if the vehicle passed
 * to the function is invalid.
 * @noSelf
 */
export declare function getVehicleName(theVehicle: Vehicle): string;

/**
 * Gets the name of a vehicle by its model ID.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleNameFromModel
 * @param model This is the vehicle model ID. See vehicle IDs to see what values will return names.
 * @return returns the name of the vehicle if the model id was valid, false otherwise.
 * @noSelf
 */
export declare function getVehicleNameFromModel(model: number): string;

/**
 * This function gets the nitro count of the vehicle.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleNitroCount
 * @param theVehicle The vehicle which you want to get a nitro count.
 * @return returns an integer determining the amount of nitro counts of the vehicle, false if there
 * is no nitro in the vehicle.
 * @noSelf
 */
export declare function getVehicleNitroCount(theVehicle: Vehicle): number;

/**
 * This function gets the nitro level of the vehicle.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleNitroLevel
 * @param theVehicle The vehicle, which you want to get a nitro level.
 * @return returns a float determining the nitro level (ranges from 0.0001 to 1.0) of the vehicle,
 * false if there is no nitro in the vehicle.
 * @noSelf
 */
export declare function getVehicleNitroLevel(theVehicle: Vehicle): number;

/**
 * This function gets the player sitting/trying to enter the specified vehicle.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleOccupant
 * @param theVehicle the vehicle of which you wish to retrieve the driver or a passenger.
 * @param seat the seat where the player is sitting (0 for driver, 1+ for passengers).
 * @return returns the player sitting in the vehicle, or false if the seat is unoccupied or doesnt
 * exist.
 * @noSelf
 */
export declare function getVehicleOccupant(
    theVehicle: Vehicle,
    seat?: number,
): Player;

/**
 * This function gets all peds sitting in the specified vehicle.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleOccupants
 * @param theVehicle the vehicle of which you wish to retrieve the occupants.
 * @return returns a table with seat id as an index and the occupant as an element like this:
 * tableseat = occupant
 * returns false if an invalid vehicle was passed or if the vehicle has no seats (like a
 * trailer)
 * <div style=font-weight: bold;background:blue;color:white;padding:2px;
 * padding-left:8px;>counting players in a vehicle</div>
 * <div style=border: 2px solid blue;padding: 5px;>dont use an ipairs loop with the table
 * returned by this function. it will skip the driver, as ipairs starts at 1 and the driver
 * seat is id 0. and if theres an empty seat, ipairs will stop looping. you should use a
 * pairs loop instead.
 * <syntaxhighlight lang=lua>
 * local counter = 0
 * for seat, player in pairs(getvehicleoccupants(pseudovehicle)) do
 * counter = counter + 1
 * end
 * outputdebugstring(players in your vehicle: .. counter)
 * </syntaxhighlight>
 * </div>
 * @noSelf
 */
export declare function getVehicleOccupants(theVehicle: Vehicle): LuaTable;

/**
 * This function is used to find out the current state of the override-lights setting of a
 * vehicle.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleOverrideLights
 * @param theVehicle : the vehicle you wish to retrieve the override lights setting of.
 * @return returns an integer value: 0 (no override), 1 (force off) or 2 (force on).
 * @noSelf
 */
export declare function getVehicleOverrideLights(theVehicle: Vehicle): number;

/**
 * This function gets the current paintjob on the specified vehicle. <br />
 * @see https://wiki.multitheftauto.com/wiki/GetVehiclePaintjob
 * @param theVehicle : the vehicle you wish to get the paintjob of.
 * @return returns an integer representing the current paintjob on the vehicle. <br />
 * * 0: the first paintjob
 * * 1: the second paintjob
 * * 2: the third paintjob
 * * 3: default paintjob (no paintjob)
 * @noSelf
 */
export declare function getVehiclePaintjob(theVehicle: Vehicle): number;

/**
 * This function returns the current state of a specifed panel on the vehicle. A vehicle can
 * have up to 7 panels.
 * @see https://wiki.multitheftauto.com/wiki/GetVehiclePanelState
 * @param theVehicle the vehicle that you wish to know the panel state of.
 * @param panel an integer specifying the panel you want to know the state of. Not every vehicle has
 * every panel. Possible values are:
 * @param 0 Front-left panel
 * @param 1 Front-right panel
 * @param 2 Rear-left panel
 * @param 3 Rear-right panel
 * @param 4 Windscreen
 * @param 5 Front bumper
 * @param 6 Rear bumper
 * @return returns an int indicating the state of the specified the panel. this is a value between 0
 * and 3, with 0 indicating the panel is undamaged and 3 indicating it is very damaged.
 * @noSelf
 */
export declare function getVehiclePanelState(
    theVehicle: Vehicle,
    panel: number,
): number;

/**
 * This function is used to retrieve the text on the number plate of a specified vehicle.
 * @see https://wiki.multitheftauto.com/wiki/GetVehiclePlateText
 * @param theVehicle the vehicle that you wish to retrieve the plate text from.
 * @return returns a string that corresponds to the plate on the text, false if a bad argument was
 * passed or if it is not a vehicle. every vehicle (including planes, boats, etc.) has a
 * numberplate, even if its not visible.
 * @noSelf
 */
export declare function getVehiclePlateText(theVehicle: Vehicle): string;

/**
 * This function get the parameters of a vehicles siren.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleSirenParams
 * @param theVehicle The vehicle to get the siren parameters of
 * @return returns a table with the siren count, siren type and a sub table for the four flags.
 * false otherwise.
 * <syntaxhighlight lang=lua>
 * int   sirenparams.sirencount
 * int   sirenparams.sirentype
 * table sirenparams.flags
 * bool sirenparams.flags360
 * bool sirenparams.flags.doloscheck
 * bool sirenparams.flags.userandomiser
 * bool sirenparams.flags.silent
 * </syntaxhighlight>
 * @noSelf
 */
export declare function getVehicleSirenParams(theVehicle: Vehicle): LuaTable;

/**
 * This function gets the properties of a vehicles sirens.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleSirens
 * @param theVehicle The vehicle to get siren information of.
 * @return if the vehicle is invalid, it returns false. otherwise, returns a table with sub tables
 * containing the properties of each siren point in the following manner:
 * <syntaxhighlight lang=lua>
 * float   sirendatasirenpoint.x
 * float   sirendatasirenpoint.y
 * float   sirendatasirenpoint.z
 * int     sirendatasirenpoint.red
 * int     sirendatasirenpoint.green
 * int     sirendatasirenpoint.blue
 * int     sirendatasirenpoint.alpha
 * int     sirendatasirenpoint.min_alpha
 * </syntaxhighlight>
 * @noSelf
 */
export declare function getVehicleSirens(theVehicle: Vehicle): LuaTable;

/**
 * This function returns whether the sirens are turned on for the specified vehicle.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleSirensOn
 * @param theVehicle The vehicle that will be checked.
 * @return returns true if the sirens are turned on for the specified vehicle, false if the sirens
 * are turned off for the specified vehicle, if the vehicle doesnt have sirens or if invalid
 * arguments are specified.
 * @noSelf
 */
export declare function getVehicleSirensOn(theVehicle: Vehicle): boolean;

/**
 * This function is used to get the vehicle being towed by another.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleTowedByVehicle
 * @param theVehicle : The vehicle you wish to get the towed vehicle from.
 * @return returns the vehicle that thevehicle is towing, false if it isnt towing a vehicle.
 * @noSelf
 */
export declare function getVehicleTowedByVehicle(theVehicle: Vehicle): Vehicle;

/**
 * This function is used to get the vehicle that is towing another.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleTowingVehicle
 * @param theVehicle : the vehicle being towed.
 * @return * the vehicle that thevehicle is being towed by.
 * * false if it isnt being towed.
 * @noSelf
 */
export declare function getVehicleTowingVehicle(theVehicle: Vehicle): Vehicle;

/**
 * This function is used to retrieve a vehicles turning velocity for each axis.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleTurnVelocity
 * @param theVehicle The vehicle you wish to get the turning velocities of.
 * @return returns 3 floats that represent the vehicles turning velocity on the x, y and z axis or
 * false if wrong arguments were passed.
 * @noSelf
 */
export declare function getVehicleTurnVelocity(
    theVehicle: Vehicle,
): LuaMultiReturn<[number, number, number]>;

/**
 * This function gets the position of a vehicles turret, if it has one. Vehicles with
 * turrets include firetrucks and tanks.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleTurretPosition
 * @param turretVehicle : The vehicle whose turret position you want to retrieve. This should be a vehicle with a
 * turret.
 * @return returns two floats for the x (horizontal) and y (vertical) axis rotation respectively.
 * these values are in radians. the function will return 0, 0 if the vehicle is not a
 * vehicle with a turret.
 * @noSelf
 */
export declare function getVehicleTurretPosition(
    turretVehicle: Vehicle,
): LuaMultiReturn<[number, number]>;

/**
 * This function retrieves the type of a vehicle (such as if it is a car or a boat).
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleType
 * @param vehicle The vehicle element to get the type of.
 * '''OR'''
 * @param modelID A vehicle model ID
 * @return returns a string with vehicle type or false if an invalid modelid has been supplied, or
 * an empty string if the vehicle is blocked internally (some trailers).
 * possible strings returned:
 * @noSelf
 */
export declare function getVehicleType(theVehicle: Vehicle): string;

/**
 * This function returns the current upgrade id on the specified vehicles upgrade slot
 * An upgrade slot is a certain type of upgrade (eg: exhaust, spoiler), there are 17 slots
 * (0 to 16).
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleUpgradeOnSlot
 * @param theVehicle : The vehicle whose upgrade you want to retrieve.
 * @param slot : The slot id of the upgrade. (Upgrade list ordered by slot number)
 * @return returns an integer with the upgrade on the slot if correct arguments were passed, false
 * otherwise.
 * @noSelf
 */
export declare function getVehicleUpgradeOnSlot(
    theVehicle: Vehicle,
    slot: number,
): number;

/**
 * This function returns a table of all the upgrades on a specifed vehicle.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleUpgrades
 * @param theVehicle The vehicle you wish to retrieve the upgrades of.
 * @return returns a table of all the upgrades on each slot of a vehicle, which may be empty, or
 * false if a valid vehicle is not passed.
 * @noSelf
 */
export declare function getVehicleUpgrades(theVehicle: Vehicle): LuaTable;

/**
 * This function returns the name of an upgrade slot name (e.g. roof, spoiler).
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleUpgradeSlotName
 * @param slot/upgrade the slot ID or corresponding upgrade ID of which you want the name.
 * @return returns a string with the slot name if a valid slot or upgrade id was given, false
 * otherwise.
 * @noSelf
 */
export declare function getVehicleUpgradeSlotName(slot_upgrade: number): string;

/**
 * This function gets the variant of a specified vehicle. In GTA: San Andreas some vehicles
 * are different; for example the labelling on trucks or the contents of a pick-up truck and
 * the varying types of a motor bike. For the default variant list see: Vehicle variants.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleVariant
 * @param theVehicle The vehicle that you want to get the variant of.
 * @return returns 2 int containing the vehicle variants, false otherwise (the specified vehicle
 * doesnt exist).
 * @noSelf
 */
export declare function getVehicleVariant(
    theVehicle: Vehicle,
): LuaMultiReturn<[number, number]>;

/**
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleWheelFrictionState
 * @param theVehicle The vehicle that you wish to get the wheel friction state.
 * @param wheel The wheel you want to check. (0: front left, 1: rear left, 2: front right, 3: rear right)
 * @return returns a int indicating the wheel friction state. this value can be:
 * * 0: normal friction
 * * 1: slip with acceleration (only for driving wheels)
 * * 2: slip without acceleration
 * * 3: locked wheel (on brake or handbrake).
 * @noSelf
 */
export declare function getVehicleWheelFrictionState(
    theVehicle: Vehicle,
    wheel: number,
): number;

/**
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleWheelScale
 * @param theVehicle : The vehicle to get its wheel scale of.
 * @return returns the wheel scale of the specified vehicle as a decimal number, or an error if the
 * vehicle is invalid. for more information about the returned number, see
 * setvehiclewheelscale.
 * @noSelf
 */
export declare function getVehicleWheelScale(theVehicle: Vehicle): number;

/**
 * This function returns the current states of all the wheels on the vehicle.
 * No vehicles have more than 4 wheels, if they appear to they will be duplicating other
 * wheels.
 * @see https://wiki.multitheftauto.com/wiki/GetVehicleWheelStates
 * @param theVehicle A handle to the vehicle that you wish to know the wheel states of.
 * @return returns 4 ints indicating the states of the wheels (front left, rear left, front right,
 * rear right). these values can be:
 * * 0: inflated
 * * 1: flat
 * * 2: fallen off
 * * 3: collisionless
 * @noSelf
 */
export declare function getVehicleWheelStates(
    theVehicle: Vehicle,
): LuaMultiReturn<[number, number, number, number]>;

/**
 * This function checks if a Element/Vehicle|train is a chain engine (moves the rest of the
 * chains carriages) or not.
 * @see https://wiki.multitheftauto.com/wiki/IsTrainChainEngine
 * @param theTrain a Element/Vehicle|train to check if its a chain engine or not.
 * @return * true if a element/vehicle|train was passed to the function and if its a chain engine.
 * * false otherwise.
 * @noSelf
 */
export declare function isTrainChainEngine(theTrain: Vehicle): boolean;

/**
 * This function will check if a train or tram is derailable.
 * @see https://wiki.multitheftauto.com/wiki/IsTrainDerailable
 * @param vehicleToCheck The vehicle you wish to check.
 * @return returns true if the train is derailable, false otherwise.
 * @noSelf
 */
export declare function isTrainDerailable(vehicleToCheck: Vehicle): boolean;

/**
 * This function will check if a train or tram is derailed.
 * @see https://wiki.multitheftauto.com/wiki/IsTrainDerailed
 * @param vehicleToCheck the vehicle that you wish to check is derailed.
 * @return returns true if the train is derailed, false if the train is still on the rails
 * @noSelf
 */
export declare function isTrainDerailed(vehicleToCheck: Vehicle): boolean;

/**
 * This function allows you to determine whether a vehicle is blown or still intact.
 * @see https://wiki.multitheftauto.com/wiki/IsVehicleBlown
 * @param theVehicle The vehicle that you want to obtain the blown status of.
 * @return returns true if the vehicle specified has blown up, false if it is still intact or the
 * vehicle specified is invalid.
 * @noSelf
 */
export declare function isVehicleBlown(theVehicle: Vehicle): boolean;

/**
 * This function checks if a vehicle is damage proof (set with setVehicleDamageProof).
 * @see https://wiki.multitheftauto.com/wiki/IsVehicleDamageProof
 * @param theVehicle the vehicle whose invincibility status we want to check.
 * @return returns true if the vehicle is damage proof, false if it isnt or if invalid arguments
 * were passed.
 * @noSelf
 */
export declare function isVehicleDamageProof(theVehicle: Vehicle): boolean;

/**
 * This will tell you if a vehicles petrol tank is explodable.
 * @see https://wiki.multitheftauto.com/wiki/IsVehicleFuelTankExplodable
 * @param theVehicle The vehicle that you want to obtain the fuel tank status of.
 * @return returns true if the specified vehicle is valid and its fuel tank is explodable, false
 * otherwise.
 * @noSelf
 */
export declare function isVehicleFuelTankExplodable(
    theVehicle: Vehicle,
): boolean;

/**
 * This will tell you if a vehicle is locked.
 * @see https://wiki.multitheftauto.com/wiki/IsVehicleLocked
 * @param theVehicle The vehicle that you want to obtain the locked status of.
 * @return returns true if the vehicle specified is locked, false if is unlocked or the vehicle
 * specified is invalid.
 * @noSelf
 */
export declare function isVehicleLocked(theVehicle: Vehicle): boolean;

/**
 * This function checks if nitro is activated on the vehicle.
 * @see https://wiki.multitheftauto.com/wiki/IsVehicleNitroActivated
 * @param theVehicle The vehicle, which you want to check for an activation.
 * @return returns true if the nitro is currently activated on the vehicle, false otherwise.
 * @noSelf
 */
export declare function isVehicleNitroActivated(theVehicle: Vehicle): boolean;

/**
 * This function checks if nitro is recharging on the vehicle.
 * @see https://wiki.multitheftauto.com/wiki/IsVehicleNitroRecharging
 * @param theVehicle The vehicle, which you want to check for recharging.
 * @return returns true if the nitro is currently recharging on the vehicle, false otherwise.
 * @noSelf
 */
export declare function isVehicleNitroRecharging(theVehicle: Vehicle): boolean;

/**
 * Checks to see if a vehicle has contact with the ground.
 * @see https://wiki.multitheftauto.com/wiki/IsVehicleOnGround
 * @param theVehicle The vehicle you wish to check.
 * @return returns true if vehicle is on the ground, false if it is not.
 * @noSelf
 */
export declare function isVehicleOnGround(theVehicle: Vehicle): boolean;

/**
 * This function will get the taxi light state of a taxi (vehicle IDs 420 and 438)
 * @see https://wiki.multitheftauto.com/wiki/IsVehicleTaxiLightOn
 * @param taxi The vehicle element of the taxi that you wish to get the light state of.
 * @return returns true if the light is on, false otherwise.
 * @noSelf
 */
export declare function isVehicleTaxiLightOn(taxi: Vehicle): boolean;

/**
 * This function returns a boolean whether the vehicles wheel is on ground (true) or in air
 * (false).
 * @see https://wiki.multitheftauto.com/wiki/IsVehicleWheelOnGround
 * @param theVehicle The vehicle, which you want to check.
 * @param wheel The wheel name or number, see list below:
 * ** <code>"front_left"</code> or 0
 * ** <code>"rear_left"</code> or 1
 * ** <code>"front_right"</code> or 2
 * ** <code>"rear_right"</code> or 3
 * @return returns true if the vehicle wheel is on ground/collided, false otherwise.
 * @noSelf
 */
export declare function isVehicleWheelOnGround(
    theVehicle: Vehicle,
    wheel: string | number,
): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/IsVehicleWindowOpen
 * @param theVehicle The vehicle that you wish to get the window state.
 * @param window An int|integer representing a vehicle window. It can be:
 * @param 0 motorbike shield
 * @param 1 rear window
 * @param 2 right front window
 * @param 3 right back window
 * @param 4 left front (driver) window
 * @param 5 left back window
 * @param 6 windshield
 * @return this function returns a boolean which represents window open state.
 * @noSelf
 */
export declare function isVehicleWindowOpen(
    theVehicle: Vehicle,
    window: number,
): boolean;

/**
 * This function removes an already existing upgrade from the specified vehicle, eg: nos,
 * hydraulics. Defined in San Andreas\data\maps\veh_mods\veh_mods.ide.
 * @see https://wiki.multitheftauto.com/wiki/RemoveVehicleUpgrade
 * @param theVehicle : The element representing the vehicle you wish to remove the upgrade from
 * @param upgrade : The ID of the upgrade you wish to remove.
 * @return returns true if the upgrade was successfully removed from the vehicle, otherwise false.
 * @noSelf
 */
export declare function removeVehicleUpgrade(
    theVehicle: Vehicle,
    upgrade: number,
): boolean;

/**
 * This function reset to default component position for vehicle.
 * @see https://wiki.multitheftauto.com/wiki/ResetVehicleComponentPosition
 * @param theVehicle The vehicle you wish to reset component position.
 * @param theComponent A vehicle component (this is the frame name from the model file of the component you wish
 * to modify)
 * @return returns true if the position of the component was reset, false otherwise.
 * @noSelf
 */
export declare function resetVehicleComponentPosition(
    theVehicle: Vehicle,
    theComponent: string,
): boolean;

/**
 * This function reset to default component rotation for vehicle.
 * @see https://wiki.multitheftauto.com/wiki/ResetVehicleComponentRotation
 * @param theVehicle The vehicle you wish to reset component rotation.
 * @param theComponent A vehicle component (this is the frame name from the model file of the component you wish
 * to modify)
 * @return returns true if the rotation of the component was reset, false otherwise.
 * @noSelf
 */
export declare function resetVehicleComponentRotation(
    theVehicle: Vehicle,
    theComponent: string,
): boolean;

/**
 * This function reset to default component scale for vehicle.
 * @see https://wiki.multitheftauto.com/wiki/ResetVehicleComponentScale
 * @param theVehicle The vehicle you wish to reset component scale.
 * @param theComponent A vehicle component (this is the frame name from the model file of the component you wish
 * to modify)
 * @return returns true if the scale of the component was reset, false otherwise.
 * @noSelf
 */
export declare function resetVehicleComponentScale(
    theVehicle: Vehicle,
    theComponent: string,
): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/ResetVehicleDummyPositions
 * @param theVehicle The vehicle to reset the dummy positions.
 * @return returns true if the dummy positions have been reset, false otherwise.
 * @noSelf
 */
export declare function resetVehicleDummyPositions(
    theVehicle: Vehicle,
): boolean;

/**
 * This function changes the state of the helicopter blades collisions on the specified
 * vehicle.
 * @see https://wiki.multitheftauto.com/wiki/SetHeliBladeCollisionsEnabled
 * @param theVehicle The helicopter that will have the blades collisions set.
 * @param collisions The state of the helicopter blades collisions.
 * @return returns true if the collisions are set for the specified vehicle, false if the collisions
 * cant be set for the specified vehicle, if the vehicle is not a helicopter or if invalid
 * arguments are specified.
 * @noSelf
 */
export declare function setHeliBladeCollisionsEnabled(
    theVehicle: Vehicle,
    collisions: boolean,
): boolean;

/**
 * Sets the rotor speed of a helicopter.
 * @see https://wiki.multitheftauto.com/wiki/SetHelicopterRotorSpeed
 * @param heli the helicopter to adjust the rotor of.
 * @param speed the new rotor speed. Usual values are 0 if the helicopter stands still, or 0.2 if the
 * rotor is fully spun up. Higher values than normal will not affect the helicopters
 * handling. Negative values are allowed and will make the rotor spin in the opposite
 * direction (pushing the helicopter down).
 * @return returns true if successful, false otherwise.
 * @noSelf
 */
export declare function setHelicopterRotorSpeed(
    heli: Vehicle,
    speed: number,
): boolean;

/**
 * This function will set a train or tram as derailable. This is, if it can derail when it
 * goes above the maximum speed.
 * @see https://wiki.multitheftauto.com/wiki/SetTrainDerailable
 * @param derailableVehicle The vehicle that you wish to set derailable.
 * @param derailable whether the train or tram is derailable. True as derailable, False as non-derailable.
 * @return returns true if the state was successfully set, false otherwise.
 * @noSelf
 */
export declare function setTrainDerailable(
    derailableVehicle: Vehicle,
    derailable: boolean,
): boolean;

/**
 * This function will set a train or tram as derailed.
 * @see https://wiki.multitheftauto.com/wiki/SetTrainDerailed
 * @param vehicleToDerail The vehicle that you wish to derail.
 * @param derailed whether the train is derailed.
 * @return returns true if the state was successfully set
 * @noSelf
 */
export declare function setTrainDerailed(
    vehicleToDerail: Vehicle,
    derailed: boolean,
): boolean;

/**
 * Sets the direction in which a train or tram drives over the rails (clockwise or
 * counterclockwise).
 * @see https://wiki.multitheftauto.com/wiki/SetTrainDirection
 * @param train the train whose direction to change.
 * @param clockwise if true, will make the train go clockwise. If false, makes it go counterclockwise.
 * @return returns true if successful, false otherwise.
 * @noSelf
 */
export declare function setTrainDirection(
    train: Vehicle,
    clockwise: boolean,
): boolean;

/**
 * Sets the position the train is currently on the track
 * @see https://wiki.multitheftauto.com/wiki/SetTrainPosition
 * @param train the train of which to set the track
 * @param position the position along the track (0 - 18107 a complete way round)
 * @return returns true if the train position was set, false otherwise.
 * @noSelf
 */
export declare function setTrainPosition(
    train: Vehicle,
    position: number,
): boolean;

/**
 * Sets the on-track speed of a train.
 * @see https://wiki.multitheftauto.com/wiki/SetTrainSpeed
 * @param train the train whose speed to change.
 * @param speed the new on-track speed of the train. A positive value will make it go clockwise, a
 * negative value counter clockwise.
 * @return returns true if successful, false otherwise.
 * @noSelf
 */
export declare function setTrainSpeed(train: Vehicle, speed: number): boolean;

/**
 * This function is used for adjusting the movable parts of a model, for example hydra jets
 * or dump truck tray.
 * This function only works on vehicles with adjustable properties.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleAdjustableProperty
 * @param theVehicle : The vehicle you wish to change the adjustable property of.
 * @param value : A value from 0 between ?. (Set the adjustable value between 0 and N. 0 is the default
 * value. It is possible to force the setting beyond default maximum, for example setting
 * above 5000 on the dump truck (normal max 2500) will cause the tray to be fully vertical.)
 * @return returns true if the adjustable property was set, false otherwise.
 * @noSelf
 */
export declare function setVehicleAdjustableProperty(
    theVehicle: Element,
    value: number,
): boolean;

/**
 * This function will set the color of a vehicle using either a RGB format, or the Vehicle
 * Colors|standard San Andreas color IDs. Vehicles can have up to 3 colors, most of the
 * vehicles have 2 colors only.
 * <syntaxhighlight lang=lua>
 * bool setVehicleColor(vehicle veh, int r1, int g1, int b1, int r2, int g2, int b2, int r3,
 * int g3, int b3, int r4, int g4, int b4)
 * </syntaxhighlight>
 * <syntaxhighlight lang=lua>
 * bool setVehicleColor(vehicle veh, int p1, int p2, int p3, int p4)
 * </syntaxhighlight>
 * *theVehicle: The vehicle that you wish to set the color of.
 * * RGB format:
 * ** r1, g1, b1: Three integers indicating the red, green and blue components of the first
 * (main) color for the vehicle
 * * Palette format:
 * ** p1, p2, p3, p4: Exactly four integers indicating the Vehicle Colors|vehicle color IDs
 * from the palette. <br> If a vehicle has fewer than four colours, you must still provide
 * four colours, otherwise the RGB format will be used.
 * *r2, g2, b2: Three integers indicating the red, green and blue components of the second
 * color for the vehicle
 * *r3, g3, b3: Three integers indicating the red, green and blue components of the third
 * color for the vehicle
 * *r4, g4, b4: Three integers indicating the red, green and blue components of the fourth
 * color for the vehicle
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleColor
 * @return returns true if vehicles color was set, false if an invalid vehicle or invalid colors
 * were specified.
 * @noSelf
 */
export declare function setVehicleColor(
    veh: Vehicle,
    r1: number,
    g1: number,
    b1: number,
    r2?: number,
    g2?: number,
    b2?: number,
    r3?: number,
    g3?: number,
    b3?: number,
    r4?: number,
    g4?: number,
    b4?: number,
): boolean;

/**
 * This function sets the component position of a vehicle.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleComponentPosition
 * @param theVehicle The vehicle you wish to set component position.
 * @param theComponent A Vehicle_Components|vehicle component (this is the frame name from the model file of the
 * component you wish to modify)
 * @param posX The new x position of this component.
 * @param posY The new y position of this component.
 * @param posZ The new z position of this component.
 * @param base : A string representing what the supplied position (posX, posY, posZ) is relative to. It
 * can be one of the following values:
 * @param parent : The position is relative to the parent component.
 * @param root (default if not specified): The position is relative to the root component.
 * @param world : The position is a world position, relative to the worlds center of coordinates.
 * @return returns true if component position was set successfully, false otherwise.
 * @noSelf
 */
export declare function setVehicleComponentPosition(
    theVehicle: Vehicle,
    theComponent: string,
    posX: number,
    posY: number,
    posZ: number,
    base?: string,
): boolean;

/**
 * This function sets the component rotation of a vehicle.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleComponentRotation
 * @param theVehicle The vehicle you wish to set component rotation of.
 * @param theComponent A Vehicle_Components|vehicle component (this is the frame name from the model file of the
 * component you wish to modify)
 * @param rotX The components rotation around the x axis in degrees.
 * @param rotY The components rotation around the y axis in degrees.
 * @param rotZ The components rotation around the z axis in degrees.
 * @param base A string representing what the supplied rotation (rotX, rotY, rotZ) is relative to. It
 * can be one of the following values:
 * @param parent (default if not specified): The rotation is relative to the parent component.
 * @param root : The rotation is relative to the root component.
 * @param world : The rotation is a world rotation, relative to the worlds coordinates axes.
 * @return returns true if the component rotation was set successfully, false otherwise.
 * @noSelf
 */
export declare function setVehicleComponentRotation(
    theVehicle: Vehicle,
    theComponent: string,
    rotX: number,
    rotY: number,
    rotZ: number,
    base?: string,
): boolean;

/**
 * This function sets the component scale of a vehicle.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleComponentScale
 * @param theVehicle The vehicle you wish to set component scale.
 * @param theComponent A Vehicle_Components|vehicle component (this is the frame name from the model file of the
 * component you wish to modify)
 * @param scaleX The new x scale of this component.
 * @param scaleY The new y scale of this component.
 * @param scaleZ The new z scale of this component.
 * @param base : A string representing what the supplied scale (scaleX, scaleY, scaleZ) is relative to.
 * It can be one of the following values:
 * @param parent : The scale is relative to the parent component.
 * @param root (default if not specified): The scale is relative to the root component.
 * @param world : The scale is a world scale, relative to the worlds center of coordinates.
 * @return returns true if component scale was set successfully, false otherwise.
 * @noSelf
 */
export declare function setVehicleComponentScale(
    theVehicle: Vehicle,
    theComponent: string,
    scaleX: number,
    scaleY: number,
    scaleZ: number,
    base?: string,
): boolean;

/**
 * This function sets component visibility for vehicle.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleComponentVisible
 * @param theVehicle The vehicle you wish to set component visibility of.
 * @param theComponent A Vehicle_Components|vehicle component (this is the components frame name (also called
 * dummy) from the vehicle models DFF file of which you want to manipulate components)
 * @param visible a bool which determines if the component should be visible
 * @return returns a bool indicating if the visiblity was changed successfully.
 * @noSelf
 */
export declare function setVehicleComponentVisible(
    theVehicle: Vehicle,
    theComponent: string,
    visible: boolean,
): boolean;

/**
 * This functions makes a vehicle damage proof, so it wont take damage from bullets, hits,
 * explosions or fire. A damage proofs vehicle health can still be changed via script.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleDamageProof
 * @param theVehicle The vehicle you wish to make damage proof.
 * @param damageProof true is damage proof, false is damageable.
 * @return returns true if the vehicle was set damage proof succesfully, false if the arguments are
 * invalid or it failed.
 * @noSelf
 */
export declare function setVehicleDamageProof(
    theVehicle: Vehicle,
    damageProof: boolean,
): boolean;

/**
 * This function sets the dirt level on a vehicle.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleDirtLevel
 * @param theVehicle The vehicle that you want to set the dirt level from
 * @param dirtLevel The dirt level
 * @return returns true if the dirt level was set on the vehicle, false if the dirt level was not
 * set or if invalid arguments are specified.
 * @noSelf
 */
export declare function setVehicleDirtLevel(
    theVehicle: Vehicle,
    dirtLevel: number,
): boolean;

/**
 * This function sets how much a vehicles door is open. Doors include the boot/trunk and the
 * bonnet of the vehicle.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleDoorOpenRatio
 * @param theVehicle The vehicle that you wish to change the door open ratio of.
 * @param door A whole number, 0 (hood), 1 (trunk), 2 (front left), 3 (front right), 4 (rear left), 5
 * (rear right)
 * @param ratio The ratio value, ranging from 0 (fully closed) to 1 (fully open).
 * @param time The number of milliseconds the door should take to reach the value you have specified. A
 * value of 0 will change the door open ratio instantly.
 * @return returns true if the door open ratio was successfully set, false if invalid arguments are
 * passed.
 * @noSelf
 */
export declare function setVehicleDoorOpenRatio(
    theVehicle: Vehicle,
    door: number,
    ratio: number,
    time?: number,
): boolean;

/**
 * This function sets the state of the specified door on a vehicle.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleDoorState
 * @param theVehicle The vehicle that you wish to change the door state of.
 * @param door An integer representing which door to set the state of. Valid values are:
 * @param 0 Shut, intact (aka Closed, undamaged)
 * @param 1 Ajar, intact (aka Slightly open, undamaged)
 * @param 2 Shut, damaged (aka Closed, damaged)
 * @param 3 Ajar, damaged (aka Slightly open, damaged)
 * @param 4 Missing
 * @param 5 Rear right
 * @param state An integer representing the state to set the door to. Valid values are:
 * @param spawnFlyingComponent A boolean, if set to true, spawns flying doors etc. if you remove a component with
 * <nowiki>state == 4</nowiki>.
 * @return returns true if the door state was successfully set, false otherwise.
 * @noSelf
 */
export declare function setVehicleDoorState(
    theVehicle: Vehicle,
    door: number,
    state: number,
): boolean;

/**
 * This function makes a vehicles doors undamageable, so they wont fall off when theyre hit.
 * Note that the vehicle has to be locked using setVehicleLocked for this setting to have
 * any effect.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleDoorsUndamageable
 * @param theVehicle The vehicle of which you wish to set the car door damageability.
 * @param state A boolean denoting whether the vehicles doors are undamageable (true) or damageable
 * (false).
 * @return returns true if the damageability state was successfully changed, false if invalid
 * arguments were passed.
 * @noSelf
 */
export declare function setVehicleDoorsUndamageable(
    theVehicle: Vehicle,
    state: boolean,
): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleDummyPosition
 * @param theVehicle The vehicle you want to set the dummy position for.
 * @param dummy The dummy whose position you want to set.
 * @param x , y, z The new dummy position.
 * @return returns true if the dummy position has been successfully set, false otherwise.
 * @noSelf
 */
export declare function setVehicleDummyPosition(
    theVehicle: Vehicle,
    dummy: string,
    x: number,
    y: number,
    z: number,
): boolean;

/**
 * This function turns a vehicles engine on or off. Note that the engine will always be
 * turned on when someone enters the driver seat, unless you override that behaviour with
 * scripts.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleEngineState
 * @param theVehicle : The vehicle you wish to change the engine state of.
 * @param engineState : A boolean value representing whether the engine will be turned on (true) or off (false).
 * @return returns true if the vehicles engine state was successfully changed, false otherwise.
 * @noSelf
 */
export declare function setVehicleEngineState(
    theVehicle: Vehicle,
    engineState: boolean,
): boolean;

/**
 * This function changes the explodable state of a vehicles fuel tank, which toggles the
 * ability to blow the vehicle up by shooting the tank. This function will have no effect on
 * vehicles with tanks that cannot be shot in single player.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleFuelTankExplodable
 * @param theVehicle : The vehicle you wish to change the fuel tank explodable state of.
 * @param explodable : A boolean value representing whether or not the fuel tank will be explodable.
 * @return returns true if the vehicles fuel tank explodable state was successfully changed, false
 * otherwise.
 * @noSelf
 */
export declare function setVehicleFuelTankExplodable(
    theVehicle: Vehicle,
    explodable: boolean,
): boolean;

/**
 * Sets the gravity vector of a vehicle. The vehicle will fall in this direction, and the
 * camera of any occupants will also be rotated to match it. Can be used for e.g. driving on
 * walls or upside down on ceilings.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleGravity
 * @param theVehicle the vehicle of which to change the gravity.
 * @param x, y, z the components of the new gravity vector. If this vector has length 1, the strength of
 * the gravity will be same as the global gravity for other entities. If it is 2, it will be
 * twice as strong, etc.
 * @return returns true if successful, false otherwise.
 * @noSelf
 */
export declare function setVehicleGravity(
    theVehicle: Vehicle,
    x: number,
    y: number,
    z: number,
): boolean;

/**
 * This function is used to change the handling data of a vehicle.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleHandling
 * @param theVehicle The vehicle you wish to set the handling of.
 * @param property The property you wish to set the handling of the vehicle to.
 * Additionally, helicopters are not affected by custom handling. The vehicle-on-wheels
 * handling does not affect planes when they are on the ground either. For more information
 * on this, see [https://github.com/multitheftauto/mtasa-blue/issues/2426 issue 2426]}}
 * @param value The value of the property you wish to set the handling of the vehicle to.
 * @return returns true if the handling was set successfully, false otherwise. see below a list of
 * valid properties and their required values:
 * @noSelf
 */
export declare function setVehicleHandling(
    theVehicle: Element,
    property: string,
    value: unknown,
): boolean;

/**
 * This function will set the headlight color of a vehicle. valid Red Green and Blue
 * arguments range from 0-255
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleHeadLightColor
 * @param theVehicle The vehicle that you wish to set the headlight color of.
 * @param red An integer indicating the amount of red for the vehicles headlights
 * @param green An integer indicating the amount of green for the vehicles headlights
 * @param blue An integer indicating the amount of blue for the vehicles headlights
 * @return returns true if vehicles headlight color was set, false if an invalid vehicle or invalid
 * color ranges were specified for red,green or blue.
 * @noSelf
 */
export declare function setVehicleHeadLightColor(
    theVehicle: Vehicle,
    red: number,
    green: number,
    blue: number,
): boolean;

/**
 * This function is used to set the landing gear state of certain vehicles.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleLandingGearDown
 * @param theVehicle The vehicle of which you wish to set the landing gear state.
 * @param gearState A bool representing the state of the landing gear.  true represents a collapsed landing
 * gear, while false represents a disabled landing gear.
 * @return returns true if the landing gear was set successfully, false otherwise.
 * @noSelf
 */
export declare function setVehicleLandingGearDown(
    theVehicle: Vehicle,
    gearState: boolean,
): boolean;

/**
 * This function sets the state of the light on the vehicle.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleLightState
 * @param theVehicle A handle to the vehicle that you wish to change the light state of.
 * @param light A whole number determining the individual light:
 * @param 0 Front left
 * @param 1 Front right
 * @param 2 Rear right
 * @param 3 Rear left
 * @param state A whole number determining the new state of the light. 0 represents normal lights, and 1
 * represents broken lights.
 * Returns ''true'' if the light state was set successfully, ''false'' if invalid arguments
 * were passed to the function.
 * @return returns true if the light state was set successfully, false if invalid arguments were
 * passed to the function.
 * @noSelf
 */
export declare function setVehicleLightState(
    theVehicle: Vehicle,
    light: number,
    state: number,
): boolean;

/**
 * This function can be used to set the vehicles doors to be locked or unlocked.  Locking a
 * vehicle restricts access to the vehicle.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleLocked
 * @param theVehicle The vehicle which you wish to change the lock status of
 * @param locked Boolean for the status you wish to set. Set true to lock, false to unlock
 * @return returns true if the operation was successful, false otherwise.
 * @noSelf
 */
export declare function setVehicleLocked(
    theVehicle: Vehicle,
    locked: boolean,
): boolean;

/**
 * This function sets the position of the dummies contained in a vehicle model. Use
 * setVehicleComponentPosition to adjust the vehicle component positions.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleModelDummyPosition
 * @param modelID : The model ID which you want to apply the change to
 * @param dummy : The dummy whose position you want to change
 * @param posX , posY, posZ: The desired position
 * @return returns true if everything went fine, false otherwise.
 * @noSelf
 */
export declare function setVehicleModelDummyPosition(
    modelID: number,
    dummy: string,
    x: number,
    y: number,
    z: number,
): boolean;

/**
 * This function sets the position of the exhaust fumes the vehicle model emits. Use
 * setVehicleComponentPosition to adjust the exhaust position.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleModelExhaustFumesPosition
 * @param modelID : The model ID which you want to apply the change to
 * @param posX , posY, posZ: The desired position
 * @return returns true if everything went fine, false otherwise.
 * @noSelf
 */
export declare function setVehicleModelExhaustFumesPosition(
    modelID: number,
    posX: number,
    posY: number,
    posZ: number,
): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleModelWheelSize
 * @param vehicleModel : The Vehicle IDs|vehicle model ID.
 * @param wheelGroup : The group of wheels of the vehicle model that will have its size set by this function.
 * The following values are supported:
 * @param front_axle : Represents the wheels in the front axle. The default value for this group is read by
 * GTA from the WheelScale_Front field of the vehicles.ide data file.
 * @param rear_axle : Represents the wheels in the rear axle. The default value for this group is read by GTA
 * from the WheelScale_Rear field of the vehicles.ide data file.
 * @param all_wheels : Convenience group that contains the other wheel groups: front_axle and rear_axle.
 * @param wheelSize : The wheel size value to set. Default GTA values for automobiles usually are around 0.7.
 * It must be greater than 0.
 * @return returns true if the size for the specified wheel group and vehicle model has been set
 * successfully, or an error if some parameter is invalid.
 * @noSelf
 */
export declare function setVehicleModelWheelSize(
    vehicleModel: number,
    wheelGroup: string,
    wheelSize: number,
): boolean;

/**
 * This function activates or deactivates the nitro on the specified vehicle, like if a
 * player pressed the button for activating nitro.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleNitroActivated
 * @param theVehicle The vehicle to activate or deactivate the nitro on.
 * @param state true if you want to activate the nitro, false if you want to disable it.
 * @return returns true if the nitro activation state was modified successfully, false otherwise.
 * @noSelf
 */
export declare function setVehicleNitroActivated(
    theVehicle: Vehicle,
    state: boolean,
): boolean;

/**
 * This function sets how many times a player can activate the nitro on a specified vehicle.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleNitroCount
 * @param theVehicle : the vehicle which you want to modify how many times a player can use its nitro.
 * @param count : how many times should the player be able to use the nitro of this vehicle (from 0-100
 * times; 0 means that it cant be used and 101 means that it can be used infinite times).
 * @return returns true if the nitro count was set successfully to the vehicle, false otherwise.
 * @noSelf
 */
export declare function setVehicleNitroCount(
    theVehicle: Vehicle,
    count: number,
): boolean;

/**
 * This function sets the nitro level of the vehicle.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleNitroLevel
 * @param theVehicle The vehicle, which you want to set.
 * @param level Nitro level you want to set (ranges from 0.0001 to 1.0).
 * @return returns true if the nitro level was set successfully to the vehicle, false otherwise.
 * @noSelf
 */
export declare function setVehicleNitroLevel(
    theVehicle: Vehicle,
    level: number,
): boolean;

/**
 * This function changes the light overriding setting on a vehicle.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleOverrideLights
 * @param theVehicle : The vehicle you wish to change the override lights setting of.
 * @param value : A whole number representing the state of the lights:
 * @param 0 : No override, lights are set to default.
 * @param 1 : Lights are forced off.
 * @param 2 : Lights are forced on.
 * @return returns true if the vehicles lights setting was changed. otherwise false.
 * @noSelf
 */
export declare function setVehicleOverrideLights(
    theVehicle: Vehicle,
    value: number,
): boolean;

/**
 * This function changes the paintjob on the specified vehicle. <br/>
 * See Paintjob|paintjob for list of supported vehicles.
 * @see https://wiki.multitheftauto.com/wiki/SetVehiclePaintjob
 * @param theVehicle : The vehicle you wish to change the paintjob of.
 * @param value : A whole number representing the new paintjob id. Ranges from 0 up to 3.
 * @return returns true if the vehicles paintjob was changed. otherwise false.
 * @noSelf
 */
export declare function setVehiclePaintjob(
    theVehicle: Vehicle,
    value: number,
): boolean;

/**
 * This function allows you to change the state of one of the six panels vehicles can have.
 * When executed on the server-side resources, the damage will be synched for all players,
 * whereas the change is only client-side if the function is used in a client resource.
 * @see https://wiki.multitheftauto.com/wiki/SetVehiclePanelState
 * @param theVehicle The vehicle you would like to modify the panel of.
 * @param panelID An ID specifying the part of the vehicle. Possible values are:
 * @param Cars
 * @param 0 Engine Smoke (left engine for a Nevada or a Beagle)
 * @param 1 Engine Smoke (right engine for a Nevada or a Beagle)
 * @param 2 Rudder
 * @param 3 Elevators
 * @param 4 Ailerons
 * @param 5 Unknown
 * @param 6 Unknown
 * ''NOTE:'' Settings are not applicable for all vehicles of these types, for instance panel
 * 0 effects a Dodo, but does nothing to a hydra.
 * @param Planes
 * @param state How damaged the part is on the scale of 0 to 3, with 0 being undamaged and 3 being very
 * damaged. How this is manifested depends on the panel and the vehicle.
 * @return returns true if the panel state has been updated, false otherwise
 * @noSelf
 */
export declare function setVehiclePanelState(
    theVehicle: Vehicle,
    panelID: number,
    state: number,
): boolean;

/**
 * This function can be used to set the numberplate text of a vehicle.
 * @see https://wiki.multitheftauto.com/wiki/SetVehiclePlateText
 * @param theVehicle the vehicle whose numberplate you want to change.
 * @param numberplate a string that will go on the number plate of the vehicle (max 8 characters).
 * @return returns true if the numberplate was changed successfully, or false if invalid arguments
 * were passed
 * @noSelf
 */
export declare function setVehiclePlateText(
    theVehicle: Element,
    numberplate: string,
): boolean;

/**
 * This function changes the properties of a vehicles siren point.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleSirens
 * @param theVehicle The vehicle to modify
 * @param sirenPoint The siren point to modify
 * @param posX The x position of this siren point from the center of the vehicle
 * @param posY The y position of this siren point from the center of the vehicle
 * @param posZ The z position of this siren point from the center of the vehicle
 * @param red The amount of red from 0 to 255
 * @param green The amount of green from 0 to 255
 * @param blue The amount of blue from 0 to 255
 * @param alpha The alpha of the siren from 0 to 255
 * @param minAlpha The minimum alpha of the light during day time
 * @return returns true if the siren point was successfully changed on the vehicle, false otherwise.
 * @noSelf
 */
export declare function setVehicleSirens(
    theVehicle: Vehicle,
    sirenPoint: number,
    posX: number,
    posY: number,
    posZ: number,
    red: number,
    green: number,
    blue: number,
    alpha?: number,
    minAlpha?: number,
): boolean;

/**
 * This function changes the state of the sirens on the specified vehicle.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleSirensOn
 * @param theVehicle The vehicle that will have the sirens set
 * @param sirensOn The state to set the sirens to
 * @return returns true if the sirens are set for the specified vehicle, false if the sirens cant be
 * set for the specified vehicle, if the vehicle doesnt have sirens or if invalid arguments
 * are specified.
 * @noSelf
 */
export declare function setVehicleSirensOn(
    theVehicle: Vehicle,
    sirensOn: boolean,
): boolean;

/**
 * This function will set the taxi light on in a taxi (vehicle IDs 420 and 438)
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleTaxiLightOn
 * @param taxi The vehicle element of the taxi that you wish to turn the light on.
 * @param LightState whether the light is on. True for on, False for off.
 * @return returns true if the state was successfully set, false otherwise.
 * @noSelf
 */
export declare function setVehicleTaxiLightOn(
    taxi: Vehicle,
    LightState: boolean,
): boolean;

/**
 * Sets the angular velocity of a vehicle. Basically applies a spin to it.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleTurnVelocity
 * @param theVehicle The vehicle to apply the spin to.
 * @param rx velocity around the X axis
 * @param ry velocity around the Y axis
 * @param rz velocity around the Z axis
 * @return returns true if it was succesful, false otherwise.
 * @noSelf
 */
export declare function setVehicleTurnVelocity(
    theVehicle: Vehicle,
    rx: number,
    ry: number,
    rz: number,
): boolean;

/**
 * This function sets the position of a vehicles turret, if it has one. This can be used to
 * influence the turrets rotation, so it doesnt follow the camera. Vehicles with turrets
 * include firetrucks and tanks.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleTurretPosition
 * @param turretVehicle : The vehicle whose turret position you want to retrieve. This should be a vehicle with a
 * turret.
 * @param positionX : The horizontal position of the turret. In radians
 * @param positionY : The vertical position of the turret. In radians
 * @return returns a true if a valid vehicle element and valid positions were passed, false
 * otherwise.
 * @noSelf
 */
export declare function setVehicleTurretPosition(
    turretVehicle: Vehicle,
    positionX: number,
    positionY: number,
): boolean;

/**
 * This function sets the variant of a specified vehicle. In GTA: San Andreas some vehicles
 * are different; for example the labelling on trucks or the contents of a pick-up truck and
 * the varying types of a motor bike. For the default variant list see: Vehicle variants.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleVariant
 * @param theVehicle The vehicle that you want to set the variant.
 * @param variant1 : An integer for the first variant. See Vehicle variants.
 * @param variant2 : An integer for the second variant. See Vehicle variants.
 * @return returns true if the vehicle variants were successfully set, false otherwise (the
 * specified vehicle doesnt exist or the specified variants are invalid).
 * @noSelf
 */
export declare function setVehicleVariant(
    theVehicle: Vehicle,
    variant1?: number,
    variant2?: number,
): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleWheelScale
 * @param theVehicle : The vehicle whose wheel scale you wish to modify.
 * @param wheelScale : The wheel scale value to set.
 * @return returns true if the wheel scale has been set successfully, or an error if some parameter
 * is invalid.
 * @noSelf
 */
export declare function setVehicleWheelScale(
    theVehicle: Vehicle,
    wheelScale: number,
): boolean;

/**
 * This function sets the state of wheels on the vehicle.
 * Internally, no vehicles have more than 4 wheels. If they appear to, they will be
 * duplicating other wheels.
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleWheelStates
 * @param theVehicle A handle to the vehicle that you wish to change the wheel states of.
 * @param frontLeft A whole number representing the wheel state (-1 for no change)
 * @param rearLeft A whole number representing the wheel state (-1 for no change)
 * @param frontRight A whole number representing the wheel state (-1 for no change)
 * @param rearRight A whole number representing the wheel state (-1 for no change)
 * @return returns a boolean value true or false that tells you if it was successful or not.
 * @noSelf
 */
export declare function setVehicleWheelStates(
    theVehicle: Vehicle,
    frontLeft: number,
    rearLeft?: number,
    frontRight?: number,
    rearRight?: number,
): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/SetVehicleWindowOpen
 * @param theVehicle The vehicle that you wish to change the window state.
 * @param window An integer representing window.
 * @param 0 motorbike shield
 * @param 1 rear window
 * @param 2 right front window
 * @param 3 right back window
 * @param 4 left front (driver) window
 * @param 5 left back window
 * @param 6 windshield
 * @param open Boolean which represent window open state.
 * @return * when the vehicle is not streamed in:
 * ** if the window id does lie within the acceptable list of values, it will return true
 * ** if the window id does not lie within the acceptable list of values, it will return
 * false
 * * when the vehicle is streamed in:
 * ** if the vehicle has the window, it will return true
 * ** if the vehicle does not have the window, it will return false
 * @noSelf
 */
export declare function setVehicleWindowOpen(
    theVehicle: Vehicle,
    window: number,
    open: boolean,
): boolean;
