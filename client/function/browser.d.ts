// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

import {
    ProgressBar,
    Gui,
    EngineTXD,
    EngineDFF,
    EngineCOL,
    EngineIFP,
    PrimitiveType,
    DxTexture,
    ObjectGroup,
    Browser,
    Light,
    Effect,
    Searchlight,
    Weapon,
    GuiBrowser,
    GuiMemo,
    GuiElement,
    GuiEdit,
    GuiScrollBar,
    GuiWindow,
    Projectile,
    Material,
    Svg,
    SvgCallback,
    Userdata,
    TextItem,
    Pickup,
    Request,
    Player,
    Blip,
    ColShape,
    Element,
    Ped,
    Resource,
    Team,
    Vehicle,
    XmlNode,
    File,
    Marker,
    MTASAObject,
    RadarArea,
    Water,
    Timer,
    HandleFunction,
    TimerCallbackFunction,
    FetchRemoteCallback,
    GenericEventHandler,
    CommandHandler,
    BindKeyCallback,
    BindKeyCallbackVarArgs,
    ControlName,
    KeyName,
    KeyState,
    Vector2,
    Vector3,
    Vector4,
    Matrix,
} from '../structure';

/**
 * This function checks if the browser can return to the previous page.
 * @see https://wiki.multitheftauto.com/wiki/CanBrowserNavigateBack
 * @param webBrowser The browser you want to check for a previous page.
 * @return returns true if the browser can navigate back, false otherwise.
 * @noSelf
 */
export declare function canBrowserNavigateBack(webBrowser: Browser): boolean;

/**
 * This function checks if the browser can go to the next page.
 * @see https://wiki.multitheftauto.com/wiki/CanBrowserNavigateForward
 * @param webBrowser The browser you want check for a next page.
 * @return returns true if the browser can go to the next page, false otherwise.
 * @noSelf
 */
export declare function canBrowserNavigateForward(webBrowser: Browser): boolean;

/**
 * This function creates a new web Element/Browser|browser element.
 * @see https://wiki.multitheftauto.com/wiki/CreateBrowser
 * @param width The browsers native width. This should be greater than or equal to 1.
 * @param height The browsers native height. This should be greater than or equal to 1.
 * @param isLocal Sets whether the browser can only show local content or content from the internet (see
 * examples for more information)
 * @param transparent true if you want the browser transparent, false for opaque.
 * @return returns a texture of the browser if it was created successfully, false otherwise. returns
 * also false, if the user disabled remote pages and islocal was set to false.
 * @noSelf
 */
export declare function createBrowser(
    width: number,
    height: number,
    isLocal: boolean,
    transparent?: boolean,
): Element;

/**
 * This function executes a Javascript string to the specified Element/Browser|browser.
 * Works only with local browsers.
 * @see https://wiki.multitheftauto.com/wiki/ExecuteBrowserJavascript
 * @param webBrowser The web browser which will execute the Javascript code
 * @param jsCode The Javascript code string
 * @return returns true if executing javascript is allowed in the current context, false otherwise.
 * @noSelf
 */
export declare function executeBrowserJavascript(
    webBrowser: Browser,
    jsCode: string,
): boolean;

/**
 * This function will attempt to focus the Element/Browser|browser or unfocus all browsers.
 * The browser that is focused will retrieve keyboard input.
 * @see https://wiki.multitheftauto.com/wiki/FocusBrowser
 * @param webBrowser The web browser to be focused - if this is nil, it will unfocus all browsers.
 * @return returns true if the browser was focused or if nil was passed, false if it failed to focus
 * or the browser does not exist.
 * @noSelf
 */
export declare function focusBrowser(webBrowser: Browser): boolean;

/**
 * This function gets a given property of a specified browser.
 * @see https://wiki.multitheftauto.com/wiki/GetBrowserProperty
 * @param theBrowser browser element to get the property value of
 * @param key The browser property key. It can be:
 * @param mobile Surfing the web as mobile
 * @return returns the value if the property was successfully found, false otherwise.
 * @noSelf
 */
export declare function getBrowserProperty(
    theBrowser: Browser,
    key: string,
): boolean;

/**
 * This function returns a table containing the browser settings.
 * @see https://wiki.multitheftauto.com/wiki/GetBrowserSettings
 * @return a table having the following keys:
 * * remoteenabled: true if remote websites are enabled, false otherwise
 * * remotejavascript: true if javascript is enabled on remote websites, false otherwise
 * * pluginsenabled: true if plugins such as flash, silverlight (but not java) are enabled,
 * false otherwise. this setting is false by default.
 * @noSelf
 */
export declare function getBrowserSettings(): LuaTable;

/**
 * This function can be used to retrieve the source code of a website (asynchronously). The
 * size of the source code is limited to 2 MiB (remaining bytes are cut).
 * @see https://wiki.multitheftauto.com/wiki/GetBrowserSource
 * @param webBrowser The browser element you want to get the source of
 * @param callback a callback function with syntax as described below
 * <syntaxhighlight lang="lua">
 * function ( string code )
 * </syntaxhighlight>
 * @return returns true if valid arguments have been passed, false otherwise.
 * @noSelf
 */
export declare function getBrowserSource(
    webBrowser: Browser,
    callback: HandleFunction,
): boolean;

/**
 * This function returns the title of the passed Element/Browser|browser.
 * @see https://wiki.multitheftauto.com/wiki/GetBrowserTitle
 * @param webBrowser The browser
 * @return returns the title as a string. returns false if invalid arguments were passed.
 * @noSelf
 */
export declare function getBrowserTitle(webBrowser: Browser): string;

/**
 * This function returns the URL of the specified Element/Browser|browser.
 * @see https://wiki.multitheftauto.com/wiki/GetBrowserURL
 * @param webBrowser The browser
 * @return returns the web browser url.
 * @noSelf
 */
export declare function getBrowserURL(webBrowser: Browser): string;

/**
 * This function injects a mouse click (state: down).
 * @see https://wiki.multitheftauto.com/wiki/InjectBrowserMouseDown
 * @param webBrowser The web browser
 * @param mouseButton The mouse button (Possible values: left, middle, right)
 * @return returns true if the click was successfully injected, false otherwise.
 * @noSelf
 */
export declare function injectBrowserMouseDown(
    webBrowser: Browser,
    mouseButton: string,
): boolean;

/**
 * This function injects a mouse movement.
 * @see https://wiki.multitheftauto.com/wiki/InjectBrowserMouseMove
 * @param webBrowser The browser which will retrieve the mouse movement
 * @param posX Absolute X screen coordinate
 * @param posY Absolute Y screen coordinate
 * @return returns true if the movement was injected successfully, false otherwise.
 * @noSelf
 */
export declare function injectBrowserMouseMove(
    webBrowser: Browser,
    posX: number,
    posY: number,
): boolean;

/**
 * This function injects a mouse click (state: up).
 * @see https://wiki.multitheftauto.com/wiki/InjectBrowserMouseUp
 * @param webBrowser The web browser
 * @param mouseButton The mouse button (Possible values: left, middle, right)
 * @return returns true if the click was successfully injected, false otherwise.
 * @noSelf
 */
export declare function injectBrowserMouseUp(
    webBrowser: Browser,
    mouseButton: string,
): boolean;

/**
 * This function injects mouse wheel events.
 * @see https://wiki.multitheftauto.com/wiki/InjectBrowserMouseWheel
 * @param webBrowser The web browser
 * @param verticalScroll : Amount of units you want the browser to scroll along the Y-axe.
 * @param horizontalScroll : Amount of units you want the browser to scroll along the X-axe.
 * @return returns true if the mouse action was successfully injected, false otherwise.
 * @noSelf
 */
export declare function injectBrowserMouseWheel(
    webBrowser: Browser,
    verticalScroll: number,
    horizontalScroll: number,
): boolean;

/**
 * This function checks if the specified URL is blocked from being loaded.
 * @see https://wiki.multitheftauto.com/wiki/IsBrowserDomainBlocked
 * @param address A website URL
 * @param isURL true if address should be parsed as URL, false otherwise.
 * @return returns false if the url is able to be loaded, true if it is blocked and nil if an
 * invalid domain/url was passed.
 * @noSelf
 */
export declare function isBrowserDomainBlocked(
    address: string,
    isURL?: boolean,
): boolean;

/**
 * This function checks if a browser is focused.
 * @see https://wiki.multitheftauto.com/wiki/IsBrowserFocused
 * @param webBrowser The browser
 * @return returns true if the browser is focused, false otherwise and nil if invalid arguments were
 * passed.
 * @noSelf
 */
export declare function isBrowserFocused(webBrowser: Browser): boolean;

/**
 * This function checks if a browser is currently loading a website.
 * @see https://wiki.multitheftauto.com/wiki/IsBrowserLoading
 * @param webBrowser The browser
 * @return returns true if the browser is loading a website, false otherwise and nil if invalid
 * arguments were passed.
 * @noSelf
 */
export declare function isBrowserLoading(webBrowser: Browser): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/IsBrowserRenderingPaused
 * @param webBrowser The browser element to get the rendering state of.
 * @return returns true if the browser rendering is paused, false otherwise.
 * @noSelf
 */
export declare function isBrowserRenderingPaused(webBrowser: Browser): boolean;

/**
 * This function loads the specified URL.
 * @see https://wiki.multitheftauto.com/wiki/LoadBrowserURL
 * @param webBrowser The Element/Browser|browser element which will load the URL
 * @param url The url you want to load. It can either contain a remote website (http:// prefix) or a
 * website stored within a local resource (http://mta/local/gui.html for example, see
 * Local_Scheme_Handler|Local Scheme Handler for details).
 * @param postData The post data passed to the website. Its content type can be any type (e.g. JSON) if
 * urlEncoded is set to false
 * @param urlEncoded If set to true, it will be available f.e. in PHPs $_POST variable (the content type is:
 * application/x-www-form-urlencoded)
 * @return returns true if the url was successfully loaded.
 * @noSelf
 */
export declare function loadBrowserURL(
    webBrowser: Browser,
    url: string,
    postData?: string,
    urlEncoded?: boolean,
): boolean;

/**
 * Returns the browser to the previous page.
 * @see https://wiki.multitheftauto.com/wiki/NavigateBrowserBack
 * @param webBrowser The browser that you want return to the previous page.
 * @return returns true if the browser has returned to the previous page, false otherwise.
 * @noSelf
 */
export declare function navigateBrowserBack(webBrowser: Browser): boolean;

/**
 * This function takes the browser to the next page.
 * @see https://wiki.multitheftauto.com/wiki/NavigateBrowserForward
 * @param webBrowser The browser that you want to take to the next page.
 * @return returns true if the browser has gone to the next page, false otherwise.
 * @noSelf
 */
export declare function navigateBrowserForward(webBrowser: Browser): boolean;

/**
 * This function reloads the current browsers page.
 * @see https://wiki.multitheftauto.com/wiki/ReloadBrowserPage
 * @param webBrowser The browser that you want to reload.
 * @return returns true if the browser has reloaded, false otherwise.
 * @noSelf
 */
export declare function reloadBrowserPage(webBrowser: Browser): boolean;

/**
 * This function opens a request window in order to accept the requested remote URLs.
 * @see https://wiki.multitheftauto.com/wiki/RequestBrowserDomains
 * @param pages A table containing all domains
 * @param parseAsURL true if the passed addresses should be converted from URLs, false otherwise.
 * @param callback A callback function that is called as soon as the result is available
 * Syntax:
 * <syntaxhighlight lang="lua">function(bool wasAccepted, table
 * new_domains)</syntaxhighlight>
 * @return returns true, if the string was successfully read, false otherwise.
 * @noSelf
 */
export declare function requestBrowserDomains(
    pages: LuaTable,
    parseAsURL?: boolean,
    callback?: HandleFunction,
): boolean;

/**
 * Allows resizing of CEF browsers at runtime.
 * @see https://wiki.multitheftauto.com/wiki/ResizeBrowser
 * @param webBrowser The browser you want to resize.
 * @param width The new width of the browser.
 * @param height The new height of the browser.
 * @return returns true if the browser is resized successfully, false if theres something wrong.
 * @noSelf
 */
export declare function resizeBrowser(
    webBrowser: Browser,
    width: number,
    height: number,
): boolean;

/**
 * This function provides a requestable ajax resource for Lua/Javascript communication for a
 * Element/Browser|browser.
 * @see https://wiki.multitheftauto.com/wiki/SetBrowserAjaxHandler
 * @param webBrowser The web browser which will execute the Javascript code
 * @param url The URL endpoint to handle
 * @param handler The function to call if the webBrowser attempts to open the ajax endpoint. If this
 * parameter is nil or omitted, the ajax handler for the url will be deleted.
 * @noSelf
 */
export declare function setBrowserAjaxHandler(
    webBrowser: Browser,
    url: string,
    handler?: HandleFunction,
): boolean;

/**
 * This function sets a given property of a specified browser.
 * @see https://wiki.multitheftauto.com/wiki/SetBrowserProperty
 * @param theBrowser The browser element you want to set a property of
 * @param key The browser property key. It can be:
 * @param mobile Surfing the web as mobile
 * @param value A value indicating whether to enable (1) the property or not (0)
 * @return returns true if the property was successfully set, false otherwise.
 * @noSelf
 */
export declare function setBrowserProperty(
    theBrowser: Browser,
    key: string,
    value: string,
): boolean;

/**
 * This function sets the rendering state of a browser.
 * @see https://wiki.multitheftauto.com/wiki/SetBrowserRenderingPaused
 * @param webBrowser The browser
 * @param paused true to pause rendering, false to continue
 * @return returns true if the state was successfully changed
 * @noSelf
 */
export declare function setBrowserRenderingPaused(
    webBrowser: Browser,
    paused: boolean,
): boolean;

/**
 * This function sets either a specific Element/Browser|browsers volume, or the overall
 * volume for browsers.
 * @see https://wiki.multitheftauto.com/wiki/SetBrowserVolume
 * @param volume A float|floating point number representing the desired volume level. Range is from 0.0 to
 * 1.0
 * @param webBrowser A browser element
 * @noSelf
 */
export declare function setBrowserVolume(
    webBrowser: Browser,
    volume: number,
): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/SetBrowserVolume
 * @noSelf
 */
export declare function setBrowserVolume(volume: number): boolean;

/**
 * This function toggles the visibility of the developer tools pane.
 * @see https://wiki.multitheftauto.com/wiki/ToggleBrowserDevTools
 * @param webBrowser The browser
 * @param visible true to show the tools, false to hide
 * @return returns true if the visibility was successfully toggled, false if an error occurred
 * @noSelf
 */
export declare function toggleBrowserDevTools(
    webBrowser: Browser,
    visible: boolean,
): boolean;
