// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

import {
    ProgressBar,
    Gui,
    EngineTXD,
    EngineDFF,
    EngineCOL,
    EngineIFP,
    PrimitiveType,
    DxTexture,
    ObjectGroup,
    Browser,
    Light,
    Effect,
    Searchlight,
    Weapon,
    GuiBrowser,
    GuiMemo,
    GuiElement,
    GuiEdit,
    GuiScrollBar,
    GuiWindow,
    Projectile,
    Material,
    Svg,
    SvgCallback,
    Userdata,
    TextItem,
    Pickup,
    Request,
    Player,
    Blip,
    ColShape,
    Element,
    Ped,
    Resource,
    Team,
    Vehicle,
    XmlNode,
    File,
    Marker,
    MTASAObject,
    RadarArea,
    Water,
    Timer,
    HandleFunction,
    TimerCallbackFunction,
    FetchRemoteCallback,
    GenericEventHandler,
    CommandHandler,
    BindKeyCallback,
    BindKeyCallbackVarArgs,
    ControlName,
    KeyName,
    KeyState,
    Vector2,
    Vector3,
    Vector4,
    Matrix,
} from '../structure';

/**
 * Gets whether the traffic lights are currently locked or not. If the lights are locked, it
 * means they wont change unless you do setTrafficLightState.
 * @see https://wiki.multitheftauto.com/wiki/AreTrafficLightsLocked
 * @return returns true the traffic lights are currently locked, false otherwise.
 * @noSelf
 */
export declare function areTrafficLightsLocked(): boolean;

/**
 * Creates a SWAT rope like that of the rope in single player used by SWAT Teams abseiling
 * from the Police Maverick.
 * @see https://wiki.multitheftauto.com/wiki/CreateSWATRope
 * @param fx, fy, fz the world coordinates where the effect originates.
 * @param duration the amount in miliseconds the rope will be there before falling to the ground.
 * @noSelf
 */
export declare function createSWATRope(
    fx: number,
    fy: number,
    fZ: number,
    duration: number,
): boolean;

/**
 * This function gets the maximum height at which aircraft can fly without their engines
 * turning off.
 * @see https://wiki.multitheftauto.com/wiki/GetAircraftMaxHeight
 * @return returns a float containing the max aircraft height.
 * @noSelf
 */
export declare function getAircraftMaxHeight(): number;

/**
 * This function returns the maximum velocity at which aircrafts could fly. Using this
 * function server-side will return the server-side value, not necessarily the same that is
 * set client-side.
 * @see https://wiki.multitheftauto.com/wiki/GetAircraftMaxVelocity
 * @return returns a float being the max velocity that is currently set, depending on which side it
 * is used.
 * @noSelf
 */
export declare function getAircraftMaxVelocity(): number;

/**
 * This function will tell you if the birds are enabled or disabled.
 * @see https://wiki.multitheftauto.com/wiki/GetBirdsEnabled
 * @return returns true if the birds are enabled or false if the birds are disabled.
 * @noSelf
 */
export declare function getBirdsEnabled(): boolean;

/**
 * This function will tell you if clouds are enabled or disabled.
 * @see https://wiki.multitheftauto.com/wiki/GetCloudsEnabled
 * @return returns true if the clouds are enabled or false if clouds are disabled.
 * @noSelf
 */
export declare function getCloudsEnabled(): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/GetCoronaReflectionsEnabled
 * @return one of the following integers will be returned:
 * * 0: corona reflections are disabled
 * * 1: corona reflections are enabled (are visible during rain)
 * * 2: corona reflections are force enabled (are visible even if there is no rain)
 * @noSelf
 */
export declare function getCoronaReflectionsEnabled(): number;

/**
 * This function will tell you what is the current render distance.
 * @see https://wiki.multitheftauto.com/wiki/GetFarClipDistance
 * @return returns a float with the current render distance, false if the operation could not be
 * completed.
 * @noSelf
 */
export declare function getFarClipDistance(): number;

/**
 * This function will tell you what is the current fog render distance.
 * @see https://wiki.multitheftauto.com/wiki/GetFogDistance
 * @return returns a float with the current fog render distance, false if the operation could not be
 * completed.
 * @noSelf
 */
export declare function getFogDistance(): number;

/**
 * This function gets the current game speed value.
 * @see https://wiki.multitheftauto.com/wiki/GetGameSpeed
 * @return returns a float representing the speed of the game.
 * @noSelf
 */
export declare function getGameSpeed(): number;

/**
 * This function outputs the bounding box of a garage.
 * @see https://wiki.multitheftauto.com/wiki/GetGarageBoundingBox
 * @param garageID The Garage|garage ID that represents the garage door that is being checked.
 * @return returns four floats indicating the bounding box of the garage.
 * western x position, eastern x position, southern y position, northern y position,, false
 * when invalid garageid was provided.
 * @noSelf
 */
export declare function getGarageBoundingBox(
    garageID: number,
): LuaMultiReturn<[number, number, number, number]>;

/**
 * This function outputs X, Y and Z position of given garage.
 * @see https://wiki.multitheftauto.com/wiki/GetGaragePosition
 * @param garageID The Garage|garage ID that represents the garage door that is being checked.
 * @return returns three floats indicating the position of the garage, x, y and z respectively,
 * false when garageid was invalid.
 * @noSelf
 */
export declare function getGaragePosition(
    garageID: number,
): LuaMultiReturn<[number, number, number]>;

/**
 * This function outputs the size of garage.
 * @see https://wiki.multitheftauto.com/wiki/GetGarageSize
 * @param garageID The Garage|garage ID that represents the garage door that is being checked.
 * @return returns three floats indicating the size of the garage, false if an invalid garageid has
 * been provided
 * @noSelf
 */
export declare function getGarageSize(
    garageID: number,
): LuaMultiReturn<[number, number, number]>;

/**
 * This function returns the current gravity level for the context in which it is called
 * (server or client).
 * @see https://wiki.multitheftauto.com/wiki/GetGravity
 * @return returns a float with the current server or client (depending on where you call the
 * function) gravity level.
 * @noSelf
 */
export declare function getGravity(): number;

/**
 * This function gets the Z level of the highest ground below a point.
 * It is required that the point is near enough to the local player so that its within the
 * area where collision data is loaded. If this is not the case, an incorrect position will
 * be returned.
 * @see https://wiki.multitheftauto.com/wiki/GetGroundPosition
 * @param x A floating point number representing the X world coordinate of the point.
 * @param y A floating point number representing the Y world coordinate of the point.
 * @param z A floating point number representing the Z world coordinate of the point.
 * @return returns a float with the highest ground-level z coord if parameters are valid, 0 if the
 * point you tried to test is outside the loaded world map, false otherwise.
 * @noSelf
 */
export declare function getGroundPosition(
    x: number,
    y: number,
    z: number,
): number;

/**
 * This function will return the current heat haze effect settings.
 * Note: The server can only return the heat haze settings if it has actually been set by
 * script.
 * @see https://wiki.multitheftauto.com/wiki/GetHeatHaze
 * @return returns 9 values, which are the same used as arguments in setheathaze:
 * @noSelf
 */
export declare function getHeatHaze(): LuaMultiReturn<
    [number, number, number, number, number, number, number, number, boolean]
>;

/**
 * This function will tell you if interior furniture are enabled or disabled in a specified
 * room ID.
 * @see https://wiki.multitheftauto.com/wiki/GetInteriorFurnitureEnabled
 * @return returns true if interior furniture is enabled or false if interior furniture is disabled.
 * @noSelf
 */
export declare function getInteriorFurnitureEnabled(roomID: number): boolean;

/**
 * This function checks to see if the music played by default in clubs is disabled or not.
 * @see https://wiki.multitheftauto.com/wiki/GetInteriorSoundsEnabled
 * @return returns true if music is playing, returns false if music is not playing.
 * @noSelf
 */
export declare function getInteriorSoundsEnabled(): boolean;

/**
 * This function gets the maximum height at which your jetpack can fly without failing to go
 * higher.
 * @see https://wiki.multitheftauto.com/wiki/GetJetpackMaxHeight
 * @return returns a float containing the max jetpack height.
 * @noSelf
 */
export declare function getJetpackMaxHeight(): number;

/**
 * Tells you how long an ingame minute takes in real-world milliseconds. The default GTA
 * value is 1000.
 * @see https://wiki.multitheftauto.com/wiki/GetMinuteDuration
 * @return returns the number of real-world milliseconds that go in an ingame minute.
 * @noSelf
 */
export declare function getMinuteDuration(): number;

/**
 * This function returns the moon size.
 * @see https://wiki.multitheftauto.com/wiki/GetMoonSize
 * @return returns a integer being the moon size that is currently set, depending on which side it
 * is used.
 * @noSelf
 */
export declare function getMoonSize(): number;

/**
 * @see https://wiki.multitheftauto.com/wiki/GetNearClipDistance
 * @return this function returns a float containing the actual near clip distance.
 * @noSelf
 */
export declare function getNearClipDistance(): number;

/**
 * This function is used to get occlusions enabled state.
 * @see https://wiki.multitheftauto.com/wiki/GetOcclusionsEnabled
 * @return returns true if occlusions are enabled, or false otherwise.
 * @noSelf
 */
export declare function getOcclusionsEnabled(): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/GetPedsLODDistance
 * @return this function returns a float containing the peds lod distance.
 * @noSelf
 */
export declare function getPedsLODDistance(): number;

/**
 * This function is used to get the current rain level.
 * @see https://wiki.multitheftauto.com/wiki/GetRainLevel
 * @return returns the rain level as a number.
 * @noSelf
 */
export declare function getRainLevel(): number;

/**
 * @see https://wiki.multitheftauto.com/wiki/GetRoofPosition
 * @param x : A float representing the X world coordinate of the point.
 * @param y : A float representing the Y world coordinate of the point.
 * @param z : A float representing the Z world coordinate of the point.
 * @return returns a float with the lowest roof-level z coord if parameters are valid, false if the
 * point you tried to test is outside the loaded world map.
 * @noSelf
 */
export declare function getRoofPosition(
    x: number,
    y: number,
    z: number,
): number;

/**
 * This function gets the screen position of a point in the world. This is useful for
 * attaching 2D gui elements to parts of the world (e.g. players) or detecting if a point is
 * on the screen (though it does not check if it is actually visible, you should use
 * processLineOfSight for that).
 * @see https://wiki.multitheftauto.com/wiki/GetScreenFromWorldPosition
 * @param x A float value indicating the x position in the world.
 * @param y A float value indicating the y position in the world.
 * @param z A float value indicating the z position in the world.
 * @param edgeTolerance A float value indicating the distance the position can be off screen before the function
 * returns false. Note: its clamped down on both axies to the size of screen at the given
 * axis*10
 * @param relative A boolean value that indicates if edgeTolerance is in pixels false, or relative to the
 * screen size true.
 * @return returns two x, y floats indicating the screen position and float distance between screen
 * and given position if successful, false otherwise.
 * @noSelf
 */
export declare function getScreenFromWorldPosition(
    x: number,
    y: number,
    z: number,
    edgeTolerance?: number,
    relative?: boolean,
): LuaMultiReturn<[number, number, number]>;

/**
 * This function will return the current sky color.
 * Note: The server can only return the sky color if it has actually been set by script.
 * @see https://wiki.multitheftauto.com/wiki/GetSkyGradient
 * @return returns 6 int|ints, of which the first 3 represent the skys top color, (in rgb) and the
 * last 3 represent the bottom colors.
 * @noSelf
 */
export declare function getSkyGradient(): LuaMultiReturn<
    [number, number, number, number, number, number]
>;

/**
 * This function is used to get the color of the sun.
 * @see https://wiki.multitheftauto.com/wiki/GetSunColor
 * @return returns the color of the sun as six numbers, false if its default.
 * @noSelf
 */
export declare function getSunColor(): LuaMultiReturn<
    [number, number, number, number, number, number]
>;

/**
 * This function is used to get the size of the sun.
 * @see https://wiki.multitheftauto.com/wiki/GetSunSize
 * @return returns the size of the sun as a number, false if the size of the sun is at its default.
 * @noSelf
 */
export declare function getSunSize(): number;

/**
 * This function is used to get the current time in the game. If you want to get the real
 * server time, use getRealTime.
 * @see https://wiki.multitheftauto.com/wiki/GetTime
 * @return returns two ints that represent hours and minutes.
 * @noSelf
 */
export declare function getTime(): LuaMultiReturn<[number, number]>;

/**
 * Gets the current traffic light state. This state controls the traffic light colors. For
 * instance, state 1 will cause the north and south traffic lights to be amber, and the ones
 * left and east will turn red.
 * @see https://wiki.multitheftauto.com/wiki/GetTrafficLightState
 * @return returns the current traffic_light_states|state of the traffic lights.
 * @noSelf
 */
export declare function getTrafficLightState(): number;

/**
 * Returns the distance of vehicles LOD.
 * @see https://wiki.multitheftauto.com/wiki/GetVehiclesLODDistance
 * @return * float: general distance used for most vehicles
 * * float: distance used for trains and planes
 * @noSelf
 */
export declare function getVehiclesLODDistance(): LuaMultiReturn<
    [number, number]
>;

/**
 * This function returns the current Weather ID.
 * @see https://wiki.multitheftauto.com/wiki/GetWeather
 * @return returns two integers indicating the weather type that is currently active. the first
 * integer says what weather is currently considered to be active. the second integer is the
 * weather id that is being blended into if any, otherwise it is nil.
 * @noSelf
 */
export declare function getWeather(): LuaMultiReturn<[number, number]>;

/**
 * This function gets the wind velocity in San Andreas.
 * @see https://wiki.multitheftauto.com/wiki/GetWindVelocity
 * @return *velocityx: the velocity on the x-coordinate or false if the wind velocity is default.
 * *velocityy: the velocity on the y-coordinate or nil if the wind velocity is default.
 * *velocityz: the velocity on the z-coordinate or nil if the wind velocity is default.
 * @noSelf
 */
export declare function getWindVelocity(): LuaMultiReturn<
    [number, number, number]
>;

/**
 * This function allows you to retrieve the world position corresponding to a 2D position on
 * the screen, at a certain depth.
 * If you want to detect what element is at a particular point on the screen, use
 * processLineOfSight between the camera position and the position returned from this
 * function when passed a high depth value (100 or so, depending how far away you want to
 * detect elements at).
 * As expected, setting 0 as the distance will cause the point retrived to be within the
 * camera itself. That means that drawing any 3D thing in that point would result in it not
 * being visible. Depending on the camera near clip distance, however, the minimum distance
 * to be able to view it can vary.
 * @see https://wiki.multitheftauto.com/wiki/GetWorldFromScreenPosition
 * @param x A float value indicating the x position on the screen, in pixels.
 * @param y A float value indicating the y position on the screen, in pixels.
 * @param depth A float value indicating the distance from the camera of the point whose coordinates we
 * are retrieving, in units.
 * @return returns three x, y, z floats indicating the world position if successful, false otherwise.
 * @noSelf
 */
export declare function getWorldFromScreenPosition(
    x: number,
    y: number,
    depth: number,
): LuaMultiReturn<[number, number, number]>;

/**
 * This function allows you to retrieve the zone name of a certain location.
 * @see https://wiki.multitheftauto.com/wiki/GetZoneName
 * @param x The X axis position
 * @param y The Y axis position
 * @param z The Z axis position
 * @param citiesonly : An optional argument to choose if you want to return one of the following city names:
 * ** Tierra Robada
 * ** Bone County
 * ** Las Venturas
 * ** San Fierro
 * ** Red County
 * ** Whetstone
 * ** Flint County
 * ** Los Santos
 * @return returns the string of the zone name.
 * @noSelf
 */
export declare function getZoneName(
    x: number,
    y: number,
    z: number,
    citiesonly?: boolean,
): string;

/**
 * This function allows you to check if some background sound effects are enabled.
 * @see https://wiki.multitheftauto.com/wiki/IsAmbientSoundEnabled
 * @param theType The type of ambient sound to test. Can be either gunfire or general.
 * @return returns true if the ambient sound is enabled, false if it is disabled or invalid values
 * were passed.
 * @noSelf
 */
export declare function isAmbientSoundEnabled(theType: string): boolean;

/**
 * This function checks whether or not a specific garage door is open.
 * @see https://wiki.multitheftauto.com/wiki/IsGarageOpen
 * @param garageID The Garage|garage ID that represents the garage door that is being checked.
 * @return returns true if the garage is open, false if it is closed or an invalid garage id was
 * given.
 * @noSelf
 */
export declare function isGarageOpen(garageID: number): boolean;

/**
 * This function checks if there are obstacles between two points of the game world,
 * optionally ignoring certain kinds of elements. Use processLineOfSight if you want more
 * information about what the ray hits.
 * @see https://wiki.multitheftauto.com/wiki/IsLineOfSightClear
 * @param startX The first points world X coordinate.
 * @param startY The first points world Y coordinate.
 * @param startZ The first points world Z coordinate.
 * @param endX The second points world X coordinate.
 * @param endY The second points world Y coordinate.
 * @param endZ The second points world Z coordinate.
 * @param checkBuildings Allow the line of sight to be blocked by GTAs internally placed buildings, i.e. the world
 * map.
 * @param checkVehicles Allow the line of sight to be blocked by Vehicle|vehicles.
 * @param checkPeds Allow the line of sight to be blocked by peds, i.e. Player|players.
 * @param checkObjects Allow the line of sight to be blocked by Object|objects.
 * @param checkDummies Allow the line of sight to be blocked by GTAs internal dummies.  These are not used in
 * the current MTA version so this argument can be set to false.
 * @param seeThroughStuff Allow the line of sight to pass through collision materials that have this flag enabled
 * (By default material IDs 52, 55 and 66 which are some fences). This flag originally
 * allows some objects to be walked on but you can shoot throug them.
 * @param ignoreSomeObjectsForCamera Allow the line of sight to pass through objects that have (K) property enabled in
 * object.dat data file. (i.e. Most dynamic objects like boxes or barrels)
 * @param ignoredElement Allow the line of sight to pass through a certain specified element.
 * @return returns true if the line between the specified points is clear, false if theres an
 * obstacle or if invalid parameters are passed.
 * @noSelf
 */
export declare function isLineOfSightClear(
    startX: number,
    startY: number,
    startZ: number,
    endX: number,
    endY: number,
    endZ: number,
    checkBuildings?: boolean,
    checkVehicles?: boolean,
    checkPeds?: boolean,
    checkObjects?: boolean,
    checkDummies?: boolean,
    seeThroughStuff?: boolean,
    ignoreSomeObjectsForCamera?: boolean,
    ignoredElement?: Element,
): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/IsWorldSoundEnabled
 * @param group An integer representing the World sound groups|world sound group
 * @param index An integer representing an individual sound within the group
 * @return returns true if the world sounds are enabled, false if they are disabled or invalid
 * values were passed.
 * @noSelf
 */
export declare function isWorldSoundEnabled(
    group: number,
    index?: number,
): boolean;

/**
 * Checks if a special world property (cheat) is enabled or not.
 * @see https://wiki.multitheftauto.com/wiki/IsWorldSpecialPropertyEnabled
 * @param propname the name of the property to retrieve. Possible values are listed on
 * SetWorldSpecialPropertyEnabled.
 * @return returns true if the property is enabled, false if it is disabled or the specified
 * property name is invalid.
 * @noSelf
 */
export declare function isWorldSpecialPropertyEnabled(
    propname: string,
): boolean;

/**
 * This function casts a ray between two points in the world, and tells you information
 * about the point that was hit, if any. The two positions must be within the local players
 * draw distance as the collision data is not loaded outside this area, and the call will
 * just fail as if the ray didnt hit.
 * This function is relatively expensive to call, so over use of this in scripts may have a
 * detrimental effect on performance.
 * This function is useful for checking for collisions and for editor-style scripts. If you
 * wish to find what element is positioned at a particular point on the screen, use this
 * function combined with getWorldFromScreenPosition. If you wish to just know if something
 * is hit, and dont care about what or where was hit, use isLineOfSightClear.
 * @see https://wiki.multitheftauto.com/wiki/ProcessLineOfSight
 * @param startX The start x position
 * @param startY The start y position
 * @param startZ The start z position
 * @param endX The end x position
 * @param endY The end y position
 * @param endZ The end z position
 * @param checkBuildings Allow the line of sight to be blocked by GTAs internally placed buildings, i.e. the world
 * map.
 * @param checkVehicles Allow the line of sight to be blocked by Vehicle|vehicles.
 * @param checkPlayers Allow the line of sight to be blocked by Player|players.
 * @param checkObjects Allow the line of sight to be blocked by Object|objects.
 * @param checkDummies Allow the line of sight to be blocked by GTAs internal dummies.  These are not used in
 * the current MTA version so this argument can be set to false.
 * @param seeThroughStuff Allow the line of sight pass through collision materials that have this flag enabled (By
 * default material IDs 52, 55 and 66 which are some fences that you can shoot throug but
 * still walk on them).
 * @param ignoreSomeObjectsForCamera Allow the line of sight to pass through objects that have (K) property enabled in
 * object.dat data file. (i.e. Most dynamic objects like boxes or barrels)
 * @param shootThroughStuff Allow the line of sight to pass through collision materials that have this flag enabled
 * (By default material IDs 28, 29, 31, 32, 33, 74, 75, 76, 77, 78, 79, 96, 97, 98, 99, 100
 * which are exclusively sand / beach or underwater objects).
 * @param ignoredElement Allow the line of sight to pass through a certain specified element. This is usually set
 * to the object you are tracing from so it does not interfere with the results.
 * @param includeWorldModelInformation Include the results of hitting a world model.
 * @param bIncludeCarTyres Includes car tyre hits.
 * @return *hit: true if there is a collision, false otherwise
 * the other values are only filled if there is a collision, they contain nil otherwise
 * *hitx, hity, hitz: collision position
 * *hitelement: the mta element hit if any, nil otherwise
 * *normalx, normaly, normalz: the normal of the surface hit
 * *material: an integer representing the material ids|gtasa material id of the surface hit
 * when applicable (world, objects)
 * *lighting: a float between 0 (fully dark) and 1 (bright) representing the amount of light
 * that the hit building surface will transfer to peds or vehicles that are in contact with
 * it. the value can be affected by the game time of day, usually with a lower (darker)
 * value being returned during the night.
 * *piece: an integer representing the part of the element hit if hitelement is a vehicle or
 * a ped/player, 0 otherwise.
 * **for a ped/player, piece represents the body part hit:
 * **for vehicles, piece represents the vehicle part hit:
 * *worldmodelid: if includeworldmodelinformation was set to true and a world model was hit,
 * this will contain the model id.
 * *worldmodelpositionx,y,z: if worldmodelid is set, this will contain the world model
 * position.
 * *worldmodelrotationx,y,z: if worldmodelid is set, this will contain the world model
 * rotation.
 * *worldlodmodelid: if worldmodelid is set, this will contain the lod model id if
 * applicable.
 * @noSelf
 */
export declare function processLineOfSight(
    startX: number,
    startY: number,
    startZ: number,
    endX: number,
    endY: number,
    endZ: number,
    checkBuildings?: boolean,
    checkVehicles?: boolean,
    checkPlayers?: boolean,
    checkObjects?: boolean,
    checkDummies?: boolean,
    seeThroughStuff?: boolean,
    ignoreSomeObjectsForCamera?: boolean,
    shootThroughStuff?: boolean,
    ignoredElement?: Element,
    includeWorldModelInformation?: boolean,
    bIncludeCarTyres?: boolean,
): LuaMultiReturn<
    [
        boolean,
        number,
        number,
        number,
        Element,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
    ]
>;

/**
 * This function is used to remove a world object.
 * @see https://wiki.multitheftauto.com/wiki/RemoveWorldModel
 * @param modelID A whole integer specifying the GTASA object model ID.
 * @param radius A floating point number representing the radius that will be eliminated.
 * @param x A floating point number representing the X coordinate on the map.
 * @param y A floating point number representing the Y coordinate on the map.
 * @param z A floating point number representing the Z coordinate on the map.
 * @param interior The interior ID to apply the removal to. Some objects in interior 13 show in all
 * interiors so if you want to remove everything in interior 0 also remove everything in
 * interior 13. A value of -1 here will affect all interiors.}}
 * @return returns true if the object was removed, false if invalid arguments were passed.
 * @noSelf
 */
export declare function removeWorldModel(
    modelID: number,
    radius: number,
    x: number,
    y: number,
    z: number,
    interior?: number,
): boolean;

/**
 * This function is used to reset the background sounds to the default setting.
 * @see https://wiki.multitheftauto.com/wiki/ResetAmbientSounds
 * @return returns true if the ambient sounds were reset, false otherwise.
 * @noSelf
 */
export declare function resetAmbientSounds(): boolean;

/**
 * Resets the motion blur level on the clients screen to default value (36).
 * @see https://wiki.multitheftauto.com/wiki/ResetBlurLevel
 * @return returns true if the blur level was reset successfully, false otherwise.
 * @noSelf
 */
export declare function resetBlurLevel(): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/ResetColorFilter
 * @return returns true if the color filtering was reset, false otherwise.
 * @noSelf
 */
export declare function resetColorFilter(): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/ResetCoronaReflectionsEnabled
 * @return returns true.
 * @noSelf
 */
export declare function resetCoronaReflectionsEnabled(): boolean;

/**
 * This function resets the far clip distance to its default state.
 * @see https://wiki.multitheftauto.com/wiki/ResetFarClipDistance
 * @return returns true if operation was successful, false otherwise.
 * @noSelf
 */
export declare function resetFarClipDistance(): boolean;

/**
 * This function resets the fog render distance to its default state.
 * @see https://wiki.multitheftauto.com/wiki/ResetFogDistance
 * @return returns true if operation was successful, false otherwise.
 * @noSelf
 */
export declare function resetFogDistance(): boolean;

/**
 * This function restores the default heat haze.
 * @see https://wiki.multitheftauto.com/wiki/ResetHeatHaze
 * @return returns true if the heat haze was reset correctly, false otherwise.
 * @noSelf
 */
export declare function resetHeatHaze(): boolean;

/**
 * This function is used to reset the size of the moon to its normal size.
 * @see https://wiki.multitheftauto.com/wiki/ResetMoonSize
 * @return returns true if the size of the moon was reset, false otherwise.
 * @noSelf
 */
export declare function resetMoonSize(): boolean;

/**
 * This function resets near clip distance set by setNearClipDistance.
 * @see https://wiki.multitheftauto.com/wiki/ResetNearClipDistance
 * @return *boolean: always returns true
 * @noSelf
 */
export declare function resetNearClipDistance(): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/ResetPedsLODDistance
 * @return returns true if the peds lod distance was reset, false otherwise.
 * @noSelf
 */
export declare function resetPedsLODDistance(): boolean;

/**
 * This function resets the rain level of the current weather to its default.
 * @see https://wiki.multitheftauto.com/wiki/ResetRainLevel
 * @return returns true if the rain level was reset.
 * @noSelf
 */
export declare function resetRainLevel(): boolean;

/**
 * This function allows restoring of a changed sky gradient as a result of setSkyGradient.
 * @see https://wiki.multitheftauto.com/wiki/ResetSkyGradient
 * @return returns true if sky color was reset correctly, false otherwise.
 * @noSelf
 */
export declare function resetSkyGradient(): boolean;

/**
 * This function is used to reset the color of the sun to its normal color.
 * @see https://wiki.multitheftauto.com/wiki/ResetSunColor
 * @return returns true if the color of the sun was reset, false otherwise.
 * @noSelf
 */
export declare function resetSunColor(): boolean;

/**
 * This function is used to reset the size of the sun to its normal size.
 * @see https://wiki.multitheftauto.com/wiki/ResetSunSize
 * @return returns true if the size of the sun was reset, false otherwise.
 * @noSelf
 */
export declare function resetSunSize(): boolean;

/**
 * Resets the distance of vehicles LOD to default. Default values depends on client setting.
 * If client has enabled high detail vehicles in video options, value will be reset to (500,
 * 500) - otherwise to (70, 150). You can check value of this option using dxGetStatus
 * (SettingHighDetailVehicles).
 * @see https://wiki.multitheftauto.com/wiki/ResetVehiclesLODDistance
 * @return returns true if the vehicles lod distance was reset, false otherwise.
 * @noSelf
 */
export declare function resetVehiclesLODDistance(): boolean;

/**
 * This function resets the wind velocity in San Andreas to its default state.
 * @see https://wiki.multitheftauto.com/wiki/ResetWindVelocity
 * @return returns true if successful, false otherwise.
 * @noSelf
 */
export declare function resetWindVelocity(): boolean;

/**
 * This function is used to reset the world sounds to the default setting.
 * @see https://wiki.multitheftauto.com/wiki/ResetWorldSounds
 * @return returns true if the world sounds were reset, false otherwise.
 * @noSelf
 */
export declare function resetWorldSounds(): boolean;

/**
 * This function allows restoring of all world objects,which were removed with
 * RemoveWorldModel.
 * @see https://wiki.multitheftauto.com/wiki/RestoreAllWorldModels
 * @return returns true if the world objects were restored, false otherwise.
 * @noSelf
 */
export declare function restoreAllWorldModels(): boolean;

/**
 * This function allows restoring of world object,which was removed with RemoveWorldModel.
 * @see https://wiki.multitheftauto.com/wiki/RestoreWorldModel
 * @param modelID A whole integer specifying the GTASA object model ID.
 * @param radius A floating point number representing the radius that will be eliminated.
 * @param x A floating point number representing the X coordinate on the map.
 * @param y A floating point number representing the Y coordinate on the map.
 * @param z A floating point number representing the Z coordinate on the map.
 * @param iInterior
 * @return returns true if the world object was restored, false otherwise.
 * @noSelf
 */
export declare function restoreWorldModel(
    modelID: number,
    radius: number,
    x: number,
    y: number,
    z: number,
    iInterior?: number,
): boolean;

/**
 * This function changes the maximum flying height of aircraft.
 * @see https://wiki.multitheftauto.com/wiki/SetAircraftMaxHeight
 * @param Height The height you want aircraft to be able to go.
 * @return returns true if successful, false otherwise.
 * @noSelf
 */
export declare function setAircraftMaxHeight(Height: number): boolean;

/**
 * This function sets the maximum velocity at which aircrafts could fly. Using this function
 * server-side will overwrite the value that was previously set client-side.
 * @see https://wiki.multitheftauto.com/wiki/SetAircraftMaxVelocity
 * @param velocity The max velocity, can be 0 or any positive value. Default is 1.5.
 * @return returns true if the max velocity was set correctly, false otherwise.
 * @noSelf
 */
export declare function setAircraftMaxVelocity(velocity: number): boolean;

/**
 * This function allows you to disable some background sound effects. See also:
 * setWorldSoundEnabled.
 * @see https://wiki.multitheftauto.com/wiki/SetAmbientSoundEnabled
 * @param theType The type of ambient sound to toggle. Can be either gunfire or general.
 * @param enable Set false to turn off, true to turn on
 * @return returns true if the ambient sound was set correctly, false if invalid values were passed.
 * @noSelf
 */
export declare function setAmbientSoundEnabled(
    theType: string,
    enable: boolean,
): boolean;

/**
 * This function allows you to disable the flying birds.
 * @see https://wiki.multitheftauto.com/wiki/SetBirdsEnabled
 * @param enabled A boolean value determining if birds should be shown. Use true to show the birds and
 * false to hide them.
 * @return returns true if the birds state was changed succesfully, false if an invalid argument was
 * specified.
 * @noSelf
 */
export declare function setBirdsEnabled(enable: boolean): boolean;

/**
 * This function will enable or disable clouds. This is useful for race maps which are
 * placed high up as clouds can cause low FPS.
 * @see https://wiki.multitheftauto.com/wiki/SetCloudsEnabled
 * @param enabled A boolean value determining if clouds should be shown. Use true to show clouds and false
 * to hide them.
 * @return returns true if the cloud state was changed succesfully, false if an invalid argument was
 * specified.
 * @noSelf
 */
export declare function setCloudsEnabled(enabled: boolean): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/SetColorFilter
 * @param aRed The amount of red (0-255).
 * @param aGreen The amount of green (0-255).
 * @param aBlue The amount of blue (0-255).
 * @param aAlpha The amount of alpha (0-255).
 * @param bRed The amount of red (0-255).
 * @param bGreen The amount of green (0-255).
 * @param bBlue The amount of blue (0-255).
 * @param bAlpha The amount of alpha (0-255).
 * @return returns true if the color filter was set, false otherwise.
 * @noSelf
 */
export declare function setColorFilter(
    aRed: number,
    aGreen: number,
    aBlue: number,
    aAlpha: number,
    bRed: number,
    bGreen: number,
    bBlue: number,
    bAlpha: number,
): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/SetCoronaReflectionsEnabled
 * @param enabled
 * @param 0 : disabled
 * @param 1 : enabled (will be visible during rain)
 * @param 2 : force enabled (will be visible even if there is no rain)
 * @return returns true if passed arguments are correct, false otherwise.
 * @noSelf
 */
export declare function setCoronaReflectionsEnabled(enabled: number): boolean;

/**
 * This function is used to set the distance of render. Areas beyond the specified distance
 * will not be rendered.
 * @see https://wiki.multitheftauto.com/wiki/SetFarClipDistance
 * @param distance A float specifying the distance of render. Setting this less than 5 will cause problems
 * to the client.
 * @return returns true if the distance was set correctly, false if invalid arguments were passed.
 * @noSelf
 */
export declare function setFarClipDistance(distance: number): boolean;

/**
 * This function changes the distance at which fog appears. Keep in mind that this function
 * doesnt change the distance of render.
 * @see https://wiki.multitheftauto.com/wiki/SetFogDistance
 * @param distance distance in GTA units at which fog will appear. Very short or negative distances will
 * cause graphical bugs to the players.
 * @return returns true if the distance changed successfully, false if bad arguments were passed.
 * @noSelf
 */
export declare function setFogDistance(distance: number): boolean;

/**
 * This function sets the game speed to the given value.
 * @see https://wiki.multitheftauto.com/wiki/SetGameSpeed
 * @param value : The float value of the game speed (Range 0 - 10)
 * @return returns true if the gamespeed was set successfully, false otherwise.
 * the normal game speed is 1.
 * @noSelf
 */
export declare function setGameSpeed(value: number): boolean;

/**
 * This function opens or closes the specified garage door in the world.
 * @see https://wiki.multitheftauto.com/wiki/SetGarageOpen
 * @param garageID The Garage|garage ID that represents the garage door being opened or closed.
 * @param isOpen A boolean indicating whether or not to open the door.
 * @return returns true if successful, false if an invalid garage id was given.
 * @noSelf
 */
export declare function setGarageOpen(garageID: number, open: boolean): boolean;

/**
 * This function sets the servers gravity level.
 * *This will override setPedGravity applied to peds/players.
 * *Setting the gravity level to different values on clients can cause animation bugs
 * (players floating across ground because players see different fall animation.)}}
 * @see https://wiki.multitheftauto.com/wiki/SetGravity
 * @param level : The level of gravity (default is 0.008).
 * @return returns true if gravity was changed, false otherwise.
 * @noSelf
 */
export declare function setGravity(level: number): boolean;

/**
 * This function changes the heat haze effect.
 * @see https://wiki.multitheftauto.com/wiki/SetHeatHaze
 * @return returns true if the heat haze effect was set correctly, false if invalid values were
 * passed.
 * @noSelf
 */
export declare function setHeatHaze(
    intensity: number,
    randomShift?: number,
    speedMin?: number,
    speedMax?: number,
    scanSizeX?: number,
    scanSizeY?: number,
    renderSizeX?: number,
    renderSizeY?: number,
    bShowInside?: boolean,
): boolean;

/**
 * This function toggles furniture generation in interiors with the specified room ID.
 * @see https://wiki.multitheftauto.com/wiki/SetInteriorFurnitureEnabled
 * @param roomID The room type which you want disable or enable the furniture in:
 * @param 0 : shop
 * @param 1 : office
 * @param 2 : lounge
 * @param 3 : bedroom
 * @param 4 : kitchen
 * @param enabled : A bool representing whether the interior furniture is enabled or disabled.
 * @return returns true if successful, false otherwise.
 * @noSelf
 */
export declare function setInteriorFurnitureEnabled(
    roomID: number,
    enabled: boolean,
): boolean;

/**
 * This function disables or enables the ambient sounds played by GTA in most interiors,
 * like restaurants, casinos, clubs, houses, etc.
 * @see https://wiki.multitheftauto.com/wiki/SetInteriorSoundsEnabled
 * @return if a boolean was passed to the function, it always succeeds and returns true.
 * @noSelf
 */
export declare function setInteriorSoundsEnabled(enabled: boolean): boolean;

/**
 * This function changes the maximum flying height of jetpack.
 * @see https://wiki.multitheftauto.com/wiki/SetJetpackMaxHeight
 * @param Height : The max height starting at approximately -20.
 * @return returns true if successful, false otherwise.
 * @noSelf
 */
export declare function setJetpackMaxHeight(Height: number): boolean;

/**
 * Sets the real-world duration of an ingame minute. The GTA default is 1000.
 * @see https://wiki.multitheftauto.com/wiki/SetMinuteDuration
 * @param milliseconds : the new duration of an ingame minute, accepted values 0 - 2147483647.
 * @return returns true if successful, false otherwise.
 * @noSelf
 */
export declare function setMinuteDuration(milliseconds: number): boolean;

/**
 * This function sets the moon size. Using this function server-side will overwrite the
 * value that was previously set client-side.
 * @see https://wiki.multitheftauto.com/wiki/SetMoonSize
 * @param size The size, can be 0 or any positive value. Default is 3.
 * @return returns true if the moon size was set correctly, false otherwise.
 * @noSelf
 */
export declare function setMoonSize(size: number): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/SetNearClipDistance
 * @param distance the new near clip distance. It must be between 0.1 and 20 for the function to do any
 * effect. Default value is 0.3.
 * @return this function returns true if the argument is valid. returns false otherwise.
 * @noSelf
 */
export declare function setNearClipDistance(distance: number): boolean;

/**
 * This function is used to enable or disable occlusions. Occlusions are used by GTA to
 * enhance performance by hiding objects that are (normally) obscured by certain large
 * buildings. However when removeWorldModel is used they may also have the undesired effect
 * of making parts of the map disappear. Disabling occlusions will fix that.
 * @see https://wiki.multitheftauto.com/wiki/SetOcclusionsEnabled
 * @param enabled A bool specifying if GTA occlusions should be enabled
 * @return returns true if the setting was set correctly, false if invalid arguments were passed.
 * @noSelf
 */
export declare function setOcclusionsEnabled(enabled: boolean): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/SetPedsLODDistance
 * @param distance the new peds LOD distance. This value is clamped to 0 – 500. (Default for
 * high_detail_peds on is 500, when off, it is 60).
 * @return this function returns true if the argument is valid. returns false otherwise.
 * @noSelf
 */
export declare function setPedsLODDistance(distance: number): boolean;

/**
 * This function sets the rain level to any weather available in GTA. Use resetRainLevel to
 * undo the changes.
 * @see https://wiki.multitheftauto.com/wiki/SetRainLevel
 * @param level A floating point number representing the rain level. 1 represents the maximum rain level
 * usually available in GTA, but higher values are accepted.
 * @param Note The level value is clamped between 0.0 and 10.0 to avoid gameplay issues.
 * @return returns true if the rain level was set, false otherwise.
 * @noSelf
 */
export declare function setRainLevel(level: number): boolean;

/**
 * This function changes the sky color to a two-color gradient.
 * @see https://wiki.multitheftauto.com/wiki/SetSkyGradient
 * @param topRed The red value of the upper part of the sky, from 0 to 255.
 * @param topGreen The green value of the upper part of the sky, from 0 to 255.
 * @param topBlue The blue value of the upper part of the sky, from 0 to 255.
 * @param bottomRed The red value of the lower part of the sky, from 0 to 255.
 * @param bottomGreen The green value of the lower part of the sky, from 0 to 255.
 * @param bottomBlue The blue value of the lower part of the sky, from 0 to 255.
 * @return returns true if sky color was set correctly, false if invalid values were passed.
 * @noSelf
 */
export declare function setSkyGradient(
    topRed?: number,
    topGreen?: number,
    topBlue?: number,
    bottomRed?: number,
    bottomGreen?: number,
    bottomBlue?: number,
): boolean;

/**
 * This function is used to set the color of the sun.
 * @see https://wiki.multitheftauto.com/wiki/SetSunColor
 * @param aRed The amount of red (0-255) you want the sun to be.
 * @param aGreen The amount of green (0-255) you want the sun to be.
 * @param aBlue The amount of blue (0-255) you want the sun to be.
 * @param bRed The amount of red (0-255) you want the sun to be.
 * @param bGreen The amount of green (0-255) you want the sun to be.
 * @param bBlue The amount of blue (0-255) you want the sun to be.
 * @return returns true if the color of the sun was set, false otherwise.
 * @noSelf
 */
export declare function setSunColor(
    aRed: number,
    aGreen: number,
    aBlue: number,
    bRed: number,
    bGreen: number,
    bBlue: number,
): boolean;

/**
 * This function is used to set the size of the sun.
 * @see https://wiki.multitheftauto.com/wiki/SetSunSize
 * @param Size The size you want the sun to be in the sky.
 * @return returns true if the size of the sun was set, false otherwise.
 * @noSelf
 */
export declare function setSunSize(Size: number): boolean;

/**
 * This function sets the current GTA time to the given time.
 * @see https://wiki.multitheftauto.com/wiki/SetTime
 * @param hour : The hour of the new time (range 0-23).
 * @param minute : The minute of the new time (range 0-59).
 * @return returns true if the new time was successfully set, false otherwise.
 * @noSelf
 */
export declare function setTime(hour: number, minute: number): boolean;

/**
 * Toggles whether you want the traffic lights to be locked. If the lights are locked, it
 * means they wont change unless you do setTrafficLightState.
 * @see https://wiki.multitheftauto.com/wiki/SetTrafficLightsLocked
 * @param toggle : A bool indicating whether you want the traffic lights to change automatically, or not
 * @return returns true if the successful, false otherwise.
 * @noSelf
 */
export declare function setTrafficLightsLocked(toggle: boolean): boolean;

/**
 * Sets the current traffic light state. This state controls the traffic light colors. For
 * instance, state 1 will cause the north and south traffic lights to be amber, and the ones
 * left and east will turn red.
 * @see https://wiki.multitheftauto.com/wiki/SetTrafficLightState
 * @param state : If an integer is provided, the Traffic_light_states|state you wish to use (possible
 * values: 0-9). Else, one of the following strings:
 * @param auto : Sets the traffic lights default behavior (switches the colors automatically).
 * @param disabled : Turns traffic lights off.
 * Alternatively, you can provide two string parameters ('''colorNS''' and '''colorEW''')
 * with the colors for north-south and east-west traffic lights respectively. Valid colors
 * are:
 * @param green
 * @param yellow
 * @param red
 * @return returns true if the state was successfully set, false otherwise.
 * @noSelf
 */
export declare function setTrafficLightState(state: number): boolean;

/**
 * Sets the distance of vehicles LOD.
 * @see https://wiki.multitheftauto.com/wiki/SetVehiclesLODDistance
 * @param vehiclesDistance general distance used for most vehicles, this value is clamped to 0 – 500
 * @param trainsAndPlanesDistance distance used for trains and planes, this value is clamped to 0 – 500
 * @return this function returns true if arguments are valid. returns false otherwise.
 * @noSelf
 */
export declare function setVehiclesLODDistance(
    vehiclesDistance: number,
    trainsAndPlanesDistance?: number,
): boolean;

/**
 * This function sets the current weather to the given valid value. To change the weather
 * gradually, see setWeatherBlended.
 * @see https://wiki.multitheftauto.com/wiki/SetWeather
 * @param weatherID : The ID of new weather. Valid values are 0 to 255 inclusive.
 * @return returns true if the weather was set succesfully, false if an invalid weatherid was
 * specified.
 * @noSelf
 */
export declare function setWeather(weatherID: number): boolean;

/**
 * This function will change the current weather to another in a smooth manner, over the
 * period of 1-2 in-game hours (unlike setWeather, which sets a new weather instantly). To
 * ensure this transition performs as expected, you should not call this function until
 * getWeather indicates that no transition is already being done.
 * @see https://wiki.multitheftauto.com/wiki/SetWeatherBlended
 * @param weatherID The ID of the weather state you wish to set. Valid values are 0 to 255 inclusive.
 * @return returns true if successful, false if an invalid weatherid is passed.
 * @noSelf
 */
export declare function setWeatherBlended(weatherID: number): boolean;

/**
 * This function changes the wind velocity. The wind shakes the vegetation and makes
 * particles fly in a direction. The intensity and direction of the effect deppends of the
 * wind velocity in each axis.
 * @see https://wiki.multitheftauto.com/wiki/SetWindVelocity
 * @param velocityX : The velocity of the wind along the x axis.
 * @param velocityY : The velocity of the wind along the y axis.
 * @param velocityZ : The velocity of the wind along the z axis.
 * @return returns true if successful, false if bad arguments were passed.
 * @noSelf
 */
export declare function setWindVelocity(
    velocityX: number,
    velocityY: number,
    velocityZ: number,
): boolean;

/**
 * This function allows you to disable world sounds. A world sound is a sound effect which
 * has not been caused by playSound or playSound3D.
 * *The values for group and index can be determined by using the client command
 * Client_Commands#showsound|showsound in conjunction with setDevelopmentMode.
 * *This function does not affect sounds which are already playing, such as the wind sound
 * that can only be stopped by entering an interior.
 * * See also: setAmbientSoundEnabled.}}
 * @see https://wiki.multitheftauto.com/wiki/SetWorldSoundEnabled
 * @param group An int|integer representing the World sound groups|world sound group.
 * @param enable Set to false to disable, true to enable.
 * @param index An int|integer representing an individual sound within the group
 * @param immediate A boolean if set to true will cancel the sound if its already playing. This parameter
 * only works for stopping the sound.
 * @return returns true if the world sound was correctly enabled/disabled, false if invalid values
 * were passed.
 * @noSelf
 */
export declare function setWorldSoundEnabled(
    group: number,
    index: number,
    enable: boolean,
    immediate?: boolean,
): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/SetWorldSoundEnabled
 * @noSelf
 */
export declare function setWorldSoundEnabled(
    group: number,
    enable: boolean,
    immediate?: boolean,
): boolean;

/**
 * Enables or disables a special world property.
 * @see https://wiki.multitheftauto.com/wiki/SetWorldSpecialPropertyEnabled
 * @param propname the name of the property to set. Possible values are:
 * @param hovercars - equivalent of the JBGVNB cheat, and allows cars to drive on water. (default: false)
 * @param aircars - equivalent of the RIPAZHA cheat, and allows cars to fly. (default: false)
 * @param extrabunny - equivalent of the CJPHONEHOME or JHJOECW cheat, and allows you to bunny hop on bicycles
 * much higher. (default: false)
 * @param extrajump - equivalent of the KANGAROO cheat, and allows you to jump on foot much higher. (default:
 * false)
 * @param randomfoliage - toggle randomly generated foliage on the GTA:SA map (default: true)
 * @param snipermoon - toggle the GTA:SA easter egg, which increases the size of the moon every time you shoot
 * it with a sniper rifle (default: false)
 * @param extraairresistance - toggle the vehicle speed limit on cross-country roads (default: true)
 * **{{New feature/item|3.0156|1.5.5|12286|'''underworldwarp''' - toggle warp of peds and
 * vehicles when fall under map (default: true)}}
 * **{{New feature/item|3.0160|1.5.9|21125|'''vehiclesunglare''' - toggle the vehicle sun
 * glare effect (default: false) }}
 * **{{New feature/item|3.0160|1.5.9|21313| '''coronaztest''' - disable big sun lensflare
 * effect (default: true) }}
 * @param enable whether or not to enable the property.
 * @return returns true if successful, false otherwise.
 * @noSelf
 */
export declare function setWorldSpecialPropertyEnabled(
    propname: string,
    enable: boolean,
): boolean;

/**
 * This function checks to see if a line between two points collides with the water. This is
 * similar to processLineOfSight, but only collides with water. Waves are not taken into
 * account when testing the line.
 * @see https://wiki.multitheftauto.com/wiki/TestLineAgainstWater
 * @param startX, startY, startZ the position of the starting point of the line.
 * @param endX, endY, endZ the position of the end point of the line.
 * @return returns true and the position of the intersection point of the line and the water surface
 * if there is a collision, or false if there is no collision.
 * @noSelf
 */
export declare function testLineAgainstWater(
    startX: number,
    startY: number,
    startZ: number,
    endX: number,
    endY: number,
    endZ: number,
): LuaMultiReturn<[boolean, number, number, number]>;
