// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

import {
    ProgressBar,
    Gui,
    EngineTXD,
    EngineDFF,
    EngineCOL,
    EngineIFP,
    PrimitiveType,
    DxTexture,
    ObjectGroup,
    Browser,
    Light,
    Effect,
    Searchlight,
    Weapon,
    GuiBrowser,
    GuiMemo,
    GuiElement,
    GuiEdit,
    GuiScrollBar,
    GuiWindow,
    Projectile,
    Material,
    Svg,
    SvgCallback,
    Userdata,
    TextItem,
    Pickup,
    Request,
    Player,
    Blip,
    ColShape,
    Element,
    Ped,
    Resource,
    Team,
    Vehicle,
    XmlNode,
    File,
    Marker,
    MTASAObject,
    RadarArea,
    Water,
    Timer,
    HandleFunction,
    TimerCallbackFunction,
    FetchRemoteCallback,
    GenericEventHandler,
    CommandHandler,
    BindKeyCallback,
    BindKeyCallbackVarArgs,
    ControlName,
    KeyName,
    KeyState,
    Vector2,
    Vector3,
    Vector4,
    Matrix,
} from '../structure';

/**
 * The function is used to retrieve the ID of the current radio channel.
 * @see https://wiki.multitheftauto.com/wiki/GetRadioChannel
 * @return returns the id of the radio channel.
 * @noSelf
 */
export declare function getRadioChannel(): number;

/**
 * This function gets the given radio channel name.
 * @see https://wiki.multitheftauto.com/wiki/GetRadioChannelName
 * @param id The ID of the radio station you want to get the name of. It is a number from 0 to 12.
 * @return returns a string containing the station name if successful, false otherwise.
 * @noSelf
 */
export declare function getRadioChannelName(id: number): string;

/**
 * This function checks if a big sound container is available to use or not.
 * In case of these invalid audio files, this function returns false.|true}}
 * @see https://wiki.multitheftauto.com/wiki/GetSFXStatus
 * @param audioContainer The container name. Possible values are: feet, genrl, pain_a, script, spc_ea, spc_fa,
 * spc_ga, spc_na, spc_pa
 * @return returns true if the sound container is available, false otherwise.
 * @noSelf
 */
export declare function getSFXStatus(audioContainer: string): boolean;

/**
 * This function gets the beats per minute of a specific sound element.
 * @see https://wiki.multitheftauto.com/wiki/GetSoundBPM
 * @param sound a sound element that is created using playSound or playSound3D
 * @return returns the beats per minute of the given sound.
 * @noSelf
 */
export declare function getSoundBPM(sound: Element): number;

/**
 * @see https://wiki.multitheftauto.com/wiki/GetSoundBufferLength
 * @param theSound the sound element which buffer length you want to get.
 * @return * a float value indicating the buffer playback length of the sound in seconds.
 * * false if the sound is not a stream.
 * * nil if the sound is invalid.
 * @noSelf
 */
export declare function getSoundBufferLength(theSound: Element): number;

/**
 * @see https://wiki.multitheftauto.com/wiki/GetSoundEffectParameters
 * @param sound : The sound element to get the sound effect parameters of.
 * @param effectName : The name of the effect whose parameters you want to retrieve:
 * @return returns a table with the parameter names as the keys, and their values. if the specified
 * effect name is not valid, false is returned.
 * @noSelf
 */
export declare function getSoundEffectParameters(
    sound: Element,
    effectName: string,
): LuaTable;

/**
 * Returns the states of all effects of a sound.
 * @see https://wiki.multitheftauto.com/wiki/GetSoundEffects
 * @param sound a sound element.
 * @return returns a table with the effect names as the keys, and their states as the values if
 * successful. otherwise, it returns false.
 * sound effect names:
 * @noSelf
 */
export declare function getSoundEffects(sound: Element): LuaTable;

/**
 * This function gets the fast fourier transform data for an audio stream which is a table
 * of floats representing the current audio frame. This allows things like visualisations.
 * A fast fourier transform generates a table of all the frequencies of the current audio
 * frame which starts at the bass end of the spectrum to mids to highs in that order.
 * Should you have any problems there is an example resource located on the resources
 * repository:
 * https://github.com/multitheftauto/mtasa-resources/tree/master/%5Bgameplay%5D/visualiser
 * Visualiser
 * Just type startmusic mystreamurl in your console and it will play on the cinema billboard
 * near A51. If the element is a player, this function will use the players voice.
 * @see https://wiki.multitheftauto.com/wiki/GetSoundFFTData
 * @param sound a sound element that is created using playSound or playSound3D. Streams are also supported
 * @param iSamples allowed samples are 256, 512, 1024, 2048, 4096, 8192 and 16384.
 * @param iBands post processing option allows you to split the samples into the desired amount of bands
 * or bars so if you only need 5 bars this saves a lot of cpu power compared to trying to do
 * it in Lua.
 * @return returns a table of isamples/2 (or ibands if ibands is used) floats representing the
 * current audio frame.
 * returns false if the sound is not playing yet or hasnt buffered in the
 * case of streams.
 * @noSelf
 */
export declare function getSoundFFTData(
    sound: Element,
    iSamples: number,
    iBands?: number,
): LuaTable;

/**
 * This function is used to return the playback length of the specified sound element.
 * If the element is a player, this function will use the players voice.
 * @see https://wiki.multitheftauto.com/wiki/GetSoundLength
 * @param theSound the sound element which length you want to return.
 * @return returns an float value indicating the playback length of the sound element in seconds.
 * @noSelf
 */
export declare function getSoundLength(theSound: Element): number;

/**
 * This function gets the left/right level from a sound element.
 * If the element is a player, this function will use the players voice.
 * @see https://wiki.multitheftauto.com/wiki/GetSoundLevelData
 * @param theSound the sound element which level data you want to return.
 * @return returns a two integers in range from 0 to 32768.
 * @noSelf
 */
export declare function getSoundLevelData(
    theSound: Element,
): LuaMultiReturn<[number, number]>;

/**
 * Gets a custom sound max distance at which the sound stops.
 * @see https://wiki.multitheftauto.com/wiki/GetSoundMaxDistance
 * @param sound a sound element.
 * @return returns an integer of the max distance, false if invalid arguments where passed.
 * @noSelf
 */
export declare function getSoundMaxDistance(sound: Element): number;

/**
 * Used to get the meta tags attached to a sound. These provide information about the sound,
 * for instance the title or the artist.
 * *This function does not work on remote WAV files
 * @see https://wiki.multitheftauto.com/wiki/GetSoundMetaTags
 * @param sound a sound element.
 * @param format a filter string to get a specific meta tag.
 * @return returns a table, but only a string if format is given, with all data available (keys are
 * listed below) for the sound if successful, false otherwise. if any data is unavailable
 * then the associated key is not written to the table.
 * @noSelf
 */
export declare function getSoundMetaTags(
    sound: Element,
    format?: string,
): LuaTable;

/**
 * Gets a custom sound Minimum distance at which the sound stops getting louder.
 * @see https://wiki.multitheftauto.com/wiki/GetSoundMinDistance
 * @param sound a sound element.
 * @return returns an integer of the minimum distance, false if invalid arguements where passed.
 * @noSelf
 */
export declare function getSoundMinDistance(sound: Element): number;

/**
 * This function is used to get the pan level of the specified sound element.
 * @see https://wiki.multitheftauto.com/wiki/GetSoundPan
 * @param theSound the sound element which pan you want to get.
 * @return returns float value with range from -1.0 (left) to 1.0 (right), false otherwise.
 * @noSelf
 */
export declare function getSoundPan(theSound: Element): number;

/**
 * This function is used to return the current seek position of the specified sound element.
 * If the element is a player, this function will use the players voice.
 * @see https://wiki.multitheftauto.com/wiki/GetSoundPosition
 * @param theSound The sound element which seek position you want to return.
 * @return returns a float value indicating the seek position of the sound element in seconds.
 * @noSelf
 */
export declare function getSoundPosition(theSound: Element): number;

/**
 * This function gets the properties of a specific sound.
 * @see https://wiki.multitheftauto.com/wiki/GetSoundProperties
 * @param sound a sound element that is created using playSound or playSound3D
 * @return this function returns 3 float|floats and a boolean value:
 * the first float is the sounds http://en.wikipedia.org/wiki/sampling_rate sample rate, the
 * second one the sounds http://en.wikipedia.org/wiki/tempo tempo, and the third one the
 * http://en.wikipedia.org/wiki/pitch_%28music%29 pitch of the sound. the boolean
 * representing whether the sound is reversed or not.
 * @noSelf
 */
export declare function getSoundProperties(
    sound: Element,
): LuaMultiReturn<[number, number, number, boolean]>;

/**
 * This function is used to return the playback speed of the specified sound element.
 * @see https://wiki.multitheftauto.com/wiki/GetSoundSpeed
 * @param theSound the sound element which playback speed you want to return.
 * @return returns an float value indicating the playback speed of the sound element. default sound
 * playback speed is 1.0.
 * @noSelf
 */
export declare function getSoundSpeed(theSound: Element): number;

/**
 * This function is used to return the volume level of the specified sound element.
 * If the element is a player, this function will use the players voice.
 * @see https://wiki.multitheftauto.com/wiki/GetSoundVolume
 * @param theSound the sound element which volume you want to return.
 * @return returns a float representing the volume level of the sound element, false if invalid
 * arguments were passed.
 * @noSelf
 */
export declare function getSoundVolume(theSound: Element): number;

/**
 * This function gets the wave form data for an audio stream which is a table of floats
 * representing the current audio frame as a wave.
 * This allows things like visualisations.
 * If the element is a player, this function will use the players voice.
 * @see https://wiki.multitheftauto.com/wiki/GetSoundWaveData
 * @param sound a sound element that is created using playSound or playSound3D. Streams are also supported
 * @param iSamples allowed samples are 256, 512, 1024, 2048, 4096, 8192 and 16384.
 * @return returns a table of isamples floats representing the current audio frame waveform.
 * returns false if the sound is not playing yet or hasnt buffered in the
 * case of streams.
 * @noSelf
 */
export declare function getSoundWaveData(
    sound: Element,
    iSamples: number,
): LuaTable;

/**
 * @see https://wiki.multitheftauto.com/wiki/IsSoundLooped
 * @param theSound The sound element which you want to get the loop state.
 * @return returns true if the sound element is looped, false otherwise.
 * @noSelf
 */
export declare function isSoundLooped(theSound: Element): boolean;

/**
 * This function checks whether panning is enabled in a sound element or not.
 * @see https://wiki.multitheftauto.com/wiki/IsSoundPanningEnabled
 * @param theSound A valid sound element.
 * @return returns true if the sound is valid and it has panning enabled, false if it does not or is
 * not valid.
 * @noSelf
 */
export declare function isSoundPanningEnabled(theSound: Element): boolean;

/**
 * This function is used to return the current pause state of the specified sound element.
 * If the element is a player, this function will use the players voice.
 * @see https://wiki.multitheftauto.com/wiki/IsSoundPaused
 * @param theSound the sound element which pause state you want to return.
 * @return returns true if the sound element is paused, false if unpaused or invalid arguments were
 * passed.
 * @noSelf
 */
export declare function isSoundPaused(theSound: Element): boolean;

/**
 * This function plays a sound from GTAs big sound containers.
 * In case of these invalid audio files, this function returns false.
 * It also returns false when trying to play a track deleted in the recent GTA: SA Steam
 * patches (and if the client is using a Steam GTA: SA copy).|true}}
 * @see https://wiki.multitheftauto.com/wiki/PlaySFX
 * @param containerName The name of the audio container. Possible values are: feet, genrl, pain_a, script,
 * spc_ea, spc_fa, spc_ga, spc_na, spc_pa
 * @param bankId The audio bank id
 * @param soundId The sound id within the audio bank
 * @param looped A boolean representing whether the sound will be looped
 * @return returns a sound element if the sound was successfully created, false otherwise.
 * <syntaxhighlight lang=lua>
 * element playsfx ( string radio, string radiostation, int trackid , bool looped = false  )
 * </syntaxhighlight>
 * *radio: the string radio (used to differentiate to the first syntax)
 * *radiostation: the radio station. possible values are adverts, ambience, police, playback
 * fm, k-rose, k-dst, cutscene, beats, bounce fm, sf-ur, radio los santos, radio x, csr
 * 103.9, k-jah west, master sounds 98.3, wctr.
 * *trackid : the radio track id within the radio station audio file
 * *looped: a boolean representing whether the sound will be looped
 * returns a sound element if the sound was successfully created, false otherwise.
 * @noSelf
 */
export declare function playSFX(
    containerName: string,
    bankId: number,
    soundId: number,
    looped?: boolean,
): Element;

/**
 * This function plays a sound in the GTA world from GTAs big sound containers.
 * In case of these invalid audio files, this function returns false.
 * It also returns false when trying to play a track deleted in the recent GTA: SA Steam
 * patches (and if the client is using a Steam GTA: SA copy).|true}}
 * @see https://wiki.multitheftauto.com/wiki/PlaySFX3D
 * @param containerName The name of the audio container. Possible values are: feet, genrl, pain_a, script,
 * spc_ea, spc_fa, spc_ga, spc_na, spc_pa
 * @param bankId The audio bank id
 * @param soundId The sound id within the audio bank
 * @param x A floating point number representing the X coordinate on the map.
 * @param y A floating point number representing the Y coordinate on the map.
 * @param z A floating point number representing the Z coordinate on the map.
 * @param looped A boolean representing whether the sound will be looped
 * @return returns a sound element if the sound was successfully created, false otherwise.
 * <syntaxhighlight lang=lua>
 * element playsfx3d( string radio, string radiostation, int trackid, float x, float y,
 * float z , bool looped = false  )
 * </syntaxhighlight>
 * *radio: the string radio (used to differentiate to the first syntax)
 * *radiostation: the radio station. possible values are adverts, ambience, police, playback
 * fm, k-rose, k-dst, cutscene, beats, bounce fm, sf-ur, radio los santos, radio x, csr
 * 103.9, k-jah west, master sounds 98.3, wctr.
 * *trackid : the radio track id within the radio station audio file
 * *x: a floating point number representing the x coordinate on the map.
 * *y: a floating point number representing the y coordinate on the map.
 * *z: a floating point number representing the z coordinate on the map.
 * *looped: a boolean representing whether the sound will be looped
 * returns a sound element if the sound was successfully created, false otherwise.
 * @noSelf
 */
export declare function playSFX3D(
    containerName: string,
    bankId: number,
    soundId: number,
    x: number,
    y: number,
    z: number,
    looped?: boolean,
): Element;

/**
 * Creates a sound element and plays it immediately after creation for the local player.
 * *The only supported audio formats are MP3, WAV, OGG, FLAC, RIFF, MOD, WEBM, XM, IT, S3M
 * and PLS (e.g. Webstream).
 * *For performance reasons, when using playSound for effects that will be played lots (i.e.
 * weapon fire), it is recommend that you convert your audio file to a one channel (mono)
 * WAV with sample rate of 22050 Hz or less. Also consider adding a limit on how often the
 * effect can be played e.g. once every 50ms.}}
 * @see https://wiki.multitheftauto.com/wiki/PlaySound
 * @param soundPath filepath, raw data or URL (http://, https:// or ftp://) of the sound file you want to
 * play. (Note: Playing sound files from other resources requires the target resource to be
 * in the running state)
 * @param looped a boolean representing whether the sound will be looped. To loop the sound, use true.
 * Loop is not available for streaming sounds, only for sound files.
 * @param throttled a boolean representing whether the sound will be throttled (i.e. given reduced download
 * bandwidth). To throttle the sound, use true. Sounds will be throttled per default and
 * only for URLs.
 * @return returns a sound element if the sound was successfully created, false otherwise.
 * @noSelf
 */
export declare function playSound(
    soundPath: string,
    looped?: boolean,
    throttled?: boolean,
): Element;

/**
 * Creates a sound element in the GTA world and plays it immediately after creation for the
 * local player. setElementPosition can be used to move the sound element around after it
 * has been created. Remember to use setElementDimension after creating the sound to play it
 * outside of dimension 0.
 * *The only supported audio formats are MP3, WAV, OGG, RIFF, MOD, WEBM, XM, IT and S3M.
 * *For performance reasons, when using playSound3D for effects that will be played lots
 * (i.e. weapon fire), it is recommend that you convert your audio file to a one channel
 * (mono) WAV with sample rate of 22050 Hz or less. Also consider adding a limit on how
 * often the effect can be played e.g. once every 50ms.}}
 * @see https://wiki.multitheftauto.com/wiki/PlaySound3D
 * @param soundPath raw data or filepath to the sound file you want to play. (Note: Playing sound files from
 * other resources requires the target resource to be in the running state)
 * @param soundURL the URL (http://, https:// or ftp://) of the sound file you want to play. (In this
 * version the file does not have to be predefined in the meta.xml)
 * @param x a floating point number representing the X coordinate on the map.
 * @param y a floating point number representing the Y coordinate on the map.
 * @param z a floating point number representing the Z coordinate on the map.
 * @param looped a boolean representing whether the sound will be looped. To loop the sound, use true.
 * @param throttled a boolean representing whether the sound will be throttled (i.e. given reduced download
 * bandwidth). To throttle the sound, use true.
 * @return returns a sound element if the sound was successfully created, false otherwise.
 * @noSelf
 */
export declare function playSound3D(
    soundPath: string,
    x: number,
    y: number,
    z: number,
    looped?: boolean,
): Element;

/**
 * This function plays a frontend sound for the specified player.
 * @see https://wiki.multitheftauto.com/wiki/PlaySoundFrontEnd
 * @param sound a whole int specifying the sound id to play. Valid values are:
 * @noSelf
 */
export declare function playSoundFrontEnd(sound: number): boolean;

/**
 * This function sets the heard radio channel, even while not in a vehicle.
 * @see https://wiki.multitheftauto.com/wiki/SetRadioChannel
 * @param ID The ID of the radio station you want to play.
 * @return returns true if channel was set successfully, false otherwise.
 * @noSelf
 */
export declare function setRadioChannel(ID: number): boolean;

/**
 * Used to enable or disable specific sound effects.
 * Use a player element to control a players voice with this function.
 * @see https://wiki.multitheftauto.com/wiki/SetSoundEffectEnabled
 * @param sound a sound element or a player element which will affect the Resource:Voice|voice broadcast.
 * @param effectName the effect you want to enable or disable
 * @param bEnable true if you want to enable the effect, false if you want to disable it.
 * @return returns true if the effect was set successfully, false otherwise.
 * @noSelf
 */
export declare function setSoundEffectEnabled(
    theSound_thePlayer: Element,
    effectName: string,
    bEnable: boolean,
): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/SetSoundEffectParameter
 * @param sound : The sound element.
 * @param effectName : The name of the effect whose parameter you want to change:
 * @param effectParam : The parameter #Effects Parameters|name.
 * @param paramValue : The parameter #Effects Parameters|value.
 * @return returns true if effect have been set successfully, false otherwise.
 * @noSelf
 */
export declare function setSoundEffectParameter(
    sound: Element,
    effectName: string,
    effectParam: string,
    paramValue: unknown,
): boolean;

/**
 * @see https://wiki.multitheftauto.com/wiki/SetSoundLooped
 * @param theSound The sound element to set the loop.
 * @param bool A boolean representing whether the sound will be looped.
 * @return returns true if the sound element loop state was successfully changed, false otherwise.
 * @noSelf
 */
export declare function setSoundLooped(
    theSound: Element,
    loop: boolean,
): boolean;

/**
 * Sets a custom sound max distance at which the sound stops.
 * @see https://wiki.multitheftauto.com/wiki/SetSoundMaxDistance
 * @param sound a sound element.
 * @param distance the default value for this is 20
 * @return returns a true if the max distance was set, false otherwise.
 * @noSelf
 */
export declare function setSoundMaxDistance(
    sound: Element,
    distance: number,
): boolean;

/**
 * Sets a custom sound Minimum distance at which the sound stops getting louder.
 * @see https://wiki.multitheftauto.com/wiki/SetSoundMinDistance
 * @param sound a sound element.
 * @param distance an integer representing the distance the sound stops getting louder. the default value
 * for this is 5
 * @return returns a true if the minimum distance was set, false otherwise.
 * @noSelf
 */
export declare function setSoundMinDistance(
    sound: Element,
    distance: number,
): boolean;

/**
 * This function is used to change the pan level of the specified sound element.
 * @see https://wiki.multitheftauto.com/wiki/SetSoundPan
 * @param theSound The sound element which pan you want to modify.
 * @param pan A float|floating point number representing the desired pan level. Range is from -1.0
 * (left) to 1.0 (right)
 * @return returns true if the sound element pan was successfully changed, false otherwise.
 * @noSelf
 */
export declare function setSoundPan(theSound: Element, pan: number): boolean;

/**
 * This function toggles the panning of a sound (hearing it closer to the left or right side
 * of the speakers due to the camera position). By default a sound has its panning enabled.
 * @see https://wiki.multitheftauto.com/wiki/SetSoundPanningEnabled
 * @param sound a sound element to change the panning of.
 * @param enable true to enable the panning, false otherwise.
 * @return returns true if the sound is valid and good arguments were passed, false if not.
 * if the sound is not 3d, this function will return true as well, but issoundpanningenabled
 * will always return true after this (so it has no effect).
 * @noSelf
 */
export declare function setSoundPanningEnabled(
    sound: Element,
    enable: boolean,
): boolean;

/**
 * This function is used to either pause or unpause the playback of the specified sound
 * element.
 * Use a player element to control a players voice with this function.
 * @see https://wiki.multitheftauto.com/wiki/SetSoundPaused
 * @param theSound the sound element which you want to pause/unpause.
 * @param paused a boolean value representing whether the sound should be paused or not. To pause the
 * sound, use true.
 * @return returns true if the sound element was successfully paused, false otherwise.
 * @noSelf
 */
export declare function setSoundPaused(
    theSound: Element,
    paused: boolean,
): boolean;

/**
 * This function is used to change the seek position of the specified sound element.
 * Use a player element to control a players voice with this function.
 * *To set position of a remote audio file, you must pause the sound within an
 * onClientSoundStream event after creation, set the sound position and then unpause it
 * again. The sound can also not be throttled (see playSound arguments)}}
 * @see https://wiki.multitheftauto.com/wiki/SetSoundPosition
 * @param theSound the sound element which seek position you want to modify.
 * @param pos a float value representing the new seek position of the sound element in seconds.
 * @return returns true if the sound elements seek position was successfully changed, false
 * otherwise.
 * @noSelf
 */
export declare function setSoundPosition(
    theSound: Element,
    pos: number,
): boolean;

/**
 * This function edits the properties of a specific sound.
 * @see https://wiki.multitheftauto.com/wiki/SetSoundProperties
 * @param sound a sound element that is created using playSound or playSound3D
 * @param fSampleRate a float that defines the new sounds http://en.wikipedia.org/wiki/Sampling_rate sample rate
 * @param fTempo a float that defines the new sound http://en.wikipedia.org/wiki/Tempo tempo
 * @param fPitch a float that defines the new sound http://en.wikipedia.org/wiki/Pitch_%28music%29 pitch
 * @param bReverse a boolean representing whether the sound will be reversed or not.
 * @return returns true if the properties sucessfully set, false otherwise.
 * @noSelf
 */
export declare function setSoundProperties(
    sound: Element,
    fSampleRate: number,
    fTempo: number,
    fPitch: number,
    bReverse?: boolean,
): boolean;

/**
 * This function can be used to change the playback speed of the specified sound element.
 * @see https://wiki.multitheftauto.com/wiki/SetSoundSpeed
 * @param theSound the sound element which volume you want to modify.
 * @param speed a floating point number representing the desired sound playback speed.
 * @return returns true if the sound element playback speed was successfully changed, false
 * otherwise.
 * @noSelf
 */
export declare function setSoundSpeed(
    theSound: Element,
    speed: number,
): boolean;

/**
 * This function is used to change the volume level of the specified sound element.
 * Use a player element to control a players voice with this function.
 * @see https://wiki.multitheftauto.com/wiki/SetSoundVolume
 * @param theSound The sound element which volume you want to modify or a player element which voice volume
 * you want to modify.
 * @param volume A floating point number representing the desired volume level. Range is from 0.0 to 1.0.
 * This can go above 1.0 for amplification.
 * @return returns true if the sound element volume was successfully changed, false otherwise.
 * @noSelf
 */
export declare function setSoundVolume(
    theSound_thePlayer: Element,
    volume: number,
): boolean;

/**
 * Stops the sound playback for specified sound element. The sound element is also destroyed.
 * @see https://wiki.multitheftauto.com/wiki/StopSound
 * @param theSound the sound element you want to stop playing.
 * @return returns true if the sound was successfully stopped, false otherwise.
 * @noSelf
 */
export declare function stopSound(theSound: Element): boolean;
