// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

import {
    ProgressBar,
    Gui,
    EngineTXD,
    EngineDFF,
    EngineCOL,
    EngineIFP,
    PrimitiveType,
    DxTexture,
    ObjectGroup,
    Matrix,
    Browser,
    Light,
    Effect,
    Searchlight,
    Weapon,
    GuiBrowser,
    GuiMemo,
    GuiElement,
    GuiEdit,
    GuiScrollBar,
    GuiWindow,
    Projectile,
    Material,
    Userdata,
    TextItem,
    Pickup,
    Request,
    Player,
    Blip,
    ColShape,
    Element,
    Ped,
    Resource,
    Team,
    Vehicle,
    XmlNode,
    File,
    Marker,
    MTASAObject,
    RadarArea,
    Water,
    Timer,
    HandleFunction,
    TimerCallbackFunction,
    FetchRemoteCallback,
    GenericEventHandler,
    CommandHandler,
    BindKeyCallback,
    ControlName,
    KeyName,
    KeyState
} from '../structure';

/**
 * Creates an area of water.
 * The largest possible size of a water area is 5996&#0215;5996. Also be aware that the
 * function will change all x and y coordinates you specify into even integer numbers if
 * necessary: this is because of a limitation of San Andreas.
 * You are able to give the water a shallow water effect, which practically changes the
 * water invisible to the eye. However, all elements still work the same way as without the
 * shallow effect - allowing swimming, diving, vehicles to sink, etc.
 * @see {@link https://wiki.multitheftauto.com/wiki/CreateWater Wiki, createWater }
 * @param x1, y1, z1 position of bottom left (south-west) corner.
 * @param x2, y2, z2 position of bottom right (south-east) corner.
 * @param x3, y3, z3 position of top left (north-west) corner.
 * ''Note: Only 3 coords creates a triangle''
 * @param x4, y4, z4 position of top right (north-east) corner.
 * @param bShallow gives the water a shallow water effect.
 * @return returns a water element if successful, false otherwise. the water element can be
 * repositioned with setelementposition and destroyed with destroyelement.
 * @noSelf
 */
export declare function createWater(
    x1: number,
    y1: number,
    z1: number,
    x2: number,
    y2: number,
    z2: number,
    x3: number,
    y3: number,
    z3: number,
    x4?: number,
    y4?: number,
    z4?: number,
    bShallow?: boolean
): Water;

/**
 * This function returns the water color of the GTA world.
 * Note: The server can only return the water color, if it has actually been set by script.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetWaterColor Wiki, getWaterColor }
 * @return returns 4 int|ints, indicating the color of the water. (rgba)
 * @noSelf
 */
export declare function getWaterColor(): LuaMultiReturn<[
    number,
    number,
    number,
    number
]>;

/**
 * This function allows you to retrieve the water level from a certain location. The water
 * level is 0 in most places though it can vary (e.g. its higher near the dam).
 * @see {@link https://wiki.multitheftauto.com/wiki/GetWaterLevel Wiki, getWaterLevel }
 * @param x The X axis position
 * @param y The Y axis position
 * @param z The Z axis position
 * ''or:''
 * @param theWater the water element
 * @param bCheckWaves Include the water levels of waves in the ocean, lakes and ...
 * @return returns an integer of the water level if the localplayer/position is near the water (-3
 * to 20 on the z coordinate) else false if theres no water near the localplayer/position.
 * @noSelf
 */
export declare function getWaterLevel(
    posX: number,
    posY: number,
    posZ: number,
    bCheckWaves?: boolean
): number;

/**
 * Gets the world position of a vertex (i.e. corner) of a water area. Each water area is
 * either a triangle or quad (rectangle) so each has 3 or 4 corners.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetWaterVertexPosition Wiki, getWaterVertexPosition }
 * @param theWater the water element to get the vertex of
 * @param vertexIndex the index of the vertex whose position to get. Values range from 1 to 4 for a water quad,
 * or 1 to 3 for a triangle.
 * @return returns the x, y and z coordinates of the specified vertex if successful, false otherwise.
 * @noSelf
 */
export declare function getWaterVertexPosition(
    theWater: Water,
    vertexIndex: number
): LuaMultiReturn<[
    number,
    number,
    number
]>;

/**
 * This function returns the current wave height.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetWaveHeight Wiki, getWaveHeight }
 * @return returns the height as a float, false otherwise.
 * @noSelf
 */
export declare function getWaveHeight(): number;

/**
 * This function determines whether water is drawn last in the rendering order.
 * @see {@link https://wiki.multitheftauto.com/wiki/IsWaterDrawnLast Wiki, isWaterDrawnLast }
 * @return returns true if water is drawn last in the rendering order, false otherwise.
 * @noSelf
 */
export declare function isWaterDrawnLast(): boolean;

/**
 * This function reset the water color of the GTA world to default.
 * @see {@link https://wiki.multitheftauto.com/wiki/ResetWaterColor Wiki, resetWaterColor }
 * @return returns true if water color was reset correctly, false otherwise.
 * @noSelf
 */
export declare function resetWaterColor(): boolean;

/**
 * This function resets the water of the GTA world back to its default level. water|Water
 * elements are not affected.
 * @see {@link https://wiki.multitheftauto.com/wiki/ResetWaterLevel Wiki, resetWaterLevel }
 * @return returns true if water level was reset correctly, false otherwise.
 * @noSelf
 */
export declare function resetWaterLevel(): boolean;

/**
 * This function changes the water color of the GTA world.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetWaterColor Wiki, setWaterColor }
 * @param red The red value of the water, from 0 to 255.
 * @param green The green value of the water, from 0 to 255.
 * @param blue The blue value of the water, from 0 to 255.
 * @param alpha The alpha (visibility) value of the water, from 0 to 255. Defaults to 200 if not declared.
 * @return returns true if water color was set correctly, false if invalid values were passed.
 * @noSelf
 */
export declare function setWaterColor(
    red: number,
    green: number,
    blue: number,
    alpha?: number
): boolean;

/**
 * This function changes the water rendering order.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetWaterDrawnLast Wiki, setWaterDrawnLast }
 * @param bEnabled : A boolean value determining whether water should be drawn last.
 * @return returns true if the rendering order was changed successfully, false otherwise.
 * @noSelf
 */
export declare function setWaterDrawnLast(
    bEnabled: boolean
): boolean;

/**
 * Sets the height of some or all the water in the game world.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetWaterLevel Wiki, setWaterLevel }
 * @param level the new Z coordinate of the water surface. All water in the game world is set to this
 * height.
 * @param theWater the water element to change.
 * ''or:''
 * @param includeWaterFeatures a boolean indicating whether to also set the level of water features such as ponds and
 * pools.
 * @param includeWaterElements a boolean indicating whether to also set the level of all water elements.
 * @param includeWorldSea a boolean indicating whether to set the level of the sea water
 * @param includeOutsideWorldSea a boolean indicating whether to also set the level of sea water outside the world area,
 * ie. outside -3000, 3000.
 * @return returns true if successful, false in case of failure.
 * @noSelf
 */
export declare function setWaterLevel(
    theWater: Water,
    level: number
): boolean;

/**
 * @see {@link https://wiki.multitheftauto.com/wiki/SetWaterLevel Wiki, setWaterLevel }
 * @noSelf
 */
export declare function setWaterLevel(
    level: number
): boolean;

/**
 * Sets the world position of a corner point of a water area.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetWaterVertexPosition Wiki, setWaterVertexPosition }
 * @param theWater the water element of which to change a vertex.
 * @param vertexIndex the index of the vertex to move. Values range from 1 to 4 for water quads, and 1 to 3 for
 * triangles.
 * @param x the X coordinate to set for the vertex.
 * @param y the Y coordinate to set for the vertex.
 * @param z the Z coordinate to set for the vertex.
 * @return returns true if successful, false otherwise.
 * @noSelf
 */
export declare function setWaterVertexPosition(
    theWater: Water,
    vertexIndex: number,
    x: number,
    y: number,
    z: number
): boolean;

/**
 * This function sets the wave height to the desired value, the default is 0.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetWaveHeight Wiki, setWaveHeight }
 * @param height A float between 0 and 100.
 * @return returns a boolean value true or false that tells you if it was successful or not.
 * @noSelf
 */
export declare function setWaveHeight(
    height: number
): boolean;
