// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

import {
    ProgressBar,
    Gui,
    Txd,
    Dff,
    Col,
    Ifp,
    PrimitiveType,
    Texture,
    ObjectGroup,
    Matrix,
    Browser,
    Light,
    Effect,
    Searchlight,
    Weapon,
    GuiBrowser,
    GuiMemo,
    GuiElement,
    GuiEdit,
    GuiScrollBar,
    GuiWindow,
    Projectile,
    Userdata,
    TextItem,
    Pickup,
    Request,
    Player,
    Blip,
    ColShape,
    Element,
    Ped,
    Resource,
    Team,
    Vehicle,
    XmlNode,
    File,
    Marker,
    Object as MTASAObject,
    RadarArea,
    Water,
    Timer,
    HandleFunction
} from '../structure';

/**
 * This function is used to set the current clothes on a ped.
 * @see {@link https://wiki.multitheftauto.com/wiki/AddPedClothes Wiki, addPedClothes }
 * @param thePed : The ped whose clothes you want to change.
 * @param clothesTexture : A string determining the clothes texture that will be added. See the CJ Clothes|clothes
 * catalog.
 * @param clothesModel : A string determining the clothes model that will be added. See the CJ Clothes|clothes
 * catalog.
 * @param clothesType : A integer representing the clothes slot/type the clothes should be added to. See the CJ
 * Clothes|clothes catalog.
 * @return this function returns true if the clothes were successfully added to the ped, false
 * otherwise.
 */
export function addPedClothes(
    thePed: Ped,
    clothesTexture: string,
    clothesModel: string,
    clothesType: number
): boolean;

/**
 * This function checks if the given ped can fall off bikes.
 * @see {@link https://wiki.multitheftauto.com/wiki/CanPedBeKnockedOffBike Wiki, canPedBeKnockedOffBike }
 * @param thePed the ped you want to check.
 * @return returns true if the ped can be knocked off bikes, false if he cannot or an invalid
 * element was passed.
 */
export function canPedBeKnockedOffBike(
    thePed: Ped
): boolean;

/**
 * Creates a Ped in the GTA world.
 * @see {@link https://wiki.multitheftauto.com/wiki/CreatePed Wiki, createPed }
 * @param modelid A whole integer specifying the Character_Skins|GTASA skin ID.
 * @param x A floating point number representing the X coordinate on the map.
 * @param y A floating point number representing the Y coordinate on the map.
 * @param z A floating point number representing the Z coordinate on the map.
 * @param rot A floating point number representing the rotation in degrees.
 */
export function createPed(
    modelid: number,
    x: number,
    y: number,
    z: number,
    rot?: number
): Ped;

/**
 * This function returns an integer that contains the ammo in a specified peds weapon. See
 * weapon|Weapon Info
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedAmmoInClip Wiki, getPedAmmoInClip }
 * @param thePed The ped whose ammo you want to check.
 * @param weaponSlot an integer representing the weapon slot (set to the peds currently selected slot if not
 * specified).
 * @return returns an int containing the amount of ammo in the specified peds currently selected or
 * specified clip, or 0 if the ped specified is invalid.
 */
export function getPedAmmoInClip(
    thePed: Ped,
    weaponSlot?: number
): number;

/**
 * This function retrieves the analog control state of a ped, as set by
 * setPedAnalogControlState.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedAnalogControlState Wiki, getPedAnalogControlState }
 * @param thePed The ped you wish to retrieve the control state of.
 * @param controlName The control. See control names for a list of possible controls.
 * @param rawValue A bool indicating if it should return the raw player input value (will always return
 * script value for non-player peds).
 * @return returns a float between 0 ( full release ) and 1 ( full push ) indicating the amount the
 * control is pushed.
 * <section name=client-side example class=client show=true>
 * <syntaxhighlight lang=lua>
 * x, y, z = getelementposition(localplayer)
 * rotx, roty, rotz = getelementrotation(localplayer)
 * cj = createped(0, x, y, z)
 * cj2 = createped(0, x, y, z)
 * copcar = createvehicle(597, x, y+5, z+2)
 * copcar2 = createvehicle(597, x+2, y+10, z+4)
 * warppedintovehicle(cj2, copcar2, 0)
 * warppedintovehicle(cj, copcar, 0)
 * function ongetcjanalogcontrolstate()
 * setpedanalogcontrolstate(cj, accelerate, 0.90)
 * if getpedanalogcontrolstate(cj, accelerate, 0.90) then
 * setpedanalogcontrolstate(cj2, brake_reverse, 0.90)
 * end
 * end
 * addeventhandler(onclientrender, getrootelement(), ongetcjanalogcontrolstate)
 * </syntaxhighlight>
 * </section>
 * <br /><br />
 * * this example was created by hydra.
 */
export function getPedAnalogControlState(
    thePed: Ped,
    controlName: string,
    rawValue?: boolean
): number;

/**
 * Gets the animation of a player or ped that was set using setPedAnimation.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedAnimation Wiki, getPedAnimation }
 * @param thePed the player or ped you want to get the animations|animation of.
 * @return <syntaxhighlight lang=lua>string anim, string block, int time, bool loop, bool
 * updateposition, bool interruptable, bool freezelastframe, int blendtime, bool
 * restoretaskonanimend</syntaxhighlight>
 */
export function getPedAnimation(
    thePed: Ped
): LuaMultiReturn<[
    string,
    string
]>;

/**
 * This function returns the current armor of the specified ped.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedArmor Wiki, getPedArmor }
 * @param thePed The ped whose armor you want to check
 * @return a float with the armor, false if an invalid ped was given.
 */
export function getPedArmor(
    thePed: Ped
): number;

/**
 * Returns the 3D world coordinates of a specific bone of a given ped.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedBonePosition Wiki, getPedBonePosition }
 * @param thePed the ped you want to inspect.
 * @param bone the number of the bone to get the position of.
 * <div style="border: 3px red solid; margin-bottom:3px; padding-left:5px;">
 * @param 1 BONE_PELVIS1
 * @param 2 BONE_PELVIS
 * @param 3 BONE_SPINE1
 * @param 4 BONE_UPPERTORSO
 * @param 5 BONE_NECK
 * @param 6 BONE_HEAD2
 * @param 7 BONE_HEAD1
 * @param 8 BONE_HEAD
 * @param 21 BONE_RIGHTUPPERTORSO
 * @param 22 BONE_RIGHTSHOULDER
 * @param 23 BONE_RIGHTELBOW
 * @param 24 BONE_RIGHTWRIST
 * @param 25 BONE_RIGHTHAND
 * @param 26 BONE_RIGHTTHUMB
 * @param 31 BONE_LEFTUPPERTORSO
 * @param 32 BONE_LEFTSHOULDER
 * @param 33 BONE_LEFTELBOW
 * @param 34 BONE_LEFTWRIST
 * @param 35 BONE_LEFTHAND
 * @param 36 BONE_LEFTTHUMB
 * @param 41 BONE_LEFTHIP
 * @param 42 BONE_LEFTKNEE
 * @param 43 BONE_LEFTANKLE
 * @param 44 BONE_LEFTFOOT
 * @param 51 BONE_RIGHTHIP
 * @param 52 BONE_RIGHTKNEE
 * @param 53 BONE_RIGHTANKLE
 * @param 54 BONE_RIGHTFOOT
 * </div>
 * @return returns the x, y, z world position of the bone.
 */
export function getPedBonePosition(
    thePed: Ped,
    bone: number
): LuaMultiReturn<[
    number,
    number,
    number
]>;

/**
 * This function gets the current camera rotation of a ped.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedCameraRotation Wiki, getPedCameraRotation }
 * @param thePed the ped to retrieve the camera rotation of.
 * @return returns the camera rotation of the ped in degrees if successful. returns false if an
 * invalid element was passed.
 */
export function getPedCameraRotation(
    thePed: Ped
): number;

/**
 * This function is used to get the current clothes texture and model of a certain type on a
 * ped.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedClothes Wiki, getPedClothes }
 * @param thePed The ped whose clothes you want to retrieve.
 * @param clothesType The type/slot of clothing you want to get.
 * @return this function returns 2 string|strings, the clothes texture and model. the first return
 * value will be false if this players clothes type is empty or an invalid player was
 * specified.
 */
export function getPedClothes(
    thePed: Ped,
    clothesType: number
): LuaMultiReturn<[
    string,
    string
]>;

/**
 * This function detects the element a ped is standing on. This can be a vehicle or an
 * object.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedContactElement Wiki, getPedContactElement }
 * @param thePed The ped of which you want to get the element he is standing on.
 * @return returns an object or a vehicle if the ped is standing on one, false if he is touching
 * none or an invalid element was passed.
 */
export function getPedContactElement(
    thePed: Ped
): Element;

/**
 * Checks whether a ped or the localplayer has a certain control pressed.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedControlState Wiki, getPedControlState }
 * @param thePed the ped you want to check.
 * @param control the control to get the status of. See control names for a list of valid names.
 * @return returns true if the ped is pressing the specified control, false if not or an invalid
 * argument was passed.
 */
export function getPedControlState(
    thePed: Ped,
    control: string
): boolean;

/**
 * Retrieves the fighting style a player/ped is currently using.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedFightingStyle Wiki, getPedFightingStyle }
 * @param thePed the ped whose current fighting style ID you wish to retrieve.
 * @return returns the peds current fighting style as an integer id, false if it fails to retrieve a
 * value.
 */
export function getPedFightingStyle(
    thePed: Ped
): number;

/**
 * This function returns the current move state for the specified ped.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedMoveState Wiki, getPedMoveState }
 * @param thePed The ped whose move state you want to know
 * @return returns a string indicating the peds move state, or false if the ped is not streamed in,
 * the movement type is unknown, the ped is in a vehicle or the ped is invalid.
 */
export function getPedMoveState(
    thePed: Ped
): string;

/**
 * This function gets the vehicle that the ped is currently in or is trying to enter, if any.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedOccupiedVehicle Wiki, getPedOccupiedVehicle }
 * @param thePed : The ped whose vehicle youre looking up.
 * @return returns the vehicle that the specified ped is in, or false if the ped is not in a vehicle
 * or is an invalid ped.
 */
export function getPedOccupiedVehicle(
    thePed: Ped
): Vehicle;

/**
 * This function gets the seat that a specific ped is sitting in in a vehicle.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedOccupiedVehicleSeat Wiki, getPedOccupiedVehicleSeat }
 * @param thePed : The ped whose vehicle seat youre looking up.
 * @return * returns an integer containing the number of the seat that the ped is currently in:
 * ** 0: front-left
 * ** 1: front-right
 * ** 2: rear-left
 * ** 3: rear-right
 * returns false if the ped is on foot, or the ped doesnt exist.
 */
export function getPedOccupiedVehicleSeat(
    thePed: Ped
): number;

/**
 * This function returns the current oxygen level of the specified ped.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedOxygenLevel Wiki, getPedOxygenLevel }
 * @param thePed The ped whose oxygen level you want to check
 * @return a float with the oxygen level, false if an invalid ped was given.
 */
export function getPedOxygenLevel(
    thePed: Ped
): number;

/**
 * This function is used to get the name of a specified peds current simplest task.<br>
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedSimplestTask Wiki, getPedSimplestTask }
 * @param thePed : The ped whose task you want to retrieve.
 * @return returns a string representing the name of the peds simplest, active task.
 */
export function getPedSimplestTask(
    thePed: Ped
): string;

/**
 * This function returns the value of the specified statistic of a specific ped.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedStat Wiki, getPedStat }
 * @param thePed : The ped whose stat you want to retrieve.
 * @param stat : A whole number determining the stat ID.
 * @return returns the value of the requested statistic.
 */
export function getPedStat(
    thePed: Ped,
    stat: number
): number;

/**
 * This function is used to get the element a ped is currently targeting.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedTarget Wiki, getPedTarget }
 * @param thePed The ped whose target you want to retrieve.
 * @return returns the element thats being targeted, or false if there isnt one.
 * this is only effective on physical gta elements, namely:
 * * players
 * * peds
 * * vehicles
 * * objects
 */
export function getPedTarget(
    thePed: Ped
): Element;

/**
 * This function allows retrieval of where a peds target is blocked. It will only be blocked
 * if there is an obstacle within a peds target range.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedTargetCollision Wiki, getPedTargetCollision }
 * @param targetingPed This is the ped whose target collision you wish to retrieve
 * @return returns three floats, x,y,z, representing the position where the peds target collides, or
 * false if it was unsuccessful.
 */
export function getPedTargetCollision(
    targetingPed: Ped
): LuaMultiReturn<[
    number,
    number,
    number
]>;

/**
 * This function allows retrieval of the position where a peds target range ends, when he is
 * aiming with a weapon.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedTargetEnd Wiki, getPedTargetEnd }
 * @param targetingPed the ped who is targeting whose target end you wish to retrieve
 * @return returns three floats, x,y,z, representing the position where the peds target ends
 * according to his range, or false if it was unsuccessful.
 */
export function getPedTargetEnd(
    targetingPed: Ped
): LuaMultiReturn<[
    number,
    number,
    number
]>;

/**
 * This function allows retrieval of the position a peds target range begins, when he is
 * aiming with a weapon.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedTargetStart Wiki, getPedTargetStart }
 * @param targetingPed The ped whose target start you wish to retrieve
 * @return returns three floats, x,y,z, representing the position where the peds target starts, or
 * false if it was unsuccessful.
 */
export function getPedTargetStart(
    targetingPed: Ped
): LuaMultiReturn<[
    number,
    number,
    number
]>;

/**
 * This function is used to get any simple or complex task of a certain type for a ped.
 * It can provide feedback on all tasks relating to a ped. For example, while jumping,
 * getPedSimplestTask will return TASK_SIMPLE_IN_AIR. If you wanted to know specifically if
 * the player has jumped, you would use this function. If you did you will discover that
 * while jumping Primary task 3 is TASK_COMPLEX_JUMP.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedTask Wiki, getPedTask }
 * @param thePed : The ped whose task you want to retrieve.
 * @param priority : A string determining which set of tasks you want to retrieve it from. This must be
 * either primary or secondary.
 * @param taskType : An integer value representing the task type (or slot) you want to get the task from.
 * Types can be:
 * @param PRIMARY TASKS
 * @param 0 TASK_SECONDARY_ATTACK
 * @param 1 TASK_SECONDARY_DUCK
 * @param 2 TASK_SECONDARY_SAY
 * @param 3 TASK_SECONDARY_FACIAL_COMPLEX
 * @param 4 TASK_SECONDARY_PARTIAL_ANIM
 * @param SECONDARY TASKS
 * @param 5 TASK_SECONDARY_IK
 * @return returns the name of the most complex task. see list of player tasks for valid strings.
 * returns false if invalid arguments are specified or if there is no task of the type
 * specified.
 * <br>
 * returns between 1 and 4 strings. the first string contains the name of the most complex
 * task, with simpler sub-tasks being named in the following strings. see list of player
 * tasks for valid strings. returns false if invalid arguments are specified or if there is
 * no task of the type specified.
 */
export function getPedTask(
    thePed: Ped,
    priority: string,
    taskType: number
): LuaMultiReturn<[
    string,
    string,
    string,
    string
]>;

/**
 * This function returns an integer that contains the total ammo in a specified peds weapon.
 * See weapon|Weapon Info
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedTotalAmmo Wiki, getPedTotalAmmo }
 * @param thePed : The ped whose ammo you want to check.
 * @param weaponSlot : an integer representing the weapon slot (set to the peds current slot if not given)
 * @return returns an int containing the total amount of ammo for the specified peds weapon, or 0 if
 * the ped specified is invalid.
 */
export function getPedTotalAmmo(
    thePed: Ped,
    weaponSlot?: number
): number;

/**
 * Gets the current voice of a ped.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedVoice Wiki, getPedVoice }
 * @param thePed the ped to get the voice of.
 * @return if successul, returns the current voice type name and the voice name of the ped (see ped
 * voices for possible names). returns false in case of failure.
 */
export function getPedVoice(
    thePed: Ped
): LuaMultiReturn<[
    string,
    string
]>;

/**
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedWalkingStyle Wiki, getPedWalkingStyle }
 * @param thePed the ped whose walking style to retrieve.
 * @return returns the walking style id if successful, false otherwise. the possible walking styles
 * are as follows:
 */
export function getPedWalkingStyle(
    thePed: Ped
): number;

/**
 * This function tells you which weapon type is in a certain weapon|weapon slot of a ped.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedWeapon Wiki, getPedWeapon }
 * @param thePed : the ped you want to get the weapon type from.
 * @param weaponSlot : an integer representing the weapon|weapon slot (set to the peds current slot if not
 * given).
 * @return returns an int indicating the type of the weapon the ped has in the specified slot. if
 * the slot is empty, it returns 0.
 * it should be noted that if a ped runs out of ammo for a weapon, it will still return the
 * id of that weapon in the slot (even if it appears as if the ped does not have a weapon at
 * all), though getpedtotalammo will return 0.  therefore, getpedtotalammo should be used in
 * conjunction with getpedweapon in order to check if a ped has a weapon.
 */
export function getPedWeapon(
    thePed: Ped,
    weaponSlot?: number
): number;

/**
 * Returns the world position of the muzzle of the weapon that a ped is currently carrying.
 * The weapon muzzle is the end of the gun barrel where the bullets/rockets/... come out.
 * The position may not be accurate if the ped is off screen.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedWeaponMuzzlePosition Wiki, getPedWeaponMuzzlePosition }
 * @param thePed the ped whose weapon muzzle position to retrieve.
 * @return if successful, returns the x/y/z coordinates of the weapon muzzle. returns false
 * otherwise.
 */
export function getPedWeaponMuzzlePosition(
    thePed: Ped
): LuaMultiReturn<[
    number,
    number,
    number
]>;

/**
 * This function gets a peds selected weapon slot.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetPedWeaponSlot Wiki, getPedWeaponSlot }
 * @param thePed the ped to get the current weapon slot of.
 * @return returns the selected weapon slot id on success, false otherwise.
 */
export function getPedWeaponSlot(
    thePed: Ped
): number;

/**
 * This function returns all valid ped models.
 * @see {@link https://wiki.multitheftauto.com/wiki/GetValidPedModels Wiki, getValidPedModels }
 * @return returns a table with all valid ped models.
 */
export function getValidPedModels(): LuaTable;

/**
 * This function gives the specified weapon to the specified ped. This function cant be used
 * on players, use giveWeapon for that.
 * This function is mainly useful for client side created peds however you can use it on a
 * server side ped, though note that the weapon wouldnt be synced between clients unless
 * your script gives the weapon to the ped on every client.
 * There is an optional argument to specify ammunition and whether to set as the current
 * weapon. If you dont specify an ammo value it will give 30 ammo by default and for a melee
 * weapon you can specify just 1 or above.
 * *When setting ammo for Weapon|weapons in slot 0,1,10,11 or 12 the maximum ammo is 1
 * *When setting ammo for Weapon|weapons in slot 3,4,5 the ammo is added
 * *When setting ammo for Weapon|weapons in slot 2,6,7,8,9 and the slot weapon is changing,
 * the ammo is replaced
 * @see {@link https://wiki.multitheftauto.com/wiki/GivePedWeapon Wiki, givePedWeapon }
 * @param thePed A ped element.
 * @param weapon A whole number integer that refers to a Weapon ID. Click Weapon|here for a list of
 * possible weapon IDs.
 * @param ammo A whole number integer serving as the ammo amount for the given weapon. For weapons that
 * do not require ammo, such as melee, this should be at least 1.
 * @param setAsCurrent A boolean value determining whether or not the weapon will be set as the peds currently
 * selected weapon.
 * @return returns true if weapon was successfully given to the ped, false otherwise.
 */
export function givePedWeapon(
    thePed: Ped,
    weapon: number,
    ammo?: number,
    setAsCurrent?: boolean
): boolean;

/**
 * This function checks if the specified ped is choking (coughing) or not. This happens as a
 * result of weapons that produce smoke - smoke grenades, fire extinguisher and the spray
 * can.
 * @see {@link https://wiki.multitheftauto.com/wiki/IsPedChoking Wiki, isPedChoking }
 * @param thePed : The ped you wish to check
 * @return returns true if the ped is choking, false otherwise.
 */
export function isPedChoking(
    thePed: Ped
): boolean;

/**
 * This function checks if the specified ped is dead or not.
 * @see {@link https://wiki.multitheftauto.com/wiki/IsPedDead Wiki, isPedDead }
 * @param thePed : the ped you want to check up on.
 * @return returns true if the ped is dead, false otherwise.
 */
export function isPedDead(
    thePed: Ped
): boolean;

/**
 * This function checks if the ped is in the driveby state.
 * @see {@link https://wiki.multitheftauto.com/wiki/IsPedDoingGangDriveby Wiki, isPedDoingGangDriveby }
 * @param thePed The ped element whose state is to be checked.
 * @return returns true if the driveby state is enabled, false otherwise.
 */
export function isPedDoingGangDriveby(
    thePed: Ped
): boolean;

/**
 * This function checks if the specified ped is carrying out a certain List of player
 * tasks|task.
 * @see {@link https://wiki.multitheftauto.com/wiki/IsPedDoingTask Wiki, isPedDoingTask }
 * @param thePed : The ped you want to check.
 * @param taskName : A string containing the name of the List of player tasks|task youre checking for.
 * @return returns true if the player is currently doing the task, false otherwise.
 */
export function isPedDoingTask(
    thePed: Ped,
    taskName: string
): boolean;

/**
 * This function checks if the specified ped is ducked (crouched) or not.
 * @see {@link https://wiki.multitheftauto.com/wiki/IsPedDucked Wiki, isPedDucked }
 * @param thePed : The ped to check.
 * @return returns true if the ped is ducked, false otherwise.
 */
export function isPedDucked(
    thePed: Ped
): boolean;

/**
 * This function checks if player feets are bleeding.
 * @see {@link https://wiki.multitheftauto.com/wiki/IsPedFootBloodEnabled Wiki, isPedFootBloodEnabled }
 * @param thePlayer The player to give bloody foot prints to.
 * @return returns true if feets are bleeding, false otherwise
 */
export function isPedFootBloodEnabled(
    thePlayer: Element
): boolean;

/**
 * With this function, you can check if a ped has a head or not.
 * @see {@link https://wiki.multitheftauto.com/wiki/IsPedHeadless Wiki, isPedHeadless }
 * @param thePed : The ped to check.
 * @return returns true if the ped is headless, false otherwise.
 */
export function isPedHeadless(
    thePed: Ped
): boolean;

/**
 * Checks whether or not a given ped is currently in a vehicle.
 * @see {@link https://wiki.multitheftauto.com/wiki/IsPedInVehicle Wiki, isPedInVehicle }
 * @param thePed the ped you want to check.
 * @return returns true if the ped is in a vehicle, false if he is on foot or an invalid element was
 * passed.
 */
export function isPedInVehicle(
    thePed: Ped
): boolean;

/**
 * This function checks if the specified ped is on fire or not.
 * @see {@link https://wiki.multitheftauto.com/wiki/IsPedOnFire Wiki, isPedOnFire }
 * @param thePed : The ped to check.
 * @return returns true if the ped is on fire, false otherwise.
 */
export function isPedOnFire(
    thePed: Ped
): boolean;

/**
 * This function is used to determine whether or not a ped is on the ground. This is for
 * on-foot usage only.
 * @see {@link https://wiki.multitheftauto.com/wiki/IsPedOnGround Wiki, isPedOnGround }
 * @param thePed The ped you are checking.
 * @return returns true if the ped is on foot and on the ground, false otherwise, even if he is in a
 * car that stands still or on object outside world map.
 */
export function isPedOnGround(
    thePed: Ped
): boolean;

/**
 * This function is used to determine whether or not a ped is currently reloading their
 * weapon. Useful to stop certain quick reload exploits.}}
 * @see {@link https://wiki.multitheftauto.com/wiki/IsPedReloadingWeapon Wiki, isPedReloadingWeapon }
 * @param thePed The ped you are checking.
 * @return returns true if the ped is currently reloading a weapon, false otherwise.
 */
export function isPedReloadingWeapon(
    thePed: Ped
): boolean;

/**
 * This function checks whether health target markers are drawn as set by
 * setPedTargetingMarkerEnabled or not.
 * @see {@link https://wiki.multitheftauto.com/wiki/IsPedTargetingMarkerEnabled Wiki, isPedTargetingMarkerEnabled }
 * @return returns true if the health target markers are enabled, false if not.
 */
export function isPedTargetingMarkerEnabled(): boolean;

/**
 * @see {@link https://wiki.multitheftauto.com/wiki/IsPedWearingJetpack Wiki, isPedWearingJetpack }
 * @param thePed the ped you want to check
 * @return returns true if the ped is carrying a jetpack, false if he is not or an invalid element
 * was passed.
 */
export function isPedWearingJetpack(
    thePed: Ped
): boolean;

/**
 * This function kills the specified ped.
 * From v1.5.3 onwards this function is now available client side. Only works on client side
 * peds.
 * @see {@link https://wiki.multitheftauto.com/wiki/KillPed Wiki, killPed }
 * @param thePed The ped to kill
 * @param theKiller The ped responsible for the kill
 * @param weapon The ID of the weapon or Damage Types that should appear to have killed the ped (doesnt
 * affect how they die)
 * @param bodyPart The ID of the body part that should appear to have been hit by the weapon (doesnt affect
 * how they die)
 * @param stealth Boolean value, representing whether or not this a stealth kill
 * @return returns true if the ped was killed, false if the ped specified could not be killed or is
 * invalid.
 */
export function killPed(
    thePed: Ped,
    theKiller?: Ped,
    weapon?: number,
    bodyPart?: number,
    stealth?: boolean
): boolean;

/**
 * This function is used to remove the current clothes of a certain type on a ped. It will
 * remove them if the clothesTexture and clothesModel arent specified, or if they match the
 * current clothes on that slot.
 * @see {@link https://wiki.multitheftauto.com/wiki/RemovePedClothes Wiki, removePedClothes }
 * @param thePed : The ped you want to remove clothes from.
 * @param clothesType : the clothes slot/type to remove. See the CJ Clothes|clothes catalog.
 * @param clothesTexture : (Server only) A string determining the clothes texture that will be removed. See the CJ
 * Clothes|clothes catalog.
 * @param clothesModel : (Server only) A string determining the clothes model that will be removed. See the CJ
 * Clothes|clothes catalog.
 * @return this function returns true if the clothes were successfully removed from the ped, false
 * otherwise.
 */
export function removePedClothes(
    thePed: Ped,
    clothesType: number,
    clothesTexture?: string,
    clothesModel?: string
): boolean;

/**
 * This function removes a ped from a vehicle immediately. This works for drivers and
 * passengers. Note that this removes the ped from the vehicle and puts him in the exact
 * position where the command was initiated.
 * Available client side from 1.3.1 (It will only work with client side vehicles and peds)
 * @see {@link https://wiki.multitheftauto.com/wiki/RemovePedFromVehicle Wiki, removePedFromVehicle }
 * @param thePed The ped you wish to remove from a vehicle
 * @return returns true if the operation was successful, false if the specified ped is not valid or
 * if it isnt in a vehicle.
 */
export function removePedFromVehicle(
    thePed: Ped
): boolean;

/**
 * This sets the analog control state of a control for the local player.
 * To change the analog controls for a ped, please use setPedAnalogControlState.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetAnalogControlState Wiki, setAnalogControlState }
 * @param control The control that you want to set the state of. See control names for a list of possible
 * controls.
 * @param state A float between 0 and 1 indicating the amount the control is pressed. If no value is
 * provided, the analog control is removed.
 * <noinclude>{{New feature/item|3.0300|1.5.8|20756|
 * *'''forceOverrideNextFrame: ''' A [[bool]] indicating if the player input should force
 * fully overriden for the next frame.
 * }}</noinclude>
 * @return returns true if the control state was successfully set, false otherwise.
 */
export function setAnalogControlState(
    control: string,
    state?: number,
    forceOverrideNextFrame?: boolean
): boolean;

/**
 * This function allows you to set a peds aim target to a specific point. If a ped is within
 * a certain range defined by getPedTargetStart and getPedTargetEnd he will be targeted and
 * shot.
 * Note: If you wish to make a ped shoot you must use this in conjunction with an equipped
 * weapon and setPedControlState.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedAimTarget Wiki, setPedAimTarget }
 * @param thePed The ped whose target you want to set. Only peds and remote players will work; this
 * function has no effect on the local player.
 * @param x The x coordinate of the aim target point.
 * @param y The y coordinate of the aim target point.
 * @param z The z coordinate of the aim target point.
 * @return returns true if the function was successful, false otherwise.
 */
export function setPedAimTarget(
    thePed: Ped,
    x: number,
    y: number,
    z: number
): boolean;

/**
 * Sets an analog state of a specified peds control, as if they pressed or released it.
 * This function only works on peds, to change the analog control state for a player, please
 * use setAnalogControlState.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedAnalogControlState Wiki, setPedAnalogControlState }
 * @param thePed The ped you wish to set the control state of.
 * @param control The control that you want to set the state of. See control names for a list of possible
 * controls.
 * @param state A float between 0 and 1 indicating the amount the control is pressed.
 * @return returns true if the control state was successfully set, false otherwise.
 */
export function setPedAnalogControlState(
    thePed: Ped,
    control: string,
    state: number
): boolean;

/**
 * Sets the current Animations|animation of a player or ped. Not specifying the type of
 * animation will automatically cancel the current one.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedAnimation Wiki, setPedAnimation }
 * @param thePed the player or ped you want to apply an Animations|animation to.
 * @param block the Animations|animation blocks name.
 * @param anim the name of the Animations|animation within the block.
 * @param time how long the animation will run for in milliseconds.
 * @param loop indicates whether or not the animation will loop.
 * @param updatePosition will change the actual coordinates of the ped according to the animation. Use this for
 * e.g. walking animations.
 * @param interruptable if set to false other tasks wont be able to interupt the animation. Setting this to false
 * also gives this function more power to override other animations that are running. For
 * example, squatting after a jump can be terminated.
 * @param freezeLastFrame if set to true after animation the last frame will be frozen, otherwise the animation
 * will end and controls will return.
 * @param blendTime how long the animation will mixed with the previous one in milliseconds.
 * @param retainPedState will restore the task which was playing before calling this function. Useful for
 * restoring the crouch task after animation ends. This may be extended in the future to
 * support other states/tasks.
 * |16632}}
 * @return returns true if succesful, false otherwise.
 */
export function setPedAnimation(
    thePed: Ped,
    block?: string,
    anim?: string,
    time?: number,
    loop?: boolean,
    updatePosition?: boolean,
    interruptable?: boolean,
    freezeLastFrame?: boolean,
    blendTime?: number,
    retainPedState?: boolean
): boolean;

/**
 * Sets the current animation progress of a player or ped.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedAnimationProgress Wiki, setPedAnimationProgress }
 * @param thePed the player or ped you want to change animation progress.
 * @param anim the animation name currently applied to ped, if not supplied, the animation will stop
 * @param progress current animation progress you want to apply, value from 0.0 to 1.0, if not supplied will
 * default to 0.0
 * @return returns true if successful, false otherwise.
 */
export function setPedAnimationProgress(
    thePed: Ped,
    anim?: string,
    progress?: number
): boolean;

/**
 * Sets the speed of a currently running animation for a particular player or ped.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedAnimationSpeed Wiki, setPedAnimationSpeed }
 * @param thePed the player or ped you want to change animation speed of.
 * @param anim the animation name it will affect.
 * @param speed a float containing the speed between 0.0–1.0 you want to apply to the animation. This
 * limitation may be adjusted in the future, so do not provide speeds outside this boundary.
 * {{New feature/item|3.0158|1.5.7|20395|The limit is now 0.0 to 10.0.}} {{Warning|Setting
 * speed higher than 1 can cause issues with some animations.}}
 * @return returns true if successful, false otherwise.
 */
export function setPedAnimationSpeed(
    thePed: Ped,
    anim?: string,
    speed?: number
): boolean;

/**
 * This function allows you to set the armor value of a ped.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedArmor Wiki, setPedArmor }
 * @param thePed : the ped whose armor you want to modify.
 * @param armor : the amount of armor you want to set on the ped. Valid values are from 0 to 100.
 * @return returns true if the armor was changed succesfully. returns false if an invalid ped was
 * specified, or the armor value specified is out of acceptable range.
 */
export function setPedArmor(
    thePed: Ped,
    armor: number
): boolean;

/**
 * This function sets the camera rotation of a ped, e.g. where its camera will look at. Dont
 * confuse this with getCameraMatrix, because that function is designed for fixed (scripted)
 * camera moves.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedCameraRotation Wiki, setPedCameraRotation }
 * @param thePed The ped whose camera rotation is to be changed.
 * @param cameraRotation The new direction that the ped will walk if you set their forwards control state. If the
 * ped is the local player, it will also change where his camera is looking at if it isnt
 * fixed (i.e. camera target is the local player).
 * @return returns true if the camera rotation was changed, false otherwise.
 */
export function setPedCameraRotation(
    thePed: Ped,
    cameraRotation: number
): boolean;

/**
 * This function controls if a ped can fall of his bike by accident - namely by banging into
 * a wall.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedCanBeKnockedOffBike Wiki, setPedCanBeKnockedOffBike }
 * @param thePed the ped whose knockoffstatus is being changed
 * @param canBeKnockedOffBike true or false
 */
export function setPedCanBeKnockedOffBike(
    thePed: Ped,
    canBeKnockedOffBike: boolean
): boolean;

/**
 * This function makes a ped or player press or release a certain control.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedControlState Wiki, setPedControlState }
 * @param thePed the ped you want to press or release a control.
 * @param control the name of the control of which to change the state. See control names for a list of
 * valid names.
 * @param state the new control state. true means pressed, false is released.
 * @return returns true if successful, false if otherwise.
 */
export function setPedControlState(
    thePed: Ped,
    control: string,
    state: boolean
): boolean;

/**
 * This function sets the driveby state of a ped.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedDoingGangDriveby Wiki, setPedDoingGangDriveby }
 * @param thePed The ped element whose state is to be changed.
 * @param state A boolean value representing the drive-by state, true meaning enabled and false disabled.
 * @return returns true if the driveby state could be changed, false otherwise.
 */
export function setPedDoingGangDriveby(
    thePed: Ped,
    state: boolean
): boolean;

/**
 * * If forced to enter as a passenger, it doesnt work if all passenger seats are occupied.
 * * If forced to enter as a driver, the ped can take off the vehicles current driver.
 * ** If the drivers door is blocked by something, the ped can use the oposite front door to
 * reach the drivers seat, taking off the passenger which is using the oposite front seat.
 * * If the vehicle is not specified:
 * ** The ped will search a vehicles door within 20 m that can be used to enter the vehicle.
 * ** If the vehicle have a driver, the limit becomes 10 m.
 * * If the vehicle is specified:
 * ** The ped will search the vehicle within 50 m that can be entered. The doors arent taken
 * into account. It means that it doesnt work if the vehicles door is in range but the
 * vehicle itself is not.
 * ** If the vehicle have a driver, the limit becomes 10 m.
 * * The limit becomes 50 m after the ped found the vehicle and started to run toward it.
 * * The ped stops the animation if the distance from vehicle reaches 50 m while the ped is
 * running towards it.
 * * The ped reserves the seat he is trying to use. It means nobody can use the respective
 * seat while the ped is running toward it.
 * ** Exception: If the ped is forced to enter as a passenger and is going to use the front
 * door, the ped can wait if someone is using it to go the driver seat.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedEnterVehicle Wiki, setPedEnterVehicle }
 * @param thePed The player or ped to enter the vehicle.
 * **''Note: The player must be the local player.''
 * **''Note: The ped must be synced by the client. Use [[isElementSyncer]] clientside to
 * check if the client is syncing. Use [[setElementSyncer]] serverside to change the syncer
 * manually.''
 * @param vehicle The vehicle to enter. If no vehicle is set, the ped will enter the nearest vehicle within
 * 20 m.
 * @param passenger If set to true, the ped will enter as passenger in the nearest available seat, otherwise
 * he will enter as driver.
 * @return returns true if the function was successful, false otherwise.
 * when this function returns true, the client will ask server for permission to enter a
 * vehicle. actually entering can still fail in the following cases
 * *the function is used on a ped, but another client is not on version 1.5.8 r20740 or
 * newer.
 * *another player or ped is already entering, exiting or jacking the same vehicle and seat.
 * *movement input or damage can interrupt the task. use getpedtask to monitor what the ped
 * is doing.
 * this function returns false in the following cases
 * *invalid arguments were parsed.
 * *the function is used on a ped, but the server is not on version 1.5.8 r20740 or newer.
 * *time passed since last enter/exit for this ped is less than 1500 ms.
 * *onclientvehiclestartenter was cancelled by a script.
 * *the ped has an active task_primary task. use getpedtask to monitor what the ped is doing.
 */
export function setPedEnterVehicle(
    thePed: Ped,
    theVehicle?: Vehicle,
    passenger?: boolean
): boolean;

/**
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedExitVehicle Wiki, setPedExitVehicle }
 * @param thePed The player or ped to exit the vehicle.
 * @return returns true if the function was successful, false otherwise.
 * when this function returns true, the client will ask server for permission to exit a
 * vehicle. exiting can still fail in the following cases
 * *the function is used on a ped, but another client is not on version 1.5.8 r20740 or
 * newer.
 * this function returns false in the following cases
 * *invalid arguments were parsed.
 * *the function is used on a ped but the server is not on version 1.5.8 r20740 or newer.
 * *time passed since last enter/exit for this ped is less than 1500 ms.
 * *the ped is getting jacked.
 */
export function setPedExitVehicle(
    thePed: Ped
): boolean;

/**
 * Changes a peds fighting style. Most styles only change the special attack which is done
 * using the Aim and Enter keys.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedFightingStyle Wiki, setPedFightingStyle }
 * @param thePed The ped whose fighting style to change.
 * @param style The fighting style ID to apply.
 * @return returns true in case of success, false otherwise.
 */
export function setPedFightingStyle(
    thePed: Ped,
    style: number
): boolean;

/**
 * This function makes a players foot prints bloody.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedFootBloodEnabled Wiki, setPedFootBloodEnabled }
 * @param thePlayer The player to give bloody foot prints to.
 * @param enabled Boolean specifying whether or not to have bloody feet.
 * @return returns true if changing the players bloody feet status worked.
 */
export function setPedFootBloodEnabled(
    thePlayer: Element,
    enabled: boolean
): boolean;

/**
 * With this function, you can set if a ped has a head or not.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedHeadless Wiki, setPedHeadless }
 * @param thePed : The ped to check.
 * @param headState : head state, use true if you want the ped be headless, use false to give back the head.
 * @return returns true if successful, false otherwise
 */
export function setPedHeadless(
    thePed: Ped,
    headState: boolean
): boolean;

/**
 * Makes a ped turn his head and look at a specific world position or element.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedLookAt Wiki, setPedLookAt }
 * @param thePed the ped to change the lookat of.
 * @param x the x coordinate of the world position to look at.
 * @param y the y coordinate of the world position to look at.
 * @param z the z coordinate of the world position to look at.
 * @param time the time, in milliseconds, during which the ped will look at the target. Once this time
 * has elapsed, he will look ahead again like before the function was applied. A time of 0
 * will immediately stop any lookat. A negative time will make the ped look at the target
 * indefinitely.
 * @param blend the time, in milliseconds, during which the look will blend.
 * @param target if this argument is specified, the position arguments will be ignored and the peds gaze
 * will follow the specified element instead. Can be a player, a vehicle, another ped etc.
 */
export function setPedLookAt(
    thePed: Ped,
    x: number,
    y: number,
    z: number,
    time: number,
    blend: number,
    target: Element
): boolean;

/**
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedLookAt Wiki, setPedLookAt }
 */
export function setPedLookAt(
    thePed: Ped,
    x: number,
    y: number,
    z: number,
    target: Element
): boolean;

/**
 * This function can be used to set a ped on fire or extinguish a fire on it.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedOnFire Wiki, setPedOnFire }
 * @param thePed The ped that we want to set/unset
 * @param isOnFire true to set the ped on fire, false to extinguish any fire on him
 * @return returns true if successful, false otherwise
 */
export function setPedOnFire(
    thePed: Ped,
    isOnFire: boolean
): boolean;

/**
 * This function allows you to set the oxygen level of a ped.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedOxygenLevel Wiki, setPedOxygenLevel }
 * @param thePed : the ped whose oxygen level you want to modify.
 * @param oxygen : the amount of oxygen you want to set on the ped. Native values are from 0 to 1000. Each
 * of the stamina (22) and underwater stamina (225) Template:Stats|stat maximum adds a bonus
 * of 1500. So the maximum oxygen level is 4000.
 * @return returns true if the oxygen level was changed succesfully. returns false if an invalid ped
 * and/or oxygen level was specified.
 */
export function setPedOxygenLevel(
    thePed: Ped,
    oxygen: number
): boolean;

/**
 * *Things like infinite run, fire proof CJ, 150 armor have special activation flags. They
 * need a way to be triggered on/off.
 * This function allows you to set the value of a specific statistic for a ped. Visual stats
 * (FAT and BODY_MUSCLE) can only be used on the CJ skin, they have no effect on other skins.
 * When this function is used client side, it can only be used on client side created peds.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedStat Wiki, setPedStat }
 * @param thePed : the ped whose statistic you want to modify.
 * @param stat : the stat ID.
 * @param value : the new value of the stat. It must be between 0 and 1000.
 * @return returns true if the statistic was changed succesfully. returns false if an invalid player
 * is specified, if the stat-id/value is out of acceptable range or if the fat or
 * body_muscle stats are used on non-cj players.
 */
export function setPedStat(
    thePed: Ped,
    stat: number,
    value: number
): boolean;

/**
 * This function is used to toggle the health target marker on top of all pedestrians.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedTargetingMarkerEnabled Wiki, setPedTargetingMarkerEnabled }
 * @param enabled A boolean denoting whether we want to enable (true) or disable (false) the markers.
 * @return returns true if the markers were enabled, false if werent or if invalid arguments are
 * passed.
 */
export function setPedTargetingMarkerEnabled(
    enabled: boolean
): boolean;

/**
 * Changes the voice of a ped.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedVoice Wiki, setPedVoice }
 * @param thePed the ped whose voice to change.
 * @param voiceType the voice type. See ped voices for possible types.
 * @param voiceName the voice name within the specified type. See ped voices for possible voices.
 * @return returns true when the voice was successfully set, false otherwise.
 */
export function setPedVoice(
    thePed: Ped,
    voiceType: string,
    voiceName: string
): boolean;

/**
 * Sets the walking style of a ped. A walking style consists of a set of animations that are
 * used for walking, running etc.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedWalkingStyle Wiki, setPedWalkingStyle }
 * @param thePed the ped whose walking style to change.
 * @param style the walking style to set.
 * The possible walking styles are:
 * @return returns true if successful, false otherwise.
 */
export function setPedWalkingStyle(
    thePed: Ped,
    style: number
): boolean;

/**
 * This function changes the selected weapon slot of a ped.
 * @see {@link https://wiki.multitheftauto.com/wiki/SetPedWeaponSlot Wiki, setPedWeaponSlot }
 * @param thePed the ped whose weapon slot you want to set. In a clientside script, this cannot be used on
 * remote players.
 * @param weaponSlot the weapon slot to set.
 * @return returns true if successful in setting the peds equipped weapon slot, false otherwise.
 */
export function setPedWeaponSlot(
    thePed: Ped,
    weaponSlot: number
): boolean;

/**
 * This function is used to warp or force a ped into a vehicle.  There are no animations
 * involved when this happens.
 * Available client side from 1.3.1 (It will only work with client side vehicles and peds)
 * @see {@link https://wiki.multitheftauto.com/wiki/WarpPedIntoVehicle Wiki, warpPedIntoVehicle }
 * @param thePed The ped which you wish to force inside the vehicle
 * @param theVehicle The vehicle you wish to force the ped into
 * @param seat An integer representing the seat ID.
 * @param 0 Front-left
 * @param 1 Front-right
 * @param 2 Rear-left
 * @param 3 Rear-right
 * @return returns true if the operation is successful, false otherwise.
 */
export function warpPedIntoVehicle(
    thePed: Ped,
    theVehicle: Vehicle,
    seat?: number
): boolean;
