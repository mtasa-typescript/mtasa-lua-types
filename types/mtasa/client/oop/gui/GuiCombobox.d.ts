// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

import {
    ProgressBar,
    Gui,
    EngineTXD,
    EngineDFF,
    EngineCOL,
    EngineIFP,
    PrimitiveType,
    Texture,
    ObjectGroup,
    Matrix,
    Browser,
    Light,
    Effect,
    Searchlight,
    Weapon,
    GuiBrowser,
    GuiMemo,
    GuiElement,
    GuiEdit,
    GuiScrollBar,
    GuiWindow,
    Projectile,
    Material,
    Userdata,
    TextItem,
    Pickup,
    Request,
    Player,
    Blip,
    ColShape,
    Element,
    Ped,
    Resource,
    Team,
    Vehicle,
    XmlNode,
    File,
    Marker,
    MTASAObject,
    RadarArea,
    Water,
    Timer,
    HandleFunction
} from '../../structure';

/** @customConstructor GuiCombobox */
export class GuiCombobox extends GuiElement {
    /**
     * This function returns the index of the selected combobox item.
     */
    selected: number;

    /**
     */
    open: boolean;

    /**
     * Adds an item to a combobox.
     * @see {@link https://wiki.multitheftauto.com/wiki/GuiComboBoxAddItem Wiki, guiComboBoxAddItem }
     * @return returns the item id if it has been created, false otherwise.
     */
    addItem(): number;

    /**
     * This function removes all the items from a combobox.
     * @see {@link https://wiki.multitheftauto.com/wiki/GuiComboBoxClear Wiki, guiComboBoxClear }
     * @return returns true if the combobox element is valid and has been cleared successfully, false
     * otherwise.
     */
    clear(): boolean;

    /**
     * This function retrieves the text from a specific combobox item.
     * @see {@link https://wiki.multitheftauto.com/wiki/GuiComboBoxGetItemText Wiki, guiComboBoxGetItemText }
     * @return returns the text of the item if the arguments are right, false otherwise.
     */
    getItemText(): string;

    /**
     * This function returns the index of the selected combobox item.
     * @see {@link https://wiki.multitheftauto.com/wiki/GuiComboBoxGetSelected Wiki, guiComboBoxGetSelected }
     * @return returns the index of the selected item if the specified combobox is valid and has a
     * selected item, -1 if no item is selected, nil otherwise.
     */
    getSelected(): number;

    /**
     * @see {@link https://wiki.multitheftauto.com/wiki/GuiComboBoxIsOpen Wiki, guiComboBoxIsOpen }
     * @return returns true if combobox is opened, false if combobox is closed, nil otherwise.
     */
    isOpen(): boolean;

    /**
     * This function removes an item from a combobox.
     * @see {@link https://wiki.multitheftauto.com/wiki/GuiComboBoxRemoveItem Wiki, guiComboBoxRemoveItem }
     * @return returns true if the item was removes successfully, false otherwise.
     */
    removeItem(): boolean;

    /**
     * This function changes the text of a combobox item.
     * @see {@link https://wiki.multitheftauto.com/wiki/GuiComboBoxSetItemText Wiki, guiComboBoxSetItemText }
     * @param text The text you want to put in (does NOT accept numbers, use tostring() for that)
     * @return returns true if the text was set successfully, false otherwise.
     */
    setItemText(
        text: string
    ): boolean;

    /**
     * @see {@link https://wiki.multitheftauto.com/wiki/GuiComboBoxSetOpen Wiki, guiComboBoxSetOpen }
     * @return returns true if is successful, false otherwise.
     */
    setOpen(): boolean;

    /**
     * This function sets the selected item from a combobox.
     * @see {@link https://wiki.multitheftauto.com/wiki/GuiComboBoxSetSelected Wiki, guiComboBoxSetSelected }
     * @return returns true if the selected item has been changed successfully, false otherwise.
     */
    setSelected(): boolean;

    /**
     * This function creates a combobox GUI element, which you can compare to a gridlist with a
     * dropdown feature.
     * @see {@link https://wiki.multitheftauto.com/wiki/GuiCreateComboBox Wiki, guiCreateComboBox }
     * @param width A float of the width of the GUI combobox. This is affected by the relative argument.
     * @param height A float of the height of the GUI combobox. This is affected by the relative argument.
     * Note: height must be enough to fit the drop down menu, else the drop down wont appear.
     * @param caption A string for what the title of your combobox will be. This will be shown if no item is
     * selected.
     * @param relative This is whether sizes and positioning are relative.  If this is true, then all
     * x,y,width,height floats must be between 0 and 1, representing sizes relative to the
     * parent.
     * @param parent This is the parent that the GUI combobox is attached to.  If the relative argument is
     * true, sizes and positioning will be made relative to this parent. If the relative
     * argument is false, positioning will be the number of offset pixels from the parents
     * origin. If no parent is passed, the parent will become the screen - causing positioning
     * and sizing according to screen positioning.
     * @return returns an element of the created combobox if it was successfully created, false
     * otherwise.
     */
    constructor(
        width: number,
        height: number,
        caption: string,
        relative: boolean,
        parent?: Element
    );
}
