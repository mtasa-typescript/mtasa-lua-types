// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

import { EventNames } from './all_event_names';
import {
    TextDisplay,
    Account,
    ACL,
    ACLGroup,
    Ban,
    XML,
    Userdata,
    TextItem,
    Pickup,
    Request,
    Player,
    Blip,
    ColShape,
    Element,
    Ped,
    Resource,
    Team,
    Vehicle,
    XmlNode,
    File,
    Marker,
    MTASAObject,
    RadarArea,
    Water,
    Timer,
    HandleFunction,
    TimerCallbackFunction,
    FetchRemoteCallback,
    GenericEventHandler,
    CommandHandler,
    BindKeyCallback,
    BindKeyCallbackVarArgs,
    ControlName,
    KeyName,
    KeyState,
    Vector2,
    Vector3,
    Vector4,
    Matrix,
} from '../structure';

export interface OnElementClicked extends GenericEventHandler {
    name: EventNames.OnElementClicked;
    function: (
        this: void,
        mouseButton: string,
        buttonState: string,
        playerWhoClicked: Player,
        clickPosX: number,
        clickPosY: number,
        clickPosZ: number,
    ) => void;
}

export interface OnElementColShapeHit extends GenericEventHandler {
    name: EventNames.OnElementColShapeHit;
    function: (
        this: void,
        theColShape: ColShape,
        matchingDimension: boolean,
    ) => void;
}

export interface OnElementColShapeLeave extends GenericEventHandler {
    name: EventNames.OnElementColShapeLeave;
    function: (
        this: void,
        theColShape: ColShape,
        matchingDimension: boolean,
    ) => void;
}

export interface OnElementDataChange extends GenericEventHandler {
    name: EventNames.OnElementDataChange;
    function: (
        this: void,
        theKey: string,
        oldValue: unknown,
        newValue: unknown,
    ) => void;
}

export interface OnElementDestroy extends GenericEventHandler {
    name: EventNames.OnElementDestroy;
    function: (this: void) => void;
}

export interface OnElementDimensionChange extends GenericEventHandler {
    name: EventNames.OnElementDimensionChange;
    function: (this: void, oldDimension: number, newDimension: number) => void;
}

export interface OnElementInteriorChange extends GenericEventHandler {
    name: EventNames.OnElementInteriorChange;
    function: (this: void, oldInterior: number, newInterior: number) => void;
}

export interface OnElementModelChange extends GenericEventHandler {
    name: EventNames.OnElementModelChange;
    function: (this: void, oldModel: number, newModel: number) => void;
}

export interface OnElementStartSync extends GenericEventHandler {
    name: EventNames.OnElementStartSync;
    function: (this: void, newSyncer: Player) => void;
}

export interface OnElementStopSync extends GenericEventHandler {
    name: EventNames.OnElementStopSync;
    function: (this: void, oldSyncer: Player) => void;
}
