// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

import {
    TextDisplay,
    ACL,
    ACLGroup,
    Ban,
    XML,
    Userdata,
    TextItem,
    Pickup,
    Request,
    Player,
    Blip,
    ColShape,
    Element,
    Ped,
    Resource,
    Team,
    Vehicle,
    XmlNode,
    File,
    Marker,
    MTASAObject,
    RadarArea,
    Water,
    Timer,
    HandleFunction,
    TimerCallbackFunction,
    FetchRemoteCallback,
    GenericEventHandler,
    CommandHandler,
    BindKeyCallback,
    BindKeyCallbackVarArgs,
    ControlName,
    KeyName,
    KeyState,
    Vector2,
    Vector3,
    Vector4,
    Matrix,
} from '../structure';

/** @customConstructor Account */
export class Account {
    /**
     * This function retrieves the ID of an account.
     */
    id: number;

    /**
     * This function retrieves the IP address of an account.
     */
    ip: string;

    /**
     * This function retrieves the name of an account.
     */
    name: string;

    /**
     * This function returns the player element that is currently using a specified account,
     * i.e. is logged into it. Only one player can use an account at a time.
     */
    player: Player;

    /**
     * This function returns the last serial that logged onto the specified account.
     */
    serial: string;

    /**
     * This function returns a table containing all the user data for the account provided
     */
    data: LuaTable;

    /**
     * This function checks to see if an account is a guest account. A guest account is an
     * account automatically created for a user when they join the server and deleted when they
     * quit or login to another account. Data stored in a guest account is not stored after the
     * player has left the server. As a consequence, this function will check if a player is
     * logged in or not.
     */
    guest: boolean;

    /**
     * This function sets the password of the specified account.
     */
    password: boolean;

    /**
     * This function adds an account to the list of registered accounts of the current server.
     * @see https://wiki.multitheftauto.com/wiki/AddAccount
     * @param name The name of the account you wish to make, this normally is the players name.
     * @param pass The password to set for this account for future logins.
     * @param allowCaseVariations Whether the username is case sensitive (if this is set to true, usernames Bob and bob
     * will refer to different accounts)
     * @return returns an account or false if the account already exists or an error occured.
     */
    static add(
        name: string,
        pass: string,
        allowCaseVariations?: boolean,
    ): Account;

    /**
     * This function copies all of the data from one account to another.
     * @see https://wiki.multitheftauto.com/wiki/CopyAccountData
     * @param fromAccount The account you wish to copy the data from.
     * @return returns a true if the accounts were valid, false otherwise.
     */
    copyDataTo(fromAccount: Account): boolean;

    /**
     * This function returns an account for a specific user.
     * @see https://wiki.multitheftauto.com/wiki/GetAccount
     * @param username The username of the account you want to retrieve
     * @param password The password for the account. If this argument is not specified, you can get the account
     * whatever password it is, otherwise the password must match the accounts.
     * @param caseSensitive : Specifies whether to ignore the case when searching for an account.
     * |16257}}
     * @return returns an account or false if an account matching the username specified (and password,
     * if specified) could not be found.
     */
    constructor(username: string, password?: string, caseSensitive?: boolean);

    /**
     * This function retrieves a string that has been stored using setAccountData. Data stored
     * as account data is persistent across users sessions and maps, unless they are logged into
     * a guest account.
     * @see https://wiki.multitheftauto.com/wiki/GetAccountData
     * @param key The key under which the data is stored
     * @return returns a string containing the stored data or false if no data was stored under that key.
     */
    getData(key: string): string;

    /**
     * This function retrieves the ID of an account.
     * @see https://wiki.multitheftauto.com/wiki/GetAccountID
     * @return returns a int containing the accounts id, false if the account does not exist or an
     * invalid argument was passed to the function.
     */
    getID(): number;

    /**
     * This function retrieves the IP address of an account.
     * @see https://wiki.multitheftauto.com/wiki/GetAccountIP
     * @return returns a string containing the accounts ip, false if the account does not exist or an
     * invalid argument was passed to the function.
     */
    getIP(): string;

    /**
     * This function retrieves the name of an account.
     * @see https://wiki.multitheftauto.com/wiki/GetAccountName
     * @return returns a string containing the accounts name, false if the account does not exist or an
     * invalid argument was passed to the function.
     */
    getName(): string;

    /**
     * This function returns the player element that is currently using a specified account,
     * i.e. is logged into it. Only one player can use an account at a time.
     * @see https://wiki.multitheftauto.com/wiki/GetAccountPlayer
     * @return returns a player element if the account is currently in use, false otherwise.
     */
    getPlayer(): Player;

    /**
     * This function returns a table over all the accounts that exist in the server internal.db
     * file. (Note: accounts.xml is no longer used after version 1.0.4)
     * @see https://wiki.multitheftauto.com/wiki/GetAccounts
     * @return a table over the accounts that exist in the server internal.db file. this table might be
     * empty.
     */
    static getAll(): LuaTable;

    /**
     * This function returns a table containing all accounts with specified dataName and value
     * (set with setAccountData).
     * @see https://wiki.multitheftauto.com/wiki/GetAccountsByData
     * @param dataName The name of the data
     * @param value The value the dataName should have
     * @return returns table containing the accounts associated with specified value at dataname.
     * returns false if invalid arguments were specified.
     */
    static getAllByData(dataName: string, value: string): LuaTable;

    /**
     * @see https://wiki.multitheftauto.com/wiki/GetAccountsByIP
     * @param ip The IP to get accounts from.
     * @return returns table containing the accounts associated with specified ip-address. returns false
     * if invalid arguments were specified.
     */
    static getAllByIP(ip: string): LuaTable;

    /**
     * This function returns a table containing all accounts that were logged onto from
     * specified serial. If the serial is empty string, it will return all accounts that were
     * never logged onto.
     * @see https://wiki.multitheftauto.com/wiki/GetAccountsBySerial
     * @param serial The serial to get accounts from
     * @return returns table containing the accounts associated with specified serial. returns false if
     * invalid arguments were specified.
     */
    static getAllBySerial(serial: string): LuaTable;

    /**
     * This function returns the last serial that logged onto the specified account.
     * @see https://wiki.multitheftauto.com/wiki/GetAccountSerial
     * @return returns string containing the serial, the string is empty if the account was never used.
     * returns false if invalid arguments were specified.
     */
    getSerial(): string;

    /**
     * This function returns a table containing all the user data for the account provided
     * @see https://wiki.multitheftauto.com/wiki/GetAllAccountData
     * @return a table containing all the user data. this table might be empty.
     */
    getAllData(): LuaTable;

    /**
     * This function checks to see if an account is a guest account. A guest account is an
     * account automatically created for a user when they join the server and deleted when they
     * quit or login to another account. Data stored in a guest account is not stored after the
     * player has left the server. As a consequence, this function will check if a player is
     * logged in or not.
     * @see https://wiki.multitheftauto.com/wiki/IsGuestAccount
     * @return returns true if the account is a guest account, false otherwise.
     */
    isGuest(): boolean;

    /**
     * This function is used to delete existing player accounts.
     * @see https://wiki.multitheftauto.com/wiki/RemoveAccount
     * @return returns true if account was successfully removed, false if the account does not exist.
     */
    remove(): boolean;

    /**
     * This function sets a string to be stored in an account. This can then be retrieved using
     * getAccountData. Data stored as account data is persistent across users sessions and maps,
     * unless they are logged into a guest account. Even if logged into a guest account, account
     * data can be useful as a way to store a reference to your own account system, though its
     * persistence is equivalent to that of using setElementData on the players element.
     * @see https://wiki.multitheftauto.com/wiki/SetAccountData
     * @param key The key under which you wish to store the data
     * @param value The value you wish to store. Set to false to remove the data. NOTE: you cannot store
     * tables as values, but you can use toJSON strings.
     * @return returns a true if the account data was set, false if an invalid argument was specified.
     */
    setData(key: string, value: unknown): boolean;

    /**
     * This function sets the name of an account.
     * @see https://wiki.multitheftauto.com/wiki/SetAccountName
     * @param name The new name.
     * @param allowCaseVariations Whether the username is case sensitive (if this is set to true, usernames Bob and bob
     * will refer to different accounts)
     * @return returns a true if the account name was set, false if an invalid argument was specified.
     */
    setName(name: string, allowCaseVariations?: boolean): boolean;

    /**
     * This function sets the password of the specified account.
     * @see https://wiki.multitheftauto.com/wiki/SetAccountPassword
     * @param password the password
     * @return returns true if the password was set correctly, false otherwise.
     */
    setPassword(password: string): boolean;
}
