// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

import {
    TextDisplay,
    Account,
    ACL,
    ACLGroup,
    Ban,
    XML,
    Userdata,
    TextItem,
    Pickup,
    Request,
    Player,
    Blip,
    ColShape,
    Element,
    Ped,
    Resource,
    Team,
    Vehicle,
    XmlNode,
    File,
    Marker,
    MTASAObject,
    RadarArea,
    Water,
    Timer,
    HandleFunction,
    TimerCallbackFunction,
    FetchRemoteCallback,
    GenericEventHandler,
    CommandHandler,
    BindKeyCallback,
    BindKeyCallbackVarArgs,
    ControlName,
    KeyName,
    KeyState,
    Vector2,
    Vector3,
    Vector4,
    Matrix,
} from '../structure';

/**
 * This function is used to forcefully show a players radar map.
 * @see https://wiki.multitheftauto.com/wiki/ForcePlayerMap
 * @param thePlayer : A player object referencing the specified player
 * @param forceOn : A boolean value representing whether or not the players radar map will be forced on
 * @noSelf
 */
export declare function forcePlayerMap(
    thePlayer: Player,
    forceOn: boolean,
): boolean;

/**
 * This function returns a table of all the alive players on the server. Opposite function
 * of getDeadPlayers.
 * @see https://wiki.multitheftauto.com/wiki/GetAlivePlayers
 * @return returns a table of all the alive players.
 * @noSelf
 */
export declare function getAlivePlayers(): LuaTable;

/**
 * This function returns a table of all currently dead players on the server.
 * @see https://wiki.multitheftauto.com/wiki/GetDeadPlayers
 * @return returns a table of all the dead players.
 * @noSelf
 */
export declare function getDeadPlayers(): LuaTable;

/**
 * This function returns anti-cheat info for a player. The info returned by this function
 * can change over time, so use the server event onPlayerACInfo instead.
 * @see https://wiki.multitheftauto.com/wiki/GetPlayerACInfo
 * @param thePlayer The player whose anti-cheat info you want to check.
 * @return returns a table with the following entries:
 * * detectedac: a string containing a comma separated list of anti-cheat_guide|anti-cheat
 * codes the player has triggered.
 * *d3d9size: a number representing the file size of any custom d3d9.dll the player may have
 * installed.
 * *d3d9md5: a string containing the md5 of any custom d3d9.dll the player may have
 * installed.
 * *d3d9sha256: a string containing the sha256 of any custom d3d9.dll the player may have
 * installed.
 * @noSelf
 */
export declare function getPlayerACInfo(thePlayer: Element): LuaTable;

/**
 * @see https://wiki.multitheftauto.com/wiki/GetPlayerAnnounceValue
 * @param thePlayer This is the Player whos value you want to retrieve.
 * @param key The name of the key.
 * @return this function returns a string containing the requested value if a valid key was
 * specified or false otherwise.
 * @noSelf
 */
export declare function getPlayerAnnounceValue(
    thePlayer: Element,
    key: string,
): string;

/**
 * This function allows you to check the current blur level of a specified player.
 * @see https://wiki.multitheftauto.com/wiki/GetPlayerBlurLevel
 * @param thePlayer The player whose blur level you want to check.
 * @return returns the players blur level if successful, false if an invalid player was given.
 * @noSelf
 */
export declare function getPlayerBlurLevel(thePlayer: Player): number;

/**
 * This function returns the number of players currently connected to the server.
 * @see https://wiki.multitheftauto.com/wiki/GetPlayerCount
 * @return returns the number of players connected to the server as an int.
 * @noSelf
 */
export declare function getPlayerCount(): number;

/**
 * This function returns a player element for the player with the name passed to the
 * function.
 * @see https://wiki.multitheftauto.com/wiki/GetPlayerFromName
 * @param playerName : A string containing the name of the player you want to reference
 * @return returns a player element for the player with the nickname provided. if there is no player
 * with that name, false is returned.
 * @noSelf
 */
export declare function getPlayerFromName(playerName: string): Player;

/**
 * This function gets the amount of time in milliseconds that a players position has not
 * changed.
 * @see https://wiki.multitheftauto.com/wiki/GetPlayerIdleTime
 * @param thePlayer : The player you wish to get the idle time of.
 * @return returns the amount of time in milliseconds that a player has been idle, false otherwise.
 * @noSelf
 */
export declare function getPlayerIdleTime(thePlayer: Player): number;

/**
 * This function returns a string containing the IP address of the player.
 * @see https://wiki.multitheftauto.com/wiki/GetPlayerIP
 * @param thePlayer The player element you want to get the IP of.
 * @return returns a string containing the requested playerss ip, or false if the player passed to
 * the function is invalid.
 * @noSelf
 */
export declare function getPlayerIP(thePlayer: Player): string;

/**
 * Returns the amount of money a player currently has.
 * @see https://wiki.multitheftauto.com/wiki/GetPlayerMoney
 * @param thePlayer The player you wish the retrieve the amount of money from.
 * @return returns an integer with the amount of money the specified player has, false if the player
 * is invalid.
 * @noSelf
 */
export declare function getPlayerMoney(thePlayer: Player): number;

/**
 * This function returns a string containing the name of the specified player.
 * @see https://wiki.multitheftauto.com/wiki/GetPlayerName
 * @param thePlayer the player you want to get the name of
 * @return returns a string containing the requested players name, or false if the player passed to
 * the function is invalid.
 * @noSelf
 */
export declare function getPlayerName(thePlayer: Player): string;

/**
 * This function gets the current color of a players name tag as RGB values. These are in
 * the range 0-255.
 * @see https://wiki.multitheftauto.com/wiki/GetPlayerNametagColor
 * @param thePlayer The player whose name tag RGB color values you wish to retrieve.
 * @return returns red, green and blue values if an existent player was specified, false otherwise.
 * @noSelf
 */
export declare function getPlayerNametagColor(
    thePlayer: Player,
): LuaMultiReturn<[number, number, number]>;

/**
 * This will allow you to retrieve the name tag a player is currently using.
 * @see https://wiki.multitheftauto.com/wiki/GetPlayerNametagText
 * @param thePlayer The person whose name tag you want to retrieve
 * @return returns a string with the nametag text, false if the player is invalid.
 * @noSelf
 */
export declare function getPlayerNametagText(thePlayer: Player): string;

/**
 * This function returns the ping of a specified player. The ping is the number of
 * milliseconds that data takes to travel from the players client to the server or vice
 * versa. If a player is using a VPN their ping will still be returned correctly.
 * @see https://wiki.multitheftauto.com/wiki/GetPlayerPing
 * @param thePlayer : The player whose ping you want to determine.
 * @return returns the ping as an int, or false if the player is invalid.
 * @noSelf
 */
export declare function getPlayerPing(thePlayer: Player): number;

/**
 * This will allow you to retrieve the player current debug script level.
 * @see https://wiki.multitheftauto.com/wiki/GetPlayerScriptDebugLevel
 * @param thePlayer The person whose debug script level you want
 * @return returns an int with the player debug script level, false if the player is invalid.
 * @noSelf
 */
export declare function getPlayerScriptDebugLevel(thePlayer: Player): number;

/**
 * This function returns the serial for a specified player.
 * @see https://wiki.multitheftauto.com/wiki/GetPlayerSerial
 * @param thePlayer A player object referencing the specified player.
 * @return returns the serial as a string if it was found, false otherwise.
 * @noSelf
 */
export declare function getPlayerSerial(thePlayer: Player): string;

/**
 * This function gets the client version of the specified player as a sortable string. The
 * string is always 15 characters long and is formatted as follows:
 * * 1 character representing the major version
 * * 1 dot character
 * * 1 character representing the minor version
 * * 1 dot character
 * * 1 character representing the maintenance version
 * * 1 dash character
 * * 1 character representing the build type
 * * 1 dot character
 * * 5 characters representing the build number
 * * 1 dot character
 * * 1 character representing the build revision
 * An example of a version string would be: 1.0.4-9.01746.0
 * Where the first three numbers represent the major/minor/maintenance version, i.e.
 * 1.0.4<br>
 * The fourth number is 9, which means its a release build, (Development and beta builds
 * have lower numbers here)<br>
 * And the fifth and sixth numbers represent the build number.
 * @see https://wiki.multitheftauto.com/wiki/GetPlayerVersion
 * @param thePlayer The player whose client version you wish to get.
 * @return returns a string containing the client version, or false if the player is invalid.
 * @noSelf
 */
export declare function getPlayerVersion(thePlayer: Player): string;

/**
 * This function gets a players current wanted level. The wanted level is indicated by the
 * amount of stars a player has on the GTA HUD.
 * @see https://wiki.multitheftauto.com/wiki/GetPlayerWantedLevel
 * @param thePlayer The player whose wanted level you wish to get
 * @noSelf
 */
export declare function getPlayerWantedLevel(thePlayer: Player): number;

/**
 * This function returns a random player.
 * @see https://wiki.multitheftauto.com/wiki/GetRandomPlayer
 * @return returns a random player, false if the server is empty.
 * @noSelf
 */
export declare function getRandomPlayer(): Player;

/**
 * This function adds money to a players current money amount.  To set absolute values,
 * setPlayerMoney can be used.<br>
 * @see https://wiki.multitheftauto.com/wiki/GivePlayerMoney
 * @param thePlayer the player you are giving the money to.
 * @param amount a positive integer number specifying the amount of money to give to the player.
 * @noSelf
 */
export declare function givePlayerMoney(
    thePlayer: Player,
    amount: number,
): boolean;

/**
 * This function checks if the specified players radar map has been forced on or not.
 * @see https://wiki.multitheftauto.com/wiki/IsPlayerMapForced
 * @param thePlayer A player object referencing the specified player
 * @return returns true if the players radar map is forced on, false otherwise.
 * @noSelf
 */
export declare function isPlayerMapForced(thePlayer: Player): boolean;

/**
 * Use this function to check if a player has been muted.
 * @see https://wiki.multitheftauto.com/wiki/IsPlayerMuted
 * @param thePlayer The player you are checking.
 * @return returns true if the player is muted and false otherwise.
 * @noSelf
 */
export declare function isPlayerMuted(thePlayer: Player): boolean;

/**
 * This function will allow you to determine if a players name tag is currently showing.
 * @see https://wiki.multitheftauto.com/wiki/IsPlayerNametagShowing
 * @param thePlayer The player whose current name tag condition you want to check
 * @return returns true if the players name tag is being shown, false otherwise.
 * @noSelf
 */
export declare function isPlayerNametagShowing(thePlayer: Player): boolean;

/**
 * Added to client side.
 * This function allows you to make the server reveal whether or not voice is currently
 * enabled.
 * @see https://wiki.multitheftauto.com/wiki/IsVoiceEnabled
 * @return returns true if the voice is enabled on the server, false otherwise.
 * @noSelf
 */
export declare function isVoiceEnabled(): boolean;

/**
 * This function redirects the player to a specified server.
 * @see https://wiki.multitheftauto.com/wiki/RedirectPlayer
 * @param thePlayer The player you want to redirect
 * @param serverIP The IP address (or domain name that resolves to the IP address) of the server you want to
 * redirect the player to. Use an empty string to reconnect to the same server.
 * @param serverPort The game port of the server you want to redirect the player to, this is usually 22003.
 * Set to zero to use the same port as the current server.
 * @param serverPassword The password for the server if its protected
 * @return returns true if the player was redirected successfully, false if bad arguments were
 * passed.
 * @noSelf
 */
export declare function redirectPlayer(
    thePlayer: Player,
    serverIP: string,
    serverPort: number,
    serverPassword?: string,
): boolean;

/**
 * This function will force the specified player to resend their AC info, triggering the
 * onPlayerACInfo event again.
 * @see https://wiki.multitheftauto.com/wiki/ResendPlayerACInfo
 * @param thePlayer : A player object referencing the specified player
 * @return returns true if the ac info will be resent, false otherwise.
 * @noSelf
 */
export declare function resendPlayerACInfo(thePlayer: Player): boolean;

/**
 * This function will force the specified player to resend their mod info, triggering the
 * onPlayerModInfo event again.
 * @see https://wiki.multitheftauto.com/wiki/ResendPlayerModInfo
 * @param thePlayer : A player object referencing the specified player
 * @return returns true if the mod info will be resent, false otherwise.
 * @noSelf
 */
export declare function resendPlayerModInfo(thePlayer: Player): boolean;

/**
 * This function allows you to change ASE announce values for any player using a specified
 * key.
 * As an example this can be used to change the score value which will be shown at
 * https://www.game-state.com/ game-state.coms server list.
 * For server-wide changes you can use setRuleValue!
 * @see https://wiki.multitheftauto.com/wiki/SetPlayerAnnounceValue
 * @param thePlayer The player whos announce value you wish to change.
 * @param key The key which the value will be stored at.
 * @param value The value you wish to store.
 * @return returns true if the value was set succesfully, false otherwise.
 * @noSelf
 */
export declare function setPlayerAnnounceValue(
    thePlayer: Element,
    key: string,
    value: string,
): boolean;

/**
 * Sets the motion blur level on the clients screen. Accepts a value between 0 and 255.
 * @see https://wiki.multitheftauto.com/wiki/SetPlayerBlurLevel
 * @param thePlayer The player whose blur level will be changed.
 * @param level The level to set the blur to (default: 36)
 * @noSelf
 */
export declare function setPlayerBlurLevel(
    thePlayer: Player,
    level: number,
): boolean;

/**
 * This function will show or hide a part of the players HUD.
 * @see https://wiki.multitheftauto.com/wiki/SetPlayerHudComponentVisible
 * @param thePlayer The player element for which you wish to show/hide a HUD component
 * @param component The component you wish to show or hide. Valid values are:
 * @param all All of the following at the same time
 * @param ammo The display showing how much ammo the player has in their weapon
 * @param area_name The text that appears containing the name of the area a player has entered
 * @param armour The display showing the players armor
 * @param breath The display showing the players breath
 * @param clock The display showing the in-game time
 * @param health The display showing the players health
 * @param money The display showing how much money the player has
 * @param radar The bottom-left corner miniradar
 * @param vehicle_name The text that appears containing the players vehicle name when the player enters a vehicle
 * @param weapon The display showing the players weapon
 * @param radio The display showing the radio label
 * @param wanted The display showing the players wanted level
 * @param crosshair The weapon crosshair and sniper scope
 * @param show Specify if the component should be shown (true) or hidden (false)
 * @noSelf
 */
export declare function setPlayerHudComponentVisible(
    thePlayer: Player,
    component: string,
    show: boolean,
): boolean;

/**
 * Sets a players money to a certain value, regardless of current player money. It should be
 * noted that setting negative values does not work and in fact gives the player large
 * amounts of money.
 * @see https://wiki.multitheftauto.com/wiki/SetPlayerMoney
 * @param thePlayer Which player to set the money of.
 * @param amount A whole integer specifying the new amount of money the player will have.
 * @param instant If set to true money will be set instantly without counting up/down like in
 * singleplayer.}}
 * @noSelf
 */
export declare function setPlayerMoney(
    thePlayer: Player,
    amount: number,
    instant?: boolean,
): boolean;

/**
 * Use this function to mute or unmute the player.
 * @see https://wiki.multitheftauto.com/wiki/SetPlayerMuted
 * @param thePlayer The player you are muting or unmuting.
 * @param state Use true to mute and false to unmute the player.
 * @return returns true if the player was successfully muted or unmuted, false otherwise.
 * @noSelf
 */
export declare function setPlayerMuted(
    thePlayer: Player,
    state: boolean,
): boolean;

/**
 * This function changes the specified players name. Note that any change made to a players
 * name with this function is not saved in their settings so the name change only lasts till
 * they disconnect.
 * @see https://wiki.multitheftauto.com/wiki/SetPlayerName
 * @param thePlayer the player that will have its name set.
 * @param newName the new name to set for the player.
 * @return returns true if the player name was changed succesfully, false if invalid arguments are
 * specified.
 * @noSelf
 */
export declare function setPlayerName(
    thePlayer: Player,
    newName: string,
): boolean;

/**
 * This allows you to change the RGB color mixture in the name tags of players.
 * @see https://wiki.multitheftauto.com/wiki/SetPlayerNametagColor
 * @param thePlayer The player whose name tag text you wish to change the color of
 * @param r The amount of red you want in the mixture of RGB (0-255 is valid)
 * @param g The amount of green you want in the mixture of RGB (0-255 is valid)
 * @param b The amount of blue you want in the mixture of RGB (0-255 is valid)
 * @param false If false is specified instead of the colors, the nametag color will reset to defaulting
 * to your team color.
 * @return returns true if the function was successful, false otherwise.
 * @noSelf
 */
export declare function setPlayerNametagColor(
    thePlayer: Player,
    r: number,
    g: number,
    b: number,
): boolean;

/**
 * Use this to define whether the players name tag is visible or invisible.
 * @see https://wiki.multitheftauto.com/wiki/SetPlayerNametagShowing
 * @param thePlayer Define the player whos tag visiblity status you want to change
 * @param showing Use true or false to show/hide the tag
 * @return returns true if successful, false otherwise
 * @noSelf
 */
export declare function setPlayerNametagShowing(
    thePlayer: Player,
    showing: boolean,
): boolean;

/**
 * This will change the text of a players nickname in the world to something besides the
 * nickname he chose. This will not change the players actual nickname, it only changes the
 * visible aspect inside the world (you will see his original nickname in the scoreboard and
 * will refer to his original name in scripts).
 * @see https://wiki.multitheftauto.com/wiki/SetPlayerNametagText
 * @param thePlayer The player whose nickname text you wish to change
 * @param text The new nickname text that will be displayed
 * @return returns true if successful, false otherwise.
 * @noSelf
 */
export declare function setPlayerNametagText(
    thePlayer: Player,
    text: string,
): boolean;

/**
 * This will set players debug level, equivalent to Debugging|debugscript <level>.
 * @see https://wiki.multitheftauto.com/wiki/SetPlayerScriptDebugLevel
 * @param thePlayer The player whose debug level you wish to change
 * @param level 0: close debug console, 1: only errors, 2: errors and warnings, 3: errors, warnings and
 * info messages
 * @return returns true if successful, false otherwise.
 * @noSelf
 */
export declare function setPlayerScriptDebugLevel(
    thePlayer: Player,
    level: number,
): boolean;

/**
 * This function allows you to change who can hear the voice of a player.
 * @see https://wiki.multitheftauto.com/wiki/SetPlayerVoiceBroadcastTo
 * @param thePlayer The player you wish to change
 * @param broadcastTo Element or table of elements who should hear the voice from this player
 * @return returns true if the value was set successfully, false otherwise.
 * @noSelf
 */
export declare function setPlayerVoiceBroadcastTo(
    thePlayer: Element,
    broadcastTo: any,
): boolean;

/**
 * This function allows you to mute voices for a player.
 * @see https://wiki.multitheftauto.com/wiki/SetPlayerVoiceIgnoreFrom
 * @param thePlayer The player you wish to change
 * @param ignoreFrom Element or table of elements which the player should not hear voices from. Use nil if no
 * one should be ignored.
 * @return returns true if the value was set successfully, false otherwise.
 * @noSelf
 */
export declare function setPlayerVoiceIgnoreFrom(
    thePlayer: Element,
    ignoreFrom: any,
): boolean;

/**
 * This function is used to set a players wanted level. The wanted level is indicated by the
 * amount of stars a player has on the GTA HUD.
 * @see https://wiki.multitheftauto.com/wiki/SetPlayerWantedLevel
 * @param thePlayer The player whose wanted level is to be set
 * @param stars An integer from 0 to 6 representing the wanted level
 * @return returns true if the wanted level was set successfully, false if any of the arguments were
 * invalid.
 * @noSelf
 */
export declare function setPlayerWantedLevel(
    thePlayer: Player,
    stars: number,
): boolean;

/**
 * This function spawns the player at an arbitary point on the map.<br>
 * @see https://wiki.multitheftauto.com/wiki/SpawnPlayer
 * @param thePlayer The player you want to spawn.
 * @param x The x co-ordinate to spawn the player at.
 * @param y The y co-ordinate to spawn the player at.
 * @param z The z co-ordinate to spawn the player at.
 * @param rotation rotation of the player on spawn.
 * @param skinID players skin on spawn. Character Skins
 * @param interior interior the player will spawn into. Interior IDs
 * @param dimension The ID of the dimension that the player should be in.
 * @param theTeam the team the player will join.
 * @return returns true if the player was spawned successfully, false otherwise.
 * @noSelf
 */
export declare function spawnPlayer(
    thePlayer: Player,
    x: number,
    y: number,
    z: number,
    rotation?: number,
    skinID?: number,
    interior?: number,
    dimension?: number,
    theTeam?: Team,
): boolean;

/**
 * This function subtracts money from a players current money amount.
 * @see https://wiki.multitheftauto.com/wiki/TakePlayerMoney
 * @param thePlayer the player you are taking the money from.
 * @param amount an integer number specifying the amount of money to take from the player.
 * @noSelf
 */
export declare function takePlayerMoney(
    thePlayer: Player,
    amount: number,
): boolean;

/**
 * This function forces a client to capture the current screen output and send it back to
 * the server. The image will contain the GTA HUD and the output of any dxDraw functions
 * that are not flagged as post GUI. The image specifically excludes the chat box and all
 * GUI (including the client console). The result is received with the event
 * onPlayerScreenShot.
 * @see https://wiki.multitheftauto.com/wiki/TakePlayerScreenShot
 * @param thePlayer the player to get the screen capture from.
 * @param width the width of the capture image.
 * @param height the height of the capture image.
 * @param tag A string to help identify the screen capture. The string is passed to the matching
 * onPlayerScreenShot event for your personal convenience.
 * @param quality Quality of the final JPEG image from 0 to 100. A lower value can reduce the memory used
 * by the image considerably which will result in faster and less intrusive uploads.
 * @param maxBandwith The amount of client upload bandwidth to use (in bytes per second) when sending the image.
 * *'''maxPacketSize: ''' The maximum size of one packet.
 * @return returns true if the function was successfully, false if invalid arguments are specified.
 * @noSelf
 */
export declare function takePlayerScreenShot(
    thePlayer: Player,
    width: number,
    height: number,
    tag?: string,
    quality?: number,
    maxBandwith?: number,
    maxPacketSize?: number,
): boolean;
