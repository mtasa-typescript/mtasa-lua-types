// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

import {
    TextDisplay,
    Account,
    ACL,
    ACLGroup,
    Ban,
    XML,
    Userdata,
    TextItem,
    Pickup,
    Request,
    Player,
    Blip,
    ColShape,
    Element,
    Ped,
    Resource,
    Team,
    Vehicle,
    XmlNode,
    File,
    Marker,
    MTASAObject,
    RadarArea,
    Water,
    Timer,
    HandleFunction,
    TimerCallbackFunction,
    FetchRemoteCallback,
    GenericEventHandler,
    CommandHandler,
    BindKeyCallback,
    BindKeyCallbackVarArgs,
    ControlName,
    KeyName,
    KeyState,
    Vector2,
    Vector3,
    Vector4,
    Matrix,
} from '../structure';

/**
 * This function will fade a players camera to a color or back to normal over a specified
 * time period. This will also affect the sound volume for the player (50% faded = 50%
 * volume, full fade = no sound). For clientside scripts you can perform 2 fade ins or fade
 * outs in a row, but for serverside scripts you must use one then the other.
 * @see https://wiki.multitheftauto.com/wiki/FadeCamera
 * @param thePlayer The player whose camera you wish to fade.
 * @param fadeIn Should the camera be faded in or out? Pass true to fade the camera in, false to fade it
 * out to a color.
 * @param timeToFade The number of seconds it should take to fade.
 * @param red The amount of red in the color that the camera fades out to (0 - 255). Not required for
 * fading in.
 * @param green The amount of green in the color that the camera fades out to (0 - 255). Not required for
 * fading in.
 * @param blue The amount of blue in the color that the camera fades out to (0 - 255). Not required for
 * fading in.
 * @noSelf
 */
export declare function fadeCamera(
    thePlayer: Player,
    fadeIn: boolean,
    timeToFade?: number,
    red?: number,
    green?: number,
    blue?: number,
): boolean;

/**
 * Returns the interior of the local camera (independent of the interior of the local
 * player).
 * @see https://wiki.multitheftauto.com/wiki/GetCameraInterior
 * @param thePlayer : The player whose camera interior you want to get.
 * @noSelf
 */
export declare function getCameraInterior(thePlayer: Player): number;

/**
 * This function gets the position of the camera and the position of the point it is facing.
 * @see https://wiki.multitheftauto.com/wiki/GetCameraMatrix
 * @param thePlayer The player whose camera matrix is to be returned.
 * @noSelf
 */
export declare function getCameraMatrix(
    thePlayer: Player,
): LuaMultiReturn<
    [number, number, number, number, number, number, number, number]
>;

/**
 * This function returns an element that corresponds to the current target of the specified
 * players camera (i.e. what it is following).
 * @see https://wiki.multitheftauto.com/wiki/GetCameraTarget
 * @param thePlayer The player whose camera you wish to receive the target of.
 * @noSelf
 */
export declare function getCameraTarget(thePlayer: Player): Element;

/**
 * Sets the interior of the local camera. Only the interior of the camera is changed, the
 * local player stays in the interior he was in.
 * @see https://wiki.multitheftauto.com/wiki/SetCameraInterior
 * @param thePlayer the player whose camera interior will be set.
 * @param interior the interior to place the camera in.
 * @noSelf
 */
export declare function setCameraInterior(
    thePlayer: Player,
    interior: number,
): boolean;

/**
 * This function sets the cameras position and direction. The first three arguments are the
 * point at which the camera lies, the last three are the point the camera faces (or the
 * point it looks at).
 * @see https://wiki.multitheftauto.com/wiki/SetCameraMatrix
 * @param thePlayer The player whose camera is to be changed.
 * @param positionX The x coordinate of the cameras position.
 * @param positionY The y coordinate of the cameras position.
 * @param positionZ The z coordinate of the cameras position.
 * @param {{New feature/item|3.0141|1.4.1|7005|Instead of six coordinates, or two vectors, a Matrix can be supplied.}}
 * @param lookAtX The x coordinate of the point the camera faces.
 * @param lookAtY The y coordinate of the point the camera faces.
 * @param lookAtZ The z coordinate of the point the camera faces.
 * @param roll The camera roll angle, -180 to 180. A value of 0 means the camera sits straight, positive
 * values will turn it counter-clockwise and negative values will turn it clockwise. -180 or
 * 180 means the camera is upside down.
 * @param fov the field of view angle, 0.01 to 180. The higher this value is, the more you will be able
 * to see what is to your sides.
 * @noSelf
 */
export declare function setCameraMatrix(
    thePlayer: Player,
    positionX: number,
    positionY: number,
    positionZ: number,
    lookAtX?: number,
    lookAtY?: number,
    lookAtZ?: number,
    roll?: number,
    fov?: number,
): boolean;

/**
 * This function allows you to set a players camera to follow other elements instead.
 * Currently supported element type is:
 * *Players
 * @see https://wiki.multitheftauto.com/wiki/SetCameraTarget
 * @param thePlayer The player whose camera you wish to modify.
 * @param target The player who you want the camera to follow. If none is specified, the camera will
 * target the player.
 * @noSelf
 */
export declare function setCameraTarget(
    thePlayer: Player,
    target?: Player,
): boolean;
